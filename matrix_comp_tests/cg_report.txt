--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate --show-percs=yes cg.out
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         49152 B, 64 B, 12-way associative
LL cache:         25165824 B, 64 B, 12-way associative
Command:          ./matrix_tests
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ I1mr__________ ILmr__________ Dr_________________ D1mr___________ DLmr__________ Dw_________________ D1mw___________ DLmw___________ Bc_________________ Bcm_____________ Bi________________ Bim___________ 

197,577,752 (100.0%) 2,851 (100.0%) 2,574 (100.0%) 68,217,683 (100.0%) 64,563 (100.0%) 7,804 (100.0%) 26,163,401 (100.0%) 36,770 (100.0%) 34,911 (100.0%) 22,956,248 (100.0%) 157,580 (100.0%) 2,104,394 (100.0%) 1,306 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr______________ ILmr______________ Dr_______________________ D1mr_________________ DLmr________________ Dw______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  file:function

< 58,673,138 (29.7%, 29.7%)   8  (0.3%,  0.3%)   8  (0.3%,  0.3%) 16,783,177 (24.6%, 24.6%)      1  (0.0%,  0.0%)     0  (0.0%,  0.0%) 8,391,308 (32.1%, 32.1%)      3  (0.0%,  0.0%)      1  (0.0%,  0.0%) 10,421,618 (45.4%, 45.4%) 135,359 (85.9%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random_r.c:
  58,666,926 (29.7%)          3  (0.1%)          3  (0.1%)        16,781,312 (24.6%)             0                    0                8,390,656 (32.1%)             0                     0                10,420,654 (45.4%)        135,334 (85.9%)                0                  0                   random_r

< 50,341,495 (25.5%, 55.2%)  20  (0.7%,  1.0%)  19  (0.7%,  1.0%) 23,072,391 (33.8%, 58.4%)     12  (0.0%,  0.0%)     0  (0.0%,  0.0%) 6,292,811 (24.1%, 56.1%) 32,808 (89.2%, 89.2%) 32,807 (94.0%, 94.0%)  2,097,940  (9.1%, 54.5%)      32  (0.0%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp:
  50,341,439 (25.5%)         15  (0.5%)         14  (0.5%)        23,072,382 (33.8%)            12  (0.0%)            0                6,292,795 (24.1%)        32,808 (89.2%)        32,807 (94.0%)         2,097,939  (9.1%)             31  (0.0%)                0                  0                   cache_grind_prf()

< 48,246,292 (24.4%, 79.6%)   5  (0.2%,  1.2%)   5  (0.2%,  1.2%) 18,878,982 (27.7%, 86.1%)      1  (0.0%,  0.0%)     1  (0.0%,  0.0%) 6,292,995 (24.1%, 80.2%)      0  (0.0%, 89.2%)      0  (0.0%, 94.0%)  8,390,659 (36.6%, 91.1%)       0  (0.0%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random.c:
  48,246,272 (24.4%)          3  (0.1%)          3  (0.1%)        18,878,976 (27.7%)             0                    0                6,292,992 (24.1%)             0                     0                 8,390,656 (36.6%)              0                        0                  0                   random

< 18,801,548  (9.5%, 89.1%)  53  (1.9%,  3.0%)  52  (2.0%,  3.3%)  2,625,288  (3.8%, 89.9%) 49,721 (77.0%, 77.0%)     0  (0.0%,  0.0%)   790,628  (3.0%, 83.2%)    193  (0.5%, 89.8%)      0  (0.0%, 94.0%)  1,712,779  (7.5%, 98.5%)   5,948  (3.8%, 89.7%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp:
   7,343,702  (3.7%)          5  (0.2%)          5  (0.2%)         1,311,265  (1.9%)         8,268 (12.8%)            0                  262,154  (1.0%)             0                     0                 1,049,093  (4.6%)            532  (0.3%)                0                  0                   new_mvm(unsigned char*, signed char*, int**, int*, long*)
   4,201,620  (2.1%)          4  (0.1%)          4  (0.2%)         1,049,629  (1.5%)         8,335 (12.9%)            0                  524,294  (2.0%)             1  (0.0%)             0                   525,329  (2.3%)          1,074  (0.7%)                0                  0                   new_mvm_3(unsigned char*, signed char*, int**, int*, long*)
   1,814,672  (0.9%)          7  (0.2%)          7  (0.3%)            66,580  (0.1%)         8,344 (12.9%)            0                    1,024  (0.0%)             0                     0                    33,804  (0.1%)          1,068  (0.7%)                0                  0                   multi_thread_sector(int, unsigned char*, signed char*, int**, long*)
   1,814,663  (0.9%)          7  (0.2%)          7  (0.3%)            66,586  (0.1%)         8,335 (12.9%)            0                    1,027  (0.0%)             0                     0                    33,809  (0.1%)          1,075  (0.7%)                0                  0                   new_mvm_4(unsigned char*, signed char*, int**, int*, long*)
   1,808,592  (0.9%)          5  (0.2%)          5  (0.2%)            65,552  (0.1%)         8,213 (12.7%)            0                        0                     0                     0                    33,792  (0.1%)          1,063  (0.7%)                0                  0                   multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int)
   1,808,472  (0.9%)          6  (0.2%)          5  (0.2%)            65,544  (0.1%)         8,210 (12.7%)            0                        0                     0                     0                    33,792  (0.1%)          1,054  (0.7%)                0                  0                   multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*)

< 12,585,984  (6.4%, 95.5%)   1  (0.0%,  3.1%)   1  (0.0%,  3.3%)  4,195,328  (6.1%, 96.1%)      0  (0.0%, 77.0%)     0  (0.0%,  0.0%) 4,195,328 (16.0%, 99.2%)      0  (0.0%, 89.8%)      0  (0.0%, 94.0%)          0  (0.0%, 98.5%)       0  (0.0%, 89.7%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/rand.c:rand

<  4,227,517  (2.1%, 97.6%) 687 (24.1%, 27.1%) 629 (24.4%, 27.7%)  2,106,610  (3.1%, 99.2%)    464  (0.7%, 77.8%)    26  (0.3%,  0.3%)     4,467  (0.0%, 99.3%)    167  (0.5%, 90.2%)    121  (0.3%, 94.3%)      5,191  (0.0%, 98.6%)     459  (0.3%, 90.0%) 2,099,491 (99.8%, 99.8%) 240 (18.4%, 18.4%)  ???:
   4,200,897  (2.1%)        321 (11.3%)        269 (10.5%)         2,100,141  (3.1%)           340  (0.5%)           10  (0.1%)              614  (0.0%)            21  (0.1%)            13  (0.0%)               173  (0.0%)             49  (0.0%)        2,099,470 (99.8%)        229 (17.5%)           ???

<  2,621,616  (1.3%, 98.9%)   1  (0.0%, 27.2%)   1  (0.0%, 27.8%)         24  (0.0%, 99.2%)      0  (0.0%, 77.8%)     0  (0.0%,  0.3%)        12  (0.0%, 99.3%)      0  (0.0%, 90.2%)      0  (0.0%, 94.3%)          0  (0.0%, 98.6%)       0  (0.0%, 90.0%)         0  (0.0%, 99.8%)   0  (0.0%, 18.4%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp:
   2,621,448  (1.3%)          0                  0                         0                     0                    0                        4  (0.0%)             0                     0                         0                      0                        0                  0                   new_mvm(unsigned char*, signed char*, int**, int*, long*)

<    815,535  (0.4%, 99.4%)  76  (2.7%, 29.8%)  53  (2.1%, 29.8%)    273,374  (0.4%, 99.6%)  3,968  (6.1%, 83.9%) 1,170 (15.0%, 15.3%)   126,250  (0.5%, 99.7%)     85  (0.2%, 90.4%)     44  (0.1%, 94.4%)    109,695  (0.5%, 99.0%)   6,765  (4.3%, 94.3%)       166  (0.0%, 99.8%)   3  (0.2%, 18.6%)  ./elf/./elf/dl-lookup.c:
     511,146  (0.3%)         48  (1.7%)         36  (1.4%)           181,720  (0.3%)         3,406  (5.3%)          886 (11.4%)           69,616  (0.3%)            60  (0.2%)            40  (0.1%)            74,583  (0.3%)          5,952  (3.8%)              166  (0.0%)          3  (0.2%)           do_lookup_x

<    498,204  (0.3%, 99.6%)   4  (0.1%, 30.0%)   2  (0.1%, 29.9%)     82,710  (0.1%, 99.7%)  1,933  (3.0%, 86.9%) 1,694 (21.7%, 37.0%)         0  (0.0%, 99.7%)      0  (0.0%, 90.4%)      0  (0.0%, 94.4%)     82,710  (0.4%, 99.4%)   1,980  (1.3%, 95.5%)         0  (0.0%, 99.8%)   0  (0.0%, 18.6%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr______________ ILmr______________ Dr_______________________ D1mr________________ DLmr________________ Dw______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  function:file

> 58,666,926 (29.7%, 29.7%)   3  (0.1%,  0.1%)   3  (0.1%,  0.1%) 16,781,312 (24.6%, 24.6%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 8,390,656 (32.1%, 32.1%)      0  (0.0%,  0.0%)      0  (0.0%,  0.0%) 10,420,654 (45.4%, 45.4%) 135,334 (85.9%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random_r:./stdlib/./stdlib/random_r.c

> 50,341,439 (25.5%, 55.2%)  15  (0.5%,  0.6%)  14  (0.5%,  0.7%) 23,072,382 (33.8%, 58.4%)    12  (0.0%,  0.0%)     0  (0.0%,  0.0%) 6,292,795 (24.1%, 56.1%) 32,808 (89.2%, 89.2%) 32,807 (94.0%, 94.0%)  2,097,939  (9.1%, 54.5%)      31  (0.0%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  cache_grind_prf():/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp

> 48,246,272 (24.4%, 79.6%)   3  (0.1%,  0.7%)   3  (0.1%,  0.8%) 18,878,976 (27.7%, 86.1%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 6,292,992 (24.1%, 80.2%)      0  (0.0%, 89.2%)      0  (0.0%, 94.0%)  8,390,656 (36.6%, 91.1%)       0  (0.0%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random:./stdlib/./stdlib/random.c

> 12,585,984  (6.4%, 86.0%)   1  (0.0%,  0.8%)   1  (0.0%,  0.8%)  4,195,328  (6.1%, 92.2%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 4,195,328 (16.0%, 96.2%)      0  (0.0%, 89.2%)      0  (0.0%, 94.0%)          0  (0.0%, 91.1%)       0  (0.0%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  rand:./stdlib/./stdlib/rand.c

>  9,965,671  (5.0%, 91.0%)   5  (0.2%,  0.9%)   5  (0.2%,  1.0%)  1,311,265  (1.9%, 94.2%) 8,268 (12.8%, 12.8%)     0  (0.0%,  0.0%)   262,671  (1.0%, 97.2%)     53  (0.1%, 89.4%)      0  (0.0%, 94.0%)  1,049,605  (4.6%, 95.7%)     541  (0.3%, 86.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm(unsigned char*, signed char*, int**, int*, long*):
   7,343,702  (3.7%)          5  (0.2%)          5  (0.2%)         1,311,265  (1.9%)        8,268 (12.8%)            0                  262,154  (1.0%)             0                     0                 1,049,093  (4.6%)            532  (0.3%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp
   2,621,448  (1.3%)          0                  0                         0                    0                    0                        4  (0.0%)             0                     0                         0                      0                        0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp

>  4,202,161  (2.1%, 93.1%)   4  (0.1%,  1.1%)   4  (0.2%,  1.2%)  1,049,629  (1.5%, 95.7%) 8,335 (12.9%, 25.7%)     0  (0.0%,  0.0%)   524,807  (2.0%, 99.2%)     54  (0.1%, 89.5%)      0  (0.0%, 94.0%)    525,841  (2.3%, 97.9%)   1,083  (0.7%, 86.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm_3(unsigned char*, signed char*, int**, int*, long*):
   4,201,620  (2.1%)          4  (0.1%)          4  (0.2%)         1,049,629  (1.5%)        8,335 (12.9%)            0                  524,294  (2.0%)             1  (0.0%)             0                   525,329  (2.3%)          1,074  (0.7%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  4,200,897  (2.1%, 95.3%) 321 (11.3%, 12.3%) 269 (10.5%, 11.6%)  2,100,141  (3.1%, 98.8%)   340  (0.5%, 26.3%)    10  (0.1%,  0.1%)       614  (0.0%, 99.2%)     21  (0.1%, 89.6%)     13  (0.0%, 94.0%)        173  (0.0%, 97.9%)      49  (0.0%, 87.0%) 2,099,470 (99.8%, 99.8%) 229 (17.5%, 17.5%)  ???:???

>  1,815,204  (0.9%, 96.2%)   8  (0.3%, 12.6%)   8  (0.3%, 11.9%)     66,586  (0.1%, 98.9%) 8,335 (12.9%, 39.2%)     0  (0.0%,  0.1%)     1,540  (0.0%, 99.2%)     55  (0.1%, 89.7%)      0  (0.0%, 94.0%)     34,321  (0.1%, 98.1%)   1,083  (0.7%, 87.7%)         0  (0.0%, 99.8%)   0  (0.0%, 17.5%)  new_mvm_4(unsigned char*, signed char*, int**, int*, long*):
   1,814,663  (0.9%)          7  (0.2%)          7  (0.3%)            66,586  (0.1%)        8,335 (12.9%)            0                    1,027  (0.0%)             0                     0                    33,809  (0.1%)          1,075  (0.7%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  1,814,692  (0.9%, 97.1%)   7  (0.2%, 12.9%)   7  (0.3%, 12.2%)     66,580  (0.1%, 99.0%) 8,344 (12.9%, 52.1%)     0  (0.0%,  0.1%)     1,024  (0.0%, 99.2%)      0  (0.0%, 89.7%)      0  (0.0%, 94.0%)     33,804  (0.1%, 98.2%)   1,068  (0.7%, 88.3%)         0  (0.0%, 99.8%)   0  (0.0%, 17.5%)  multi_thread_sector(int, unsigned char*, signed char*, int**, long*):
   1,814,672  (0.9%)          7  (0.2%)          7  (0.3%)            66,580  (0.1%)        8,344 (12.9%)            0                    1,024  (0.0%)             0                     0                    33,804  (0.1%)          1,068  (0.7%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  1,813,712  (0.9%, 98.0%)   6  (0.2%, 13.1%)   6  (0.2%, 12.4%)     67,600  (0.1%, 99.1%) 8,348 (12.9%, 65.0%)     0  (0.0%,  0.1%)         0  (0.0%, 99.2%)      0  (0.0%, 89.7%)      0  (0.0%, 94.0%)     34,816  (0.2%, 98.4%)   1,063  (0.7%, 89.0%)         0  (0.0%, 99.8%)   0  (0.0%, 17.5%)  multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int):
   1,808,592  (0.9%)          5  (0.2%)          5  (0.2%)            65,552  (0.1%)        8,213 (12.7%)            0                        0                     0                     0                    33,792  (0.1%)          1,063  (0.7%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  1,813,592  (0.9%, 98.9%)   6  (0.2%, 13.3%)   5  (0.2%, 12.6%)     67,592  (0.1%, 99.2%) 8,335 (12.9%, 77.9%)     0  (0.0%,  0.1%)         0  (0.0%, 99.2%)      0  (0.0%, 89.7%)      0  (0.0%, 94.0%)     34,816  (0.2%, 98.5%)   1,054  (0.7%, 89.7%)         0  (0.0%, 99.8%)   0  (0.0%, 17.5%)  multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*):
   1,808,472  (0.9%)          6  (0.2%)          5  (0.2%)            65,544  (0.1%)        8,210 (12.7%)            0                        0                     0                     0                    33,792  (0.1%)          1,054  (0.7%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>    687,254  (0.3%, 99.3%)  20  (0.7%, 14.0%)  13  (0.5%, 13.1%)    137,223  (0.2%, 99.4%) 1,955  (3.0%, 81.0%) 1,695 (21.7%, 21.8%)    42,901  (0.2%, 99.4%)     12  (0.0%, 89.8%)      3  (0.0%, 94.0%)    104,105  (0.5%, 99.0%)   2,690  (1.7%, 91.4%)         0  (0.0%, 99.8%)   0  (0.0%, 17.5%)  _dl_lookup_symbol_x:
     498,204  (0.3%)          4  (0.1%)          2  (0.1%)            82,710  (0.1%)        1,933  (3.0%)        1,694 (21.7%)                0                     0                     0                    82,710  (0.4%)          1,980  (1.3%)                0                  0                   ./elf/../sysdeps/generic/dl-new-hash.h

>    528,565  (0.3%, 99.5%)  48  (1.7%, 15.7%)  36  (1.4%, 14.5%)    183,657  (0.3%, 99.6%) 3,406  (5.3%, 86.2%)   886 (11.4%, 33.2%)    69,622  (0.3%, 99.7%)     60  (0.2%, 89.9%)     40  (0.1%, 94.1%)     76,517  (0.3%, 99.3%)   5,952  (3.8%, 95.2%)       169  (0.0%, 99.8%)   5  (0.4%, 17.9%)  do_lookup_x:
     511,146  (0.3%)         48  (1.7%)         36  (1.4%)           181,720  (0.3%)        3,406  (5.3%)          886 (11.4%)           69,616  (0.3%)            60  (0.2%)            40  (0.1%)            74,583  (0.3%)          5,952  (3.8%)              166  (0.0%)          3  (0.2%)           ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/rand.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/rand.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp
--------------------------------------------------------------------------------
Ir______________ I1mr____ ILmr____ Dr____________ D1mr_________ DLmr Dw____________ D1mw_____ DLmw Bc____________ Bcm_________ Bi Bim 

        .        .        .              .            .            .       .         .           .       .            .         .   .  #include "bttd.hpp"
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .  //sector{1,2,3,4}-1;
       14 (0.0%) 1 (0.0%) 1 (0.0%)       0            0            0       6 (0.0%)  0           0       0            0         0   0  void new_mvm(pcm_size_t*matrix,input_size_t*vector, int* *layers,int*sectors,int64_t*result ){
        1 (0.0%) 0        0              1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .              .            .            .       .         .           .       .            .         .   .      memset(result,0,512*8);
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .      int s_idx=0;
       28 (0.0%) 2 (0.1%) 2 (0.1%)      13 (0.0%)     8  (0.0%)    0       0         0           0       5 (0.0%)     1 (0.0%)  0   0      while(sectors[s_idx]!=-1){
        .        .        .              .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
    2,052 (0.0%) 0        0              0            0            0       0         0           0     512 (0.0%)     6 (0.0%)  0   0          for(int y=0;y<tile_size;++y){
  786,432 (0.4%) 0        0              0            0            0       0         0           0 262,144 (1.1%)   519 (0.3%)  0   0              for(int x=0;x<max_x;++x){
        .        .        .              .            .            .       .         .           .       .            .         .   .                  int l=0;
  262,144 (0.1%) 0        0              0            0            0       0         0           0       0            0         0   0                  uint64_t wheight=0;
3,407,896 (1.7%) 1 (0.0%) 1 (0.0%) 524,296 (0.8%)     3  (0.0%)    0       4 (0.0%)  0           0 786,432 (3.4%)     6 (0.0%)  0   0                  while(layers[s][l]!=-1){
1,572,864 (0.8%) 1 (0.0%) 1 (0.0%) 524,288 (0.8%) 8,197 (12.7%)    0       0         0           0       0            0         0   0                      wheight+=matrix[m_inedx(s,layers[s][l],y,x)];
        .        .        .              .            .            .       .         .           .       .            .         .   .                      ++l;
        .        .        .              .            .            .       .         .           .       .            .         .   .                  }
1,312,264 (0.7%) 0        0        262,660 (0.4%)    58  (0.1%)    0 262,144 (1.0%)  0           0       0            0         0   0                  result[sectors[s]*128+y]+=wheight*vector[x];
        .        .        .              .            .            .       .         .           .       .            .         .   .              }
        .        .        .              .            .            .       .         .           .       .            .         .   .          }
        .        .        .              .            .            .       .         .           .       .            .         .   .              
        .        .        .              .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        7 (0.0%) 0        0              7 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .  void new_mvm_2(pcm_size_t*matrix,input_size_t*vector, int** layers,int*sectors,int64_t*result ){
        .        .        .              .            .            .       .         .           .       .            .         .   .      ++computations;
        .        .        .              .            .            .       .         .           .       .            .         .   .      memset(result,0,512*8);
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .      int s_idx=0;
        .        .        .              .            .            .       .         .           .       .            .         .   .      while(sectors[s_idx]!=-1){
        .        .        .              .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
-- line 34 ----------------------------------------
-- line 44 ----------------------------------------
        .        .        .              .            .            .       .         .           .       .            .         .   .              }
        .        .        .              .            .            .       .         .           .       .            .         .   .          }
        .        .        .              .            .            .       .         .           .       .            .         .   .              
        .        .        .              .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
       13 (0.0%) 1 (0.0%) 1 (0.0%)       0            0            0       6 (0.0%)  1 (0.0%)    0       0            0         0   0  void new_mvm_3(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0              1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .              .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       19 (0.0%) 1 (0.0%) 1 (0.0%)       5 (0.0%)     4  (0.0%)    0       0         0           0       5 (0.0%)     2 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .          int s = sectors[s_idx];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
       52 (0.0%) 0        0             16 (0.0%)    11  (0.0%)    0       0         0           0      12 (0.0%)     4 (0.0%)  0   0          while (layers[s][l_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .              int l = layers[s][l_idx];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .              
       24 (0.0%) 0        0              0            0            0       0         0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
    3,088 (0.0%) 0        0              0            0            0       0         0           0   1,024 (0.0%)     9 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
       16 (0.0%) 1 (0.0%) 1 (0.0%)       0            0            0       0         0           0       0            0         0   0                  int64_t* result_row_ptr = &result[s * 128 + y];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
1,573,888 (0.8%) 1 (0.0%) 1 (0.0%)       0            0            0       0         0           0 524,288 (2.3%) 1,059 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
  524,288 (0.3%) 0        0        524,288 (0.8%) 8,197 (12.7%)    0       0         0           0       0            0         0   0                      uint64_t wheight = *matrix_base; 
2,100,224 (1.1%) 0        0        525,312 (0.8%)   120  (0.2%)    0 524,288 (2.0%)  0           0       0            0         0   0                      *result_row_ptr += wheight * vector[x];
        .        .        .              .            .            .       .         .           .       .            .         .   .                      
        .        .        .              .            .            .       .         .           .       .            .         .   .                      matrix_base++; 
        .        .        .              .            .            .       .         .           .       .            .         .   .                  }
        .        .        .              .            .            .       .         .           .       .            .         .   .              }
        .        .        .              .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .          }
        .        .        .              .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        7 (0.0%) 0        0              7 (0.0%)     2  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
    3,079 (0.0%) 1 (0.0%) 1 (0.0%)       0            0            0       3 (0.0%)  0           0       0            0         0   0  void new_mvm_4(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0              1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .              .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       20 (0.0%) 0        0              5 (0.0%)     5  (0.0%)    0       0         0           0       5 (0.0%)     1 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .          int s = sectors[s_idx];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
        8 (0.0%) 0        0              4 (0.0%)     0            0       0         0           0       0            0         0   0          int* curr_layers = layers[s];
       44 (0.0%) 1 (0.0%) 1 (0.0%)      12 (0.0%)    11  (0.0%)    0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .              int l = curr_layers[l_idx];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .              
       24 (0.0%) 0        0              0            0            0       0         0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
    3,080 (0.0%) 0        0              0            0            0       0         0           0   1,024 (0.0%)    10 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
        .        .        .              .            .            .       .         .           .       .            .         .   .                  int64_t row_sum = 0;
        .        .        .              .            .            .       .         .           .       .            .         .   .  
   65,536 (0.0%) 0        0              0            0            0       0         0           0  32,768 (0.1%) 1,058 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
        .        .        .              .            .            .       .         .           .       .            .         .   .                      
1,736,707 (0.9%) 4 (0.1%) 4 (0.2%)  65,536 (0.1%) 8,197 (12.7%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
        .        .        .              .            .            .       .         .           .       .            .         .   .                      
        .        .        .              .            .            .       .         .           .       .            .         .   .                      matrix_base++; 
        .        .        .              .            .            .       .         .           .       .            .         .   .                  }
    6,160 (0.0%) 1 (0.0%) 1 (0.0%)   1,024 (0.0%)   120  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
        .        .        .              .            .            .       .         .           .       .            .         .   .              }
        .        .        .              .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .          }
        .        .        .              .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        4 (0.0%) 0        0              4 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
    3,092 (0.0%) 2 (0.1%) 2 (0.1%)       0            0            0       0         0           0       0            0         0   0  void multi_thread_sector(int s, pcm_size_t* matrix, input_size_t* vector,  int** layers, int64_t* result) {
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
        8 (0.0%) 0        0              4 (0.0%)     3  (0.0%)    0       0         0           0       0            0         0   0          int* curr_layers = layers[s];
       44 (0.0%) 1 (0.0%) 1 (0.0%)      12 (0.0%)    12  (0.0%)    0       0         0           0      12 (0.0%)     4 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .              int l = curr_layers[l_idx];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .              
       24 (0.0%) 0        0              0            0            0       0         0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
    3,088 (0.0%) 0        0              0            0            0       0         0           0   1,024 (0.0%)    10 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
        .        .        .              .            .            .       .         .           .       .            .         .   .                  int64_t row_sum = 0;
        .        .        .              .            .            .       .         .           .       .            .         .   .  
   65,536 (0.0%) 0        0              0            0            0       0         0           0  32,768 (0.1%) 1,054 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
        .        .        .              .            .            .       .         .           .       .            .         .   .                      
1,736,720 (0.9%) 3 (0.1%) 3 (0.1%)  65,536 (0.1%) 8,200 (12.7%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
        .        .        .              .            .            .       .         .           .       .            .         .   .                      
        .        .        .              .            .            .       .         .           .       .            .         .   .                      matrix_base++; 
        .        .        .              .            .            .       .         .           .       .            .         .   .                  }
    6,156 (0.0%) 1 (0.0%) 1 (0.0%)   1,024 (0.0%)   125  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
        .        .        .              .            .            .       .         .           .       .            .         .   .              }
        .        .        .              .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .          }
        4 (0.0%) 0        0              4 (0.0%)     4  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
       15 (0.0%) 2 (0.1%) 2 (0.1%)       1 (0.0%)     0            0      10 (0.0%)  0           0       0            0         0   0  void new_mvm_mtd_4(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0              1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .              .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        3 (0.0%) 0        0              0            0            0       2 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       28 (0.0%) 1 (0.0%) 1 (0.0%)       5 (0.0%)     1  (0.0%)    0       0         0           0       5 (0.0%)     1 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .          std::thread t(multi_thread_sector, sectors[s_idx], matrix, vector, layers, result);
        .        .        .              .            .            .       .         .           .       .            .         .   .          threads.push_back(move(t));
        1 (0.0%) 0        0              0            0            0       0         0           0       0            0         0   0          s_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
       22 (0.0%) 0        0              0            0            0       0         0           0       5 (0.0%)     3 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
        8 (0.0%) 1 (0.0%) 1 (0.0%)       0            0            0       4 (0.0%)  0           0       0            0         0   0          threads[i].join();
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        7 (0.0%) 0        0              6 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
    3,080 (0.0%) 1 (0.0%) 1 (0.0%)       0            0            0       0         0           0       0            0         0   0  void multi_thread_layer( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result) {
        .        .        .              .            .            .       .         .           .       .            .         .   .  
    3,072 (0.0%) 1 (0.0%) 0              0            0            0       0         0           0   1,024 (0.0%)    10 (0.0%)  0   0      for (int y = 0; y < tile_size; ++y) {
        .        .        .              .            .            .       .         .           .       .            .         .   .          int64_t row_sum = 0;
        .        .        .              .            .            .       .         .           .       .            .         .   .  
   65,536 (0.0%) 0        0              0            0            0       0         0           0  32,768 (0.1%) 1,044 (0.7%)  0   0          for (int x = 0; x < max_x; ++x) {
        .        .        .              .            .            .       .         .           .       .            .         .   .              
1,736,728 (0.9%) 4 (0.1%) 4 (0.2%)  65,536 (0.1%) 8,202 (12.7%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
        .        .        .              .            .            .       .         .           .       .            .         .   .              
        .        .        .              .            .            .       .         .           .       .            .         .   .              matrix++; 
        .        .        .              .            .            .       .         .           .       .            .         .   .          }
       48 (0.0%) 0        0              0            0            0       0         0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        .        .        .              .            .            .       .         .           .       .            .         .   .          
        8 (0.0%) 0        0              8 (0.0%)     8  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
       19 (0.0%) 3 (0.1%) 3 (0.1%)       2 (0.0%)     0            0      11 (0.0%)  0           0       0            0         0   0  void new_mvm_mtd_8(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0              1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .              .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        5 (0.0%) 0        0              0            0            0       3 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
      515 (0.0%) 1 (0.0%) 1 (0.0%)       0            0            0     512 (0.0%)  0           0     512 (0.0%)     9 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
    1,537 (0.0%) 0        0              0            0            0       0         0           0     512 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       26 (0.0%) 1 (0.0%) 1 (0.0%)      13 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
        .        .        .              .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
       16 (0.0%) 0        0              8 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       60 (0.0%) 1 (0.0%) 1 (0.0%)      20 (0.0%)     3  (0.0%)    0       0         0           0      12 (0.0%)     8 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .              int l = curr_layers[l_idx];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
       24 (0.0%) 0        0              8 (0.0%)     0            0       0         0           0       0            0         0   0              std::thread t(multi_thread_layer, &matrix[m_inedx(s, l, 0, 0)],s, vector, temp_result);
        .        .        .              .            .            .       .         .           .       .            .         .   .              threads.push_back(move(t));
        .        .        .              .            .            .       .         .           .       .            .         .   .              
        .        .        .              .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .          }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
       38 (0.0%) 0        0              2 (0.0%)     1  (0.0%)    0       0         0           0       9 (0.0%)     1 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
       16 (0.0%) 0        0              0            0            0       8 (0.0%)  0           0       0            0         0   0          threads[i].join();
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
    2,051 (0.0%) 1 (0.0%) 1 (0.0%)       2 (0.0%)     1  (0.0%)    0       0         0           0     512 (0.0%)    10 (0.0%)  0   0      for(int i=0;i<512;++i){
      512 (0.0%) 0        0              0            0            0     512 (0.0%) 65 (0.2%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
       11 (0.0%) 0        0              9 (0.0%)     1  (0.0%)    0       0         0           0       1 (0.0%)     0         0   0  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
       19 (0.0%) 3 (0.1%) 3 (0.1%)       2 (0.0%)     1  (0.0%)    0      11 (0.0%)  2 (0.0%)    0       0            0         0   0  void new_mvm_mtd_16(pcm_size_t* matrix, input_size_t* vector,  int** layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0              1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .              .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        7 (0.0%) 0        0              0            0            0       5 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
        .        .        .              .            .            .       .         .           .       .            .         .   .      int thread_count = 2;
      515 (0.0%) 1 (0.0%) 1 (0.0%)       0            0            0     512 (0.0%) 60 (0.2%)    0     512 (0.0%)     6 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
    1,538 (0.0%) 0        0              0            0            0       0         0           0     512 (0.0%)     6 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       30 (0.0%) 2 (0.1%) 2 (0.1%)      13 (0.0%)     0            0       6 (0.0%)  0           0       5 (0.0%)     2 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
        .        .        .              .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
       16 (0.0%) 0        0             12 (0.0%)     0            0       0         0           0       0            0         0   0          int* curr_layers = layers[s];
       44 (0.0%) 0        0             12 (0.0%)     0            0       0         0           0      12 (0.0%)     8 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        .        .        .              .            .            .       .         .           .       .            .         .   .              int l = curr_layers[l_idx];
        .        .        .              .            .            .       .         .           .       .            .         .   .  
       64 (0.0%) 1 (0.0%) 1 (0.0%)       0            0            0       0         0           0      16 (0.0%)     7 (0.0%)  0   0              for(int i=0;i<thread_count;++i){
        .        .        .              .            .            .       .         .           .       .            .         .   .                  int y_start = i * (tile_size / thread_count);
        .        .        .              .            .            .       .         .           .       .            .         .   .                  std::thread t(multi_thread_layer_2, &matrix[m_inedx(s, l, 0, 0)+y_start*max_x],s, vector, temp_result,y_start);
        .        .        .              .            .            .       .         .           .       .            .         .   .                  threads.push_back(move(t));
        .        .        .              .            .            .       .         .           .       .            .         .   .              
        .        .        .              .            .            .       .         .           .       .            .         .   .              }
        .        .        .              .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .          }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
       70 (0.0%) 1 (0.0%) 1 (0.0%)       2 (0.0%)     1  (0.0%)    0       0         0           0      17 (0.0%)     3 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
       32 (0.0%) 0        0              0            0            0      16 (0.0%)  0           0       0            0         0   0          threads[i].join();
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
    2,052 (0.0%) 0        0              3 (0.0%)     1  (0.0%)    0       0         0           0     512 (0.0%)    10 (0.0%)  0   0      for(int i=0;i<512;++i){
      512 (0.0%) 0        0              0            0            0     512 (0.0%) 65 (0.2%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
       11 (0.0%) 0        0              9 (0.0%)     1  (0.0%)    0       0         0           0       1 (0.0%)     0         0   0  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .  
    3,088 (0.0%) 2 (0.1%) 2 (0.1%)       0            0            0       0         0           0       0            0         0   0  void multi_thread_layer_2( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result,int y_start) {
    3,072 (0.0%) 0        0              0            0            0       0         0           0   1,024 (0.0%)    18 (0.0%)  0   0      for (int y = y_start; y < y_start+64; ++y) {
        .        .        .              .            .            .       .         .           .       .            .         .   .          int64_t row_sum = 0;
        .        .        .              .            .            .       .         .           .       .            .         .   .  
   65,536 (0.0%) 0        0              0            0            0       0         0           0  32,768 (0.1%) 1,045 (0.7%)  0   0          for (int x = 0; x < max_x; ++x) {
        .        .        .              .            .            .       .         .           .       .            .         .   .              
1,736,832 (0.9%) 3 (0.1%) 3 (0.1%)  65,536 (0.1%) 8,213 (12.7%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
        .        .        .              .            .            .       .         .           .       .            .         .   .              
        .        .        .              .            .            .       .         .           .       .            .         .   .              matrix++; 
        .        .        .              .            .            .       .         .           .       .            .         .   .          }
       48 (0.0%) 0        0              0            0            0       0         0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
        .        .        .              .            .            .       .         .           .       .            .         .   .      }
        .        .        .              .            .            .       .         .           .       .            .         .   .          
       16 (0.0%) 0        0             16 (0.0%)     0            0       0         0           0       0            0         0   0  }
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .  
        .        .        .              .            .            .       .         .           .       .            .         .   .  void acc_test(pcm_size_t*matrix, int* layers,int*sectors){
        .        .        .              .            .            .       .         .           .       .            .         .   .      int s=0;
        .        .        .              .            .            .       .         .           .       .            .         .   .      while(sectors[s]!=-1){
        .        .        .              .            .            .       .         .           .       .            .         .   .          int l=0;
        .        .        .              .            .            .       .         .           .       .            .         .   .          while(layers[l]!=-1){
        .        .        .              .            .            .       .         .           .       .            .         .   .              for(int y=0;y<tile_size;++y){
-- line 266 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp
--------------------------------------------------------------------------------
Ir______________ I1mr____ ILmr____ Dr_______ D1mr DLmr Dw_______ D1mw DLmw Bc Bcm Bi Bim 

-- line 3 ----------------------------------------
        .        .        .         .           .    .  .           .    .  .   .  .   .  //Back To The Drawingboard
        .        .        .         .           .    .  .           .    .  .   .  .   .  #include "matrix_multisec.hpp"
        .        .        .         .           .    .  .           .    .  .   .  .   .  #include <atomic> 
        .        .        .         .           .    .  .           .    .  .   .  .   .  extern unsigned int computations; 
        .        .        .         .           .    .  .           .    .  .   .  .   .  
        .        .        .         .           .    .  .           .    .  .   .  .   .  #define PREFETCH_DISTANCE 32
        .        .        .         .           .    .  .           .    .  .   .  .   .  
        .        .        .         .           .    .  .           .    .  .   .  .   .  inline long long m_inedx(int s,int l,int y,int x){
2,621,616 (1.3%) 1 (0.0%) 1 (0.0%) 24 (0.0%)    0    0 12 (0.0%)    0    0  0   0  0   0      return (((s*8+l)*128+y)*512)+x;
        .        .        .         .           .    .  .           .    .  .   .  .   .  }
        .        .        .         .           .    .  .           .    .  .   .  .   .  
        .        .        .         .           .    .  .           .    .  .   .  .   .  inline long long m_inedx_2(int s,int l,int y,int x){
        .        .        .         .           .    .  .           .    .  .   .  .   .      return (((s*128+y)*512+x)*8)+l;
        .        .        .         .           .    .  .           .    .  .   .  .   .  }
        .        .        .         .           .    .  .           .    .  .   .  .   .  
        .        .        .         .           .    .  .           .    .  .   .  .   .  /**
        .        .        .         .           .    .  .           .    .  .   .  .   .   * |L0(0),L1(0),L2(0),.......
-- line 19 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp
--------------------------------------------------------------------------------
Ir________________ I1mr____ ILmr____ Dr________________ D1mr____ DLmr Dw_______________ D1mw__________ DLmw__________ Bc______________ Bcm_____ Bi Bim 

-- line 65 ----------------------------------------
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  double cpuSecond() {
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    struct timespec ts;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    timespec_get(&ts, TIME_UTC);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    return ((double)ts.tv_sec + (double)ts.tv_nsec * 1.e-9);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  }
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
        21  (0.0%) 1 (0.0%) 1 (0.0%)          0         0           0         4  (0.0%)      0              0                 0        0         0   0  Logger logger("logs.txt");
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         9  (0.0%) 1 (0.0%) 1 (0.0%)          1  (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0  int main(int args,char ** argv){
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         1  (0.0%) 0        0                 0         0           0         1  (0.0%)      0              0                 0        0         0   0    cache_grind_prf();
         2  (0.0%) 0        0                 0         0           0         1  (0.0%)      0              0                 0        0         0   0    exit(0);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    // benchmark_mvm_algorithms();
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    // exit(0);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    // scattered_matrix();
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    // new_mvm_test();
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    // exit(0); 
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    uint64_t size;
-- line 86 ----------------------------------------
-- line 176 ----------------------------------------
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    delete[] f;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    delete[] result;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    delete[] sector;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    delete[] layer;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    return 0;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  }
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         8  (0.0%) 1 (0.0%) 1 (0.0%)          1  (0.0%) 0           0         3  (0.0%)      0              0                 0        0         0   0  void cache_grind_prf(){
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    uint64_t size;
         3  (0.0%) 0        0                 0         0           0         2  (0.0%)      0              0                 0        0         0   0    input_size_t * vector = new input_size_t[max_vect];
         9  (0.0%) 1 (0.0%) 1 (0.0%)          1  (0.0%) 0           0         2  (0.0%)      0              0                 0        0         0   0    std::cout<<"befre alloc: " << std::endl;
         4  (0.0%) 0        0                 0         0           0         2  (0.0%)      0              0                 0        0         0   0    pcm_size_t * f = flat(&size); 
         3  (0.0%) 0        0                 0         0           0         2  (0.0%)      0              0                 0        0         0   0    int64_t * result = new int64_t[max_vect];
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         4  (0.0%) 1 (0.0%) 1 (0.0%)          0         0           0         2  (0.0%)      0              0                 0        0         0   0    srand(time(nullptr));
         1  (0.0%) 0        0                 0         0           0         1  (0.0%)      0              0                 0        0         0   0    int range = INT8_MAX - INT8_MIN + 1;
     1,540  (0.0%) 1 (0.0%) 1 (0.0%)      1,025  (0.0%) 0           0         1  (0.0%)      0              0               513 (0.0%) 7 (0.0%)  0   0    for(int i=0;i<512;i++){
     5,632  (0.0%) 0        0             1,536  (0.0%) 0           0     1,024  (0.0%)      7  (0.0%)      7  (0.0%)         0        0         0   0      vector[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .         .        .                 .         .           .         .              .              .                 .        .         .   .      
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    }
       772  (0.0%) 0        0               513  (0.0%) 0           0         1  (0.0%)      0              0               257 (0.0%) 8 (0.0%)  0   0    for(int i=0;i<256;i++){
     1,536  (0.0%) 0        0               512  (0.0%) 0           0       256  (0.0%)     32  (0.1%)     32  (0.1%)         0        0         0   0      result[i]=0;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    }
10,485,766  (5.3%) 2 (0.1%) 2 (0.1%)  6,291,458  (9.2%) 0           0         1  (0.0%)      0              0         2,097,153 (9.1%) 8 (0.0%)  0   0    for(long long i=0;i<size;++i){
20,971,520 (10.6%) 0        0         6,291,456  (9.2%) 0           0 4,194,304 (16.0%) 32,768 (89.1%) 32,768 (93.9%)         0        0         0   0      f[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
18,874,368  (9.6%) 0        0        10,485,760 (15.4%) 0           0 2,097,152  (8.0%)      0              0                 0        0         0   0      f[i]&= 0x0F;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .      ///std::cout<<static_cast<int32_t>(f[i]);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    }
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         3  (0.0%) 0        0                 0         0           0         2  (0.0%)      0              0                 0        0         0   0    int* sector = new int[4+1];
         3  (0.0%) 0        0                 0         0           0         2  (0.0%)      1  (0.0%)      0                 0        0         0   0    int**layer =new int*[n_sectors+1];
        16  (0.0%) 1 (0.0%) 1 (0.0%)          9  (0.0%) 0           0         1  (0.0%)      0              0                 5 (0.0%) 3 (0.0%)  0   0    for(int i=0;i<n_sectors;++i){
        32  (0.0%) 0        0                 8  (0.0%) 0           0         8  (0.0%)      0              0                 0        0         0   0      layer[i]=new int[8+1];
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    }
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
        16  (0.0%) 1 (0.0%) 1 (0.0%)          9  (0.0%) 0           0         1  (0.0%)      0              0                 5 (0.0%) 4 (0.0%)  0   0    for(int i=0;i<4;++i){
        28  (0.0%) 1 (0.0%) 1 (0.0%)         12  (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0      sector[i]=i;
        28  (0.0%) 0        0                12  (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0      layer[i][0]=0;
        32  (0.0%) 0        0                12  (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0      layer[i][1]=7;
        32  (0.0%) 0        0                12  (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0      layer[i][2]=-1;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    }
         3  (0.0%) 0        0                 1  (0.0%) 0           0         1  (0.0%)      0              0                 0        0         0   0    sector[4]=-1;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 0           0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_mtd_16(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 0                 5  (0.0%) 2 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_mtd_8(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 2 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_mtd_4(f,vector,layer,sector,result);
         8  (0.0%) 0        0                 5  (0.0%) 2 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_4(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 2 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_3(f,vector,layer,sector,result);
         8  (0.0%) 0        0                 5  (0.0%) 2 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm(f,vector,layer,sector,result);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         5  (0.0%) 1 (0.0%) 1 (0.0%)          2  (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] vector;
         5  (0.0%) 0        0                 2  (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] f;
         5  (0.0%) 0        0                 2  (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] result;
         5  (0.0%) 1 (0.0%) 1 (0.0%)          2  (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] sector;
         5  (0.0%) 0        0                 2  (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] layer;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         7  (0.0%) 0        0                 5  (0.0%) 0           0         0              0              0                 1 (0.0%) 1 (0.0%)  0   0  }
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  void scattered_matrix(){
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    uint64_t size;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    input_size_t * vector = new input_size_t[max_vect];
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    std::cout<<"befre alloc: " << std::endl;
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    pcm_size_t * f = flat(&size); 
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    int64_t * result = new int64_t[max_vect];
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
-- line 241 ----------------------------------------
-- line 787 ----------------------------------------
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    fclose(mtd_32);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    fclose(mtd_64);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    fclose(mtd_128);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .    fclose(mtd_512);
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
        23  (0.0%) 3 (0.1%) 3 (0.1%)          8  (0.0%) 0           0         6  (0.0%)      0              0                 1 (0.0%) 1 (0.0%)  0   0  }
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  
         .         .        .                 .         .           .         .              .              .                 .        .         .   .  

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_________________ I1mr_________ ILmr_________ Dr________________ D1mr__________ DLmr_________ Dw________________ D1mw__________ DLmw__________ Bc________________ Bcm____________ Bi_______________ Bim__________ 

 71,764,659 (36.3%)    74  (2.6%)    72  (2.8%) 25,697,703 (37.7%) 49,733 (77.0%)     0          7,083,451 (27.1%) 33,001 (89.7%) 32,807 (94.0%)  3,810,719 (16.6%)   5,980  (3.8%)         0             0            annotated: files known & above threshold & readable, line numbers known
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0            annotated: files known & above threshold & readable, line numbers unknown
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0          unannotated: files known & above threshold & two or more non-identical
120,819,153 (61.2%)    94  (3.3%)    69  (2.7%) 40,213,571 (58.9%)  5,903  (9.1%) 2,865 (36.7%) 19,005,881 (72.6%)     88  (0.2%)     45  (0.1%) 19,004,682 (82.8%) 144,104 (91.4%)       166  (0.0%)     3  (0.2%)  unannotated: files known & above threshold & unreadable 
    766,423  (0.4%) 1,996 (70.0%) 1,804 (70.1%)    199,799  (0.3%)  8,463 (13.1%) 4,913 (63.0%)     69,602  (0.3%)  3,514  (9.6%)  1,938  (5.6%)    135,656  (0.6%)   7,037  (4.5%)     4,737  (0.2%) 1,063 (81.4%)  unannotated: files known & below threshold
  4,227,517  (2.1%)   687 (24.1%)   629 (24.4%)  2,106,610  (3.1%)    464  (0.7%)    26  (0.3%)      4,467  (0.0%)    167  (0.5%)    121  (0.3%)      5,191  (0.0%)     459  (0.3%) 2,099,491 (99.8%)   240 (18.4%)  unannotated: files unknown

