--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate --show-percs=yes cg.out
I1 cache:         65536 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         25165824 B, 64 B, 12-way associative
Command:          ./matrix_tests
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ I1mr__________ ILmr__________ Dr__________________ D1mr___________ DLmr__________ Dw_________________ D1mw___________ DLmw___________ Bc_________________ Bcm_____________ Bi________________ Bim___________ 

484,902,297 (100.0%) 2,962 (100.0%) 2,843 (100.0%) 184,408,711 (100.0%) 75,532 (100.0%) 7,790 (100.0%) 52,313,232 (100.0%) 71,508 (100.0%) 69,249 (100.0%) 47,040,665 (100.0%) 297,623 (100.0%) 4,213,911 (100.0%) 1,294 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir________________________ I1mr______________ ILmr______________ Dr_______________________ D1mr_________________ DLmr________________ Dw_______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  file:function

< 130,448,671 (26.9%, 26.9%)  82  (2.8%,  2.8%)  82  (2.9%,  2.9%) 60,873,905 (33.0%, 33.0%) 58,379 (77.3%, 77.3%)     0  (0.0%,  0.0%)  3,171,096  (6.1%,  6.1%)    220  (0.3%,  0.3%)      0  (0.0%,  0.0%)  4,734,165 (10.1%, 10.1%)   6,495  (2.2%,  2.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp:
   51,383,891 (10.6%)          7  (0.2%)          7  (0.2%)        20,973,083 (11.4%)         8,653 (11.5%)            0                   786,957  (1.5%)             0                     0                 1,049,609  (2.2%)            554  (0.2%)                0                  0                   sslow_mvm(unsigned char****, signed char*, int**, int*, long*)
   33,820,273  (7.0%)          9  (0.3%)          9  (0.3%)        14,681,640  (8.0%)         8,262 (10.9%)            0                 1,311,250  (2.5%)             0                     0                 1,049,609  (2.2%)            555  (0.2%)                0                  0                   new_mvm(unsigned char*, signed char*, int**, int*, long*)
   11,552,213  (2.4%)          7  (0.2%)          7  (0.2%)         6,297,776  (3.4%)         8,345 (11.0%)            0                 1,050,674  (2.0%)             8  (0.0%)             0                   526,361  (1.1%)          1,059  (0.4%)                0                  0                   new_mvm_3(unsigned char*, signed char*, int**, int*, long*)
    8,419,725  (1.7%)          7  (0.2%)          7  (0.2%)         4,730,004  (2.6%)         8,342 (11.0%)            0                     3,126  (0.0%)             7  (0.0%)             0                   526,361  (1.1%)          1,074  (0.4%)                0                  0                   new_mvm_4(unsigned char*, signed char*, int**, int*, long*)
    8,419,688  (1.7%)          6  (0.2%)          6  (0.2%)         4,729,980  (2.6%)         8,346 (11.0%)            0                     3,140  (0.0%)             4  (0.0%)             0                   526,356  (1.1%)          1,056  (0.4%)                0                  0                   multi_thread_sector(int, unsigned char*, signed char*, int**, long*)
    8,411,440  (1.7%)          5  (0.2%)          5  (0.2%)         4,726,864  (2.6%)         8,215 (10.9%)            0                     5,248  (0.0%)             0                     0                   526,352  (1.1%)          1,063  (0.4%)                0                  0                   multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int, int)
    8,410,232  (1.7%)          2  (0.1%)          2  (0.1%)         4,725,784  (2.6%)         8,202 (10.9%)            0                     5,168  (0.0%)             8  (0.0%)             0                   526,344  (1.1%)          1,056  (0.4%)                0                  0                   multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*)

< 117,325,744 (24.2%, 51.1%)   8  (0.3%,  3.0%)   8  (0.3%,  3.2%) 33,560,393 (18.2%, 51.2%)      1  (0.0%, 77.3%)     0  (0.0%,  0.0%) 16,779,916 (32.1%, 38.1%)      3  (0.0%,  0.3%)      1  (0.0%,  0.0%) 20,839,728 (44.3%, 54.4%) 270,664 (90.9%, 93.1%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random_r.c:
  117,319,532 (24.2%)          3  (0.1%)          3  (0.1%)        33,558,528 (18.2%)             0                    0                16,779,264 (32.1%)             0                     0                20,838,764 (44.3%)        270,638 (90.9%)                0                  0                   random_r

<  96,480,788 (19.9%, 71.0%)   5  (0.2%,  3.2%)   5  (0.2%,  3.3%) 37,753,350 (20.5%, 71.7%)      1  (0.0%, 77.3%)     1  (0.0%,  0.0%) 12,584,451 (24.1%, 62.2%)      0  (0.0%,  0.3%)      0  (0.0%,  0.0%) 16,779,267 (35.7%, 90.0%)       0  (0.0%, 93.1%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random.c:
   96,480,768 (19.9%)          3  (0.1%)          3  (0.1%)        37,753,344 (20.5%)             0                    0                12,584,448 (24.1%)             0                     0                16,779,264 (35.7%)              0                        0                  0                   random

<  92,387,650 (19.1%, 90.0%)  28  (0.9%,  4.2%)  26  (0.9%,  4.3%) 35,692,417 (19.4%, 91.0%)     15  (0.0%, 77.3%)     0  (0.0%,  0.0%)  8,402,363 (16.1%, 78.3%) 63,023 (88.1%, 88.4%) 62,992 (91.0%, 91.0%)  4,203,357  (8.9%, 99.0%)   4,189  (1.4%, 94.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp:
   92,387,594 (19.1%)         20  (0.7%)         19  (0.7%)        35,692,408 (19.4%)            15  (0.0%)            0                 8,402,347 (16.1%)        63,023 (88.1%)        62,992 (91.0%)         4,203,356  (8.9%)          4,188  (1.4%)                0                  0                   cache_grind_prf()

<  25,168,896  (5.2%, 95.2%)   1  (0.0%,  4.2%)   1  (0.0%,  4.3%)  8,389,632  (4.5%, 95.6%)      0  (0.0%, 77.3%)     0  (0.0%,  0.0%)  8,389,632 (16.0%, 94.3%)      0  (0.0%, 88.4%)      0  (0.0%, 91.0%)          0  (0.0%, 99.0%)       0  (0.0%, 94.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/rand.c:rand

<  11,535,392  (2.4%, 97.6%)   1  (0.0%,  4.2%)   1  (0.0%,  4.3%)  3,146,016  (1.7%, 97.3%)      0  (0.0%, 77.3%)     0  (0.0%,  0.0%)  2,621,680  (5.0%, 99.3%)      1  (0.0%, 88.4%)      0  (0.0%, 91.0%)          0  (0.0%, 99.0%)       0  (0.0%, 94.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp:m_inedx(int, int, int, int)

<   8,521,027  (1.8%, 99.4%) 660 (22.3%, 26.5%) 630 (22.2%, 26.5%)  4,228,567  (2.3%, 99.6%)    639  (0.8%, 78.2%)    26  (0.3%,  0.3%)     16,866  (0.0%, 99.3%)    171  (0.2%, 88.7%)    121  (0.2%, 91.1%)      9,324  (0.0%, 99.0%)     463  (0.2%, 94.7%) 4,209,049 (99.9%, 99.9%) 259 (20.0%, 20.0%)  ???:
    8,420,013  (1.7%)        297 (10.0%)        270  (9.5%)         4,209,699  (2.3%)           504  (0.7%)           10  (0.1%)               614  (0.0%)            22  (0.0%)            13  (0.0%)               173  (0.0%)             51  (0.0%)        4,209,028 (99.9%)        248 (19.2%)           ???

<     813,655  (0.2%, 99.5%)  56  (1.9%, 28.4%)  53  (1.9%, 28.4%)    272,760  (0.1%, 99.7%)  4,810  (6.4%, 84.5%) 1,169 (15.0%, 15.4%)    125,949  (0.2%, 99.6%)    106  (0.1%, 88.8%)     45  (0.1%, 91.2%)    109,445  (0.2%, 99.2%)   6,722  (2.3%, 96.9%)       166  (0.0%, 99.9%)   3  (0.2%, 20.2%)  ./elf/./elf/dl-lookup.c:
      509,919  (0.1%)         37  (1.2%)         36  (1.3%)           181,303  (0.1%)         4,228  (5.6%)          886 (11.4%)            69,435  (0.1%)            71  (0.1%)            38  (0.1%)            74,410  (0.2%)          5,906  (2.0%)              166  (0.0%)          3  (0.2%)           do_lookup_x

<     786,638  (0.2%, 99.7%) 113  (3.8%, 32.2%) 113  (4.0%, 32.3%)    161,138  (0.1%, 99.8%)    613  (0.8%, 85.3%)     3  (0.0%, 15.4%)     78,836  (0.2%, 99.7%)  4,333  (6.1%, 94.9%)  4,248  (6.1%, 97.3%)    121,154  (0.3%, 99.5%)     447  (0.2%, 97.1%)         0  (0.0%, 99.9%)   0  (0.0%, 20.2%)  ./malloc/./malloc/malloc.c:
      550,626  (0.1%)         50  (1.7%)         50  (1.8%)            93,462  (0.1%)           254  (0.3%)            1  (0.0%)            55,111  (0.1%)         4,227  (5.9%)         4,181  (6.0%)            76,446  (0.2%)            205  (0.1%)                0                  0                   _int_malloc

<     497,428  (0.1%, 99.8%)   2  (0.1%, 32.3%)   2  (0.1%, 32.4%)     82,582  (0.0%, 99.9%)  1,991  (2.6%, 88.0%) 1,694 (21.7%, 37.1%)          0  (0.0%, 99.7%)      0  (0.0%, 94.9%)      0  (0.0%, 97.3%)     82,582  (0.2%, 99.7%)   1,977  (0.7%, 97.8%)         0  (0.0%, 99.9%)   0  (0.0%, 20.2%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir________________________ I1mr______________ ILmr_____________ Dr_______________________ D1mr________________ DLmr________________ Dw_______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  function:file

> 117,319,532 (24.2%, 24.2%)   3  (0.1%,  0.1%)   3 (0.1%,  0.1%) 33,558,528 (18.2%, 18.2%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 16,779,264 (32.1%, 32.1%)      0  (0.0%,  0.0%)      0  (0.0%,  0.0%) 20,838,764 (44.3%, 44.3%) 270,638 (90.9%, 90.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random_r:./stdlib/./stdlib/random_r.c

>  96,480,768 (19.9%, 44.1%)   3  (0.1%,  0.2%)   3 (0.1%,  0.2%) 37,753,344 (20.5%, 38.7%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 12,584,448 (24.1%, 56.1%)      0  (0.0%,  0.0%)      0  (0.0%,  0.0%) 16,779,264 (35.7%, 80.0%)       0  (0.0%, 90.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random:./stdlib/./stdlib/random.c

>  92,387,594 (19.1%, 63.1%)  20  (0.7%,  0.9%)  19 (0.7%,  0.9%) 35,692,408 (19.4%, 58.0%)    15  (0.0%,  0.0%)     0  (0.0%,  0.0%)  8,402,347 (16.1%, 72.2%) 63,023 (88.1%, 88.1%) 62,992 (91.0%, 91.0%)  4,203,356  (8.9%, 88.9%)   4,188  (1.4%, 92.3%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  cache_grind_prf():/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp

>  51,383,891 (10.6%, 73.7%)   7  (0.2%,  1.1%)   7 (0.2%,  1.1%) 20,973,083 (11.4%, 69.4%) 8,653 (11.5%, 11.5%)     0  (0.0%,  0.0%)    786,957  (1.5%, 73.7%)      0  (0.0%, 88.1%)      0  (0.0%, 91.0%)  1,049,609  (2.2%, 91.1%)     554  (0.2%, 92.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  sslow_mvm(unsigned char****, signed char*, int**, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  33,820,273  (7.0%, 80.7%)   9  (0.3%,  1.4%)   9 (0.3%,  1.4%) 14,681,640  (8.0%, 77.4%) 8,262 (10.9%, 22.4%)     0  (0.0%,  0.0%)  1,311,250  (2.5%, 76.2%)      0  (0.0%, 88.1%)      0  (0.0%, 91.0%)  1,049,609  (2.2%, 93.4%)     555  (0.2%, 92.7%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm(unsigned char*, signed char*, int**, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  25,168,896  (5.2%, 85.9%)   1  (0.0%,  1.5%)   1 (0.0%,  1.5%)  8,389,632  (4.5%, 81.9%)     0  (0.0%, 22.4%)     0  (0.0%,  0.0%)  8,389,632 (16.0%, 92.2%)      0  (0.0%, 88.1%)      0  (0.0%, 91.0%)          0  (0.0%, 93.4%)       0  (0.0%, 92.7%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  rand:./stdlib/./stdlib/rand.c

>  11,552,213  (2.4%, 88.3%)   7  (0.2%,  1.7%)   7 (0.2%,  1.7%)  6,297,776  (3.4%, 85.3%) 8,345 (11.0%, 33.5%)     0  (0.0%,  0.0%)  1,050,674  (2.0%, 94.2%)      8  (0.0%, 88.1%)      0  (0.0%, 91.0%)    526,361  (1.1%, 94.5%)   1,059  (0.4%, 93.1%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm_3(unsigned char*, signed char*, int**, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  11,535,392  (2.4%, 90.7%)   1  (0.0%,  1.7%)   1 (0.0%,  1.8%)  3,146,016  (1.7%, 87.0%)     0  (0.0%, 33.5%)     0  (0.0%,  0.0%)  2,621,680  (5.0%, 99.3%)      1  (0.0%, 88.1%)      0  (0.0%, 91.0%)          0  (0.0%, 94.5%)       0  (0.0%, 93.1%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  m_inedx(int, int, int, int):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp

>   8,420,013  (1.7%, 92.4%) 297 (10.0%, 11.7%) 270 (9.5%, 11.3%)  4,209,699  (2.3%, 89.3%)   504  (0.7%, 34.1%)    10  (0.1%,  0.1%)        614  (0.0%, 99.3%)     22  (0.0%, 88.2%)     13  (0.0%, 91.0%)        173  (0.0%, 94.5%)      51  (0.0%, 93.1%) 4,209,028 (99.9%, 99.9%) 248 (19.2%, 19.2%)  ???:???

>   8,419,725  (1.7%, 94.1%)   7  (0.2%, 12.0%)   7 (0.2%, 11.5%)  4,730,004  (2.6%, 91.9%) 8,342 (11.0%, 45.2%)     0  (0.0%,  0.1%)      3,126  (0.0%, 99.3%)      7  (0.0%, 88.2%)      0  (0.0%, 91.0%)    526,361  (1.1%, 95.6%)   1,074  (0.4%, 93.4%)         0  (0.0%, 99.9%)   0  (0.0%, 19.2%)  new_mvm_4(unsigned char*, signed char*, int**, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>   8,419,688  (1.7%, 95.9%)   6  (0.2%, 12.2%)   6 (0.2%, 11.7%)  4,729,980  (2.6%, 94.4%) 8,346 (11.0%, 56.2%)     0  (0.0%,  0.1%)      3,140  (0.0%, 99.3%)      4  (0.0%, 88.2%)      0  (0.0%, 91.0%)    526,356  (1.1%, 96.7%)   1,056  (0.4%, 93.8%)         0  (0.0%, 99.9%)   0  (0.0%, 19.2%)  multi_thread_sector(int, unsigned char*, signed char*, int**, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>   8,415,536  (1.7%, 97.6%)   5  (0.2%, 12.4%)   5 (0.2%, 11.9%)  4,730,960  (2.6%, 97.0%) 8,352 (11.1%, 67.3%)     0  (0.0%,  0.1%)      5,248  (0.0%, 99.3%)      0  (0.0%, 88.2%)      0  (0.0%, 91.0%)    527,376  (1.1%, 97.8%)   1,063  (0.4%, 94.2%)         0  (0.0%, 99.9%)   0  (0.0%, 19.2%)  multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int, int):
    8,411,440  (1.7%)          5  (0.2%)          5 (0.2%)         4,726,864  (2.6%)        8,215 (10.9%)            0                     5,248  (0.0%)             0                     0                   526,352  (1.1%)          1,063  (0.4%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>   8,414,328  (1.7%, 99.3%)   2  (0.1%, 12.4%)   2 (0.1%, 12.0%)  4,729,880  (2.6%, 99.6%) 8,332 (11.0%, 78.3%)     0  (0.0%,  0.1%)      5,168  (0.0%, 99.3%)      8  (0.0%, 88.2%)      0  (0.0%, 91.0%)    527,368  (1.1%, 99.0%)   1,056  (0.4%, 94.5%)         0  (0.0%, 99.9%)   0  (0.0%, 19.2%)  multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*):
    8,410,232  (1.7%)          2  (0.1%)          2 (0.1%)         4,725,784  (2.6%)        8,202 (10.9%)            0                     5,168  (0.0%)             8  (0.0%)             0                   526,344  (1.1%)          1,056  (0.4%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>     686,090  (0.1%, 99.5%)  15  (0.5%, 12.9%)  13 (0.5%, 12.4%)    136,983  (0.1%, 99.6%) 2,016  (2.7%, 81.0%) 1,695 (21.8%, 21.9%)     42,813  (0.1%, 99.4%)     19  (0.0%, 88.2%)      3  (0.0%, 91.0%)    103,933  (0.2%, 99.2%)   2,693  (0.9%, 95.4%)         0  (0.0%, 99.9%)   0  (0.0%, 19.2%)  _dl_lookup_symbol_x:
      497,428  (0.1%)          2  (0.1%)          2 (0.1%)            82,582  (0.0%)        1,991  (2.6%)        1,694 (21.7%)                 0                     0                     0                    82,582  (0.2%)          1,977  (0.7%)                0                  0                   ./elf/../sysdeps/generic/dl-new-hash.h

>     550,626  (0.1%, 99.6%)  50  (1.7%, 14.6%)  50 (1.8%, 14.2%)     93,462  (0.1%, 99.7%)   254  (0.3%, 81.3%)     1  (0.0%, 21.9%)     55,111  (0.1%, 99.5%)  4,227  (5.9%, 94.1%)  4,181  (6.0%, 97.0%)     76,446  (0.2%, 99.4%)     205  (0.1%, 95.5%)         0  (0.0%, 99.9%)   0  (0.0%, 19.2%)  _int_malloc:./malloc/./malloc/malloc.c

>     527,302  (0.1%, 99.7%)  37  (1.2%, 15.9%)  36 (1.3%, 15.4%)    183,236  (0.1%, 99.8%) 4,228  (5.6%, 86.9%)   886 (11.4%, 33.3%)     69,441  (0.1%, 99.6%)     71  (0.1%, 94.2%)     38  (0.1%, 97.1%)     76,340  (0.2%, 99.5%)   5,906  (2.0%, 97.5%)       169  (0.0%, 99.9%)   5  (0.4%, 19.6%)  do_lookup_x:
      509,919  (0.1%)         37  (1.2%)         36 (1.3%)           181,303  (0.1%)        4,228  (5.6%)          886 (11.4%)            69,435  (0.1%)            71  (0.1%)            38  (0.1%)            74,410  (0.2%)          5,906  (2.0%)              166  (0.0%)          3  (0.2%)           ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/rand.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/rand.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp
--------------------------------------------------------------------------------
Ir_______________ I1mr____ ILmr____ Dr______________ D1mr_________ DLmr Dw____________ D1mw_____ DLmw Bc____________ Bcm_________ Bi Bim 

         .        .        .                .            .            .       .         .           .       .            .         .   .  #include "bttd.hpp"
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         9 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       6 (0.0%)  0           0       0            0         0   0  void sslow_mvm(pcm_size_t****matrix,input_size_t*vector,int**layers,int*sectors,int64_t*result){
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result,0,512*8);
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx=0;
        41 (0.0%) 0        0               15 (0.0%)     0            0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while(sectors[s_idx]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .          
     1,552 (0.0%) 1 (0.0%) 1 (0.0%)     1,028 (0.0%)     0            0       4 (0.0%)  0           0     516 (0.0%)     9 (0.0%)  0   0          for(int y=0;y<tile_size;++y){
   788,480 (0.2%) 1 (0.0%) 1 (0.0%)   524,800 (0.3%)     0            0     512 (0.0%)  0           0 262,656 (0.6%)   522 (0.2%)  0   0              for(int x=0;x<max_x;++x){
   262,144 (0.1%) 0        0                0            0            0 262,144 (0.5%)  0           0       0            0         0   0                  int l=0;
   262,144 (0.1%) 0        0                0            0            0 262,144 (0.5%)  0           0       0            0         0   0                  uint64_t wheight=0;
14,417,920 (3.0%) 1 (0.0%) 1 (0.0%) 5,505,024 (3.0%)     3  (0.0%)    0       0         0           0 786,432 (1.7%)    19 (0.0%)  0   0                  while(layers[sectors[s_idx]][l]!=-1){
22,020,096 (4.5%) 1 (0.0%) 1 (0.0%) 9,437,184 (5.1%) 8,589 (11.4%)    0       0         0           0       0            0         0   0                      wheight+=matrix[sectors[s_idx]][layers[sectors[s_idx]][l]][y][x];
   524,288 (0.1%) 0        0          524,288 (0.3%)     0            0       0         0           0       0            0         0   0                      l++;
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
13,107,200 (2.7%) 2 (0.1%) 2 (0.1%) 4,980,736 (2.7%)    60  (0.1%)    0 262,144 (0.5%)  0           0       0            0         0   0                  result[sectors[sectors[s_idx]]*128+y]+=wheight*vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .      
         4 (0.0%) 0        0                2 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  //sector{1,2,3,4}-1;
        10 (0.0%) 2 (0.1%) 2 (0.1%)         0            0            0       7 (0.0%)  0           0       0            0         0   0  void new_mvm(pcm_size_t*matrix,input_size_t*vector, int* *layers,int*sectors,int64_t*result ){
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result,0,512*8);
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx=0;
        41 (0.0%) 2 (0.1%) 2 (0.1%)        15 (0.0%)     1  (0.0%)    0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while(sectors[s_idx]!=-1){
        28 (0.0%) 0        0               12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s=sectors[s_idx];
     1,552 (0.0%) 0        0            1,028 (0.0%)     0            0       4 (0.0%)  0           0     516 (0.0%)     8 (0.0%)  0   0          for(int y=0;y<tile_size;++y){
   788,480 (0.2%) 0        0          524,800 (0.3%)     0            0     512 (0.0%)  0           0 262,656 (0.6%)   523 (0.2%)  0   0              for(int x=0;x<max_x;++x){
   262,144 (0.1%) 0        0                0            0            0 262,144 (0.5%)  0           0       0            0         0   0                  int l=0;
   262,144 (0.1%) 1 (0.0%) 1 (0.0%)         0            0            0 262,144 (0.5%)  0           0       0            0         0   0                  uint64_t wheight=0;
10,485,760 (2.2%) 1 (0.0%) 1 (0.0%) 3,932,160 (2.1%)     3  (0.0%)    0       0         0           0 786,432 (1.7%)    20 (0.0%)  0   0                  while(layers[s][l]!=-1){
11,010,048 (2.3%) 0        0        5,767,168 (3.1%) 8,197 (10.9%)    0 524,288 (1.0%)  0           0       0            0         0   0                      wheight+=matrix[m_inedx(s,layers[s][l],y,x)];
   524,288 (0.1%) 0        0          524,288 (0.3%)     0            0       0         0           0       0            0         0   0                      ++l;
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
10,485,760 (2.2%) 2 (0.1%) 2 (0.1%) 3,932,160 (2.1%)    60  (0.1%)    0 262,144 (0.5%)  0           0       0            0         0   0                  result[sectors[s]*128+y]+=wheight*vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         5 (0.0%) 0        0                3 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  void new_mvm_2(pcm_size_t*matrix,input_size_t*vector, int** layers,int*sectors,int64_t*result ){
         .        .        .                .            .            .       .         .           .       .            .         .   .      ++computations;
         .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result,0,512*8);
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .      while(sectors[s_idx]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
-- line 58 ----------------------------------------
-- line 68 ----------------------------------------
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         .        .        .                .            .            .       .         .           .       .            .         .   .          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        10 (0.0%) 2 (0.1%) 2 (0.1%)         0            0            0       7 (0.0%)  0           0       0            0         0   0  void new_mvm_3(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  1 (0.0%)    0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 2 (0.1%) 2 (0.1%)        15 (0.0%)     4  (0.0%)    0       0         0           0       5 (0.0%)     3 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 0        0               12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s = sectors[s_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
       160 (0.0%) 0        0               60 (0.0%)    19  (0.0%)    0       0         0           0      12 (0.0%)     7 (0.0%)  0   0          while (layers[s][l_idx] != -1) {
        96 (0.0%) 1 (0.0%) 1 (0.0%)        40 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = layers[s][l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        72 (0.0%) 0        0               24 (0.0%)     0            0      16 (0.0%)  7 (0.0%)    0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 1 (0.0%) 1 (0.0%)     2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    12 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
    10,240 (0.0%) 1 (0.0%) 1 (0.0%)     3,072 (0.0%)     0            0   1,024 (0.0%)  0           0       0            0         0   0                  int64_t* result_row_ptr = &result[s * 128 + y];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.3%) 0        0        1,049,600 (0.6%)     0            0   1,024 (0.0%)  0           0 525,312 (1.1%) 1,037 (0.3%)  0   0                  for (int x = 0; x < max_x; ++x) {
 2,097,152 (0.4%) 0        0        1,048,576 (0.6%) 8,197 (10.9%)    0 524,288 (1.0%)  0           0       0            0         0   0                      uint64_t wheight = *matrix_base; 
 7,340,032 (1.5%) 0        0        3,670,016 (2.0%)   124  (0.2%)    0 524,288 (1.0%)  0           0       0            0         0   0                      *result_row_ptr += wheight * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
   524,288 (0.1%) 0        0          524,288 (0.3%)     0            0       0         0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         5 (0.0%) 0        0                3 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        10 (0.0%) 2 (0.1%) 2 (0.1%)         0            0            0       7 (0.0%)  0           0       0            0         0   0  void new_mvm_4(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 0        0               15 (0.0%)     5  (0.0%)    0       0         0           0       5 (0.0%)     3 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s = sectors[s_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
        28 (0.0%) 0        0               12 (0.0%)     4  (0.0%)    0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       100 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)    11  (0.0%)    0       0         0           0      12 (0.0%)     7 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        56 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = curr_layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        72 (0.0%) 0        0               24 (0.0%)     0            0      16 (0.0%)  7 (0.0%)    0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    14 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
     1,024 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0   1,024 (0.0%)  0           0       0            0         0   0                  int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.3%) 1 (0.0%) 1 (0.0%) 1,049,600 (0.6%)     0            0   1,024 (0.0%)  0           0 525,312 (1.1%) 1,050 (0.4%)  0   0                  for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
 6,291,456 (1.3%) 0        0        3,145,728 (1.7%) 8,197 (10.9%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
   524,288 (0.1%) 0        0          524,288 (0.3%)     0            0       0         0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
    22,528 (0.0%) 0        0            8,192 (0.0%)   124  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         5 (0.0%) 0        0                3 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        40 (0.0%) 2 (0.1%) 2 (0.1%)         0            0            0      28 (0.0%)  0           0       0            0         0   0  void multi_thread_sector(int s, pcm_size_t* matrix, input_size_t* vector,  int** layers, int64_t* result) {
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
        28 (0.0%) 0        0               12 (0.0%)     3  (0.0%)    0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       100 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)    12  (0.0%)    0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        56 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = curr_layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        72 (0.0%) 0        0               24 (0.0%)     0            0      16 (0.0%)  4 (0.0%)    0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    14 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
     1,024 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0   1,024 (0.0%)  0           0       0            0         0   0                  int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.3%) 1 (0.0%) 1 (0.0%) 1,049,600 (0.6%)     0            0   1,024 (0.0%)  0           0 525,312 (1.1%) 1,036 (0.3%)  0   0                  for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
 6,291,456 (1.3%) 0        0        3,145,728 (1.7%) 8,202 (10.9%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
   524,288 (0.1%) 0        0          524,288 (0.3%)     0            0       0         0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
    22,528 (0.0%) 0        0            8,192 (0.0%)   129  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
        20 (0.0%) 0        0               12 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        13 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0  void new_mvm_mtd_4(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
         3 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         3 (0.0%) 0        0                0            0            0       2 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 2 (0.1%) 2 (0.1%)        15 (0.0%)     2  (0.0%)    0       0         0           0       5 (0.0%)     1 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        80 (0.0%) 1 (0.0%) 1 (0.0%)         8 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0          std::thread t(multi_thread_sector, sectors[s_idx], matrix, vector, layers, result);
        32 (0.0%) 0        0                0            0            0       8 (0.0%)  0           0       0            0         0   0          threads.push_back(move(t));
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
        12 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        51 (0.0%) 1 (0.0%) 1 (0.0%)         9 (0.0%)     2  (0.0%)    0       6 (0.0%)  0           0       5 (0.0%)     2 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
        32 (0.0%) 0        0                4 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0          threads[i].join();
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         9 (0.0%) 0        0                5 (0.0%)     0            0       1 (0.0%)  0           0       1 (0.0%)     1 (0.0%)  0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        56 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0      40 (0.0%)  8 (0.0%)    0       0            0         0   0  void multi_thread_layer( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result) {
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    12 (0.0%)  0   0      for (int y = 0; y < tile_size; ++y) {
     1,024 (0.0%) 0        0                0            0            0   1,024 (0.0%)  0           0       0            0         0   0          int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.3%) 1 (0.0%) 1 (0.0%) 1,049,600 (0.6%)     0            0   1,024 (0.0%)  0           0 525,312 (1.1%) 1,044 (0.4%)  0   0          for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .              
 6,291,456 (1.3%) 0        0        3,145,728 (1.7%) 8,202 (10.9%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              
   524,288 (0.1%) 0        0          524,288 (0.3%)     0            0       0         0           0       0            0         0   0              matrix++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
    13,312 (0.0%) 0        0            4,096 (0.0%)     0            0   3,072 (0.0%)  0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .          
        32 (0.0%) 0        0               16 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        15 (0.0%) 3 (0.1%) 3 (0.1%)         2 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0  void new_mvm_mtd_8(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         3 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       2 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
       517 (0.0%) 0        0                0            0            0     512 (0.0%)  0           0     512 (0.0%)    10 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
     5,636 (0.0%) 1 (0.0%) 1 (0.0%)     1,537 (0.0%)     0            0     513 (0.0%)  0           0     513 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 2 (0.1%) 2 (0.1%)        15 (0.0%)     1  (0.0%)    0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s=sectors[s_idx];
        28 (0.0%) 0        0               12 (0.0%)     1  (0.0%)    0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       100 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     2  (0.0%)    0       0         0           0      12 (0.0%)     7 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        56 (0.0%) 0        0               24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = curr_layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       152 (0.0%) 2 (0.1%) 2 (0.1%)        24 (0.0%)     0            0      24 (0.0%)  0           0       0            0         0   0              std::thread t(multi_thread_layer, &matrix[m_inedx(s, l, 0, 0)],s, vector, temp_result);
        64 (0.0%) 0        0                0            0            0      16 (0.0%)  0           0       0            0         0   0              threads.push_back(move(t));
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
        24 (0.0%) 0        0                0            0            0       8 (0.0%)  0           0       0            0         0   0          }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        91 (0.0%) 1 (0.0%) 1 (0.0%)        17 (0.0%)     1  (0.0%)    0      10 (0.0%)  0           0       9 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
        64 (0.0%) 0        0                8 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0          threads[i].join();
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     1,540 (0.0%) 1 (0.0%) 1 (0.0%)     1,025 (0.0%)     0            0       1 (0.0%)  0           0     513 (0.0%)     2 (0.0%)  0   0      for(int i=0;i<512;++i){
     6,656 (0.0%) 1 (0.0%) 1 (0.0%)     1,536 (0.0%)     0            0   1,536 (0.0%) 65 (0.1%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         9 (0.0%) 1 (0.0%) 1 (0.0%)         5 (0.0%)     0            0       1 (0.0%)  0           0       1 (0.0%)     1 (0.0%)  0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        15 (0.0%) 3 (0.1%) 3 (0.1%)         2 (0.0%)     1  (0.0%)    0       8 (0.0%)  2 (0.0%)    0       0            0         0   0  void new_mvm_mtd_16(pcm_size_t* matrix, input_size_t* vector,  int** layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         3 (0.0%) 0        0                0            0            0       2 (0.0%)  1 (0.0%)    0       0            0         0   0      std::vector<std::thread> threads;
         1 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       1 (0.0%)  0           0       0            0         0   0      int thread_count = 2;
       517 (0.0%) 0        0                0            0            0     512 (0.0%) 60 (0.1%)    0     512 (0.0%)     9 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
     5,636 (0.0%) 1 (0.0%) 1 (0.0%)     1,537 (0.0%)     0            0     513 (0.0%)  0           0     513 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .      
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 2 (0.1%) 2 (0.1%)        15 (0.0%)     0            0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s=sectors[s_idx];
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       100 (0.0%) 0        0               36 (0.0%)     0            0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        56 (0.0%) 0        0               24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = curr_layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       104 (0.0%) 1 (0.0%) 1 (0.0%)        64 (0.0%)     0            0       8 (0.0%)  0           0      24 (0.0%)    11 (0.0%)  0   0              for(int i=0;i<thread_count;++i){
        80 (0.0%) 1 (0.0%) 1 (0.0%)        32 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0                  int y_start = i * (tile_size / thread_count);
       112 (0.0%) 0        0               32 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0                  int end = (i + 1) * (tile_size / thread_count); 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  
       448 (0.0%) 2 (0.1%) 2 (0.1%)        64 (0.0%)     0            0      80 (0.0%)  0           0       0            0         0   0                  std::thread t(multi_thread_layer_2, &matrix[m_inedx(s, l, 0, 0)+y_start*max_x],s, vector, temp_result,y_start,end);
       128 (0.0%) 0        0                0            0            0      32 (0.0%)  0           0       0            0         0   0                  threads.push_back(move(t));
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        48 (0.0%) 0        0                0            0            0      16 (0.0%)  0           0       0            0         0   0              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
       171 (0.0%) 1 (0.0%) 1 (0.0%)        33 (0.0%)     1  (0.0%)    0      18 (0.0%)  0           0      17 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
       128 (0.0%) 0        0               16 (0.0%)     0            0      32 (0.0%)  0           0       0            0         0   0          threads[i].join();
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
     1,540 (0.0%) 3 (0.1%) 3 (0.1%)     1,025 (0.0%)     0            0       1 (0.0%)  0           0     513 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<512;++i){
     6,656 (0.0%) 1 (0.0%) 1 (0.0%)     1,536 (0.0%)     0            0   1,536 (0.0%) 65 (0.1%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         9 (0.0%) 0        0                5 (0.0%)     0            0       1 (0.0%)  0           0       1 (0.0%)     0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       144 (0.0%) 2 (0.1%) 2 (0.1%)         0            0            0     112 (0.0%)  0           0       0            0         0   0  void multi_thread_layer_2( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result,int y_start,int end) {
     4,192 (0.0%) 1 (0.0%) 1 (0.0%)     3,120 (0.0%)     0            0      16 (0.0%)  0           0   1,040 (0.0%)    20 (0.0%)  0   0      for (int y = y_start; y < end; ++y) {
     1,024 (0.0%) 0        0                0            0            0   1,024 (0.0%)  0           0       0            0         0   0          int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.3%) 1 (0.0%) 1 (0.0%) 1,049,600 (0.6%)     0            0   1,024 (0.0%)  0           0 525,312 (1.1%) 1,043 (0.4%)  0   0          for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .              
 6,291,456 (1.3%) 0        0        3,145,728 (1.7%) 8,215 (10.9%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              
   524,288 (0.1%) 0        0          524,288 (0.3%)     0            0       0         0           0       0            0         0   0              matrix++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
    13,312 (0.0%) 0        0            4,096 (0.0%)     0            0   3,072 (0.0%)  0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .          
        64 (0.0%) 1 (0.0%) 1 (0.0%)        32 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  void acc_test(pcm_size_t*matrix, int* layers,int*sectors){
         .        .        .                .            .            .       .         .           .       .            .         .   .      int s=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .      while(sectors[s]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .          int l=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .          while(layers[l]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .              for(int y=0;y<tile_size;++y){
-- line 291 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp
--------------------------------------------------------------------------------
Ir______________ I1mr____ ILmr____ Dr______________ D1mr DLmr Dw______________ D1mw____ DLmw Bc Bcm Bi Bim 

-- line 2 ----------------------------------------
        .        .        .                .           .    .         .        .           .  .   .  .   .  #define BTTD_H
        .        .        .                .           .    .         .        .           .  .   .  .   .  //Back To The Drawingboard
        .        .        .                .           .    .         .        .           .  .   .  .   .  #include "matrix_multisec.hpp"
        .        .        .                .           .    .         .        .           .  .   .  .   .  #include <atomic> 
        .        .        .                .           .    .         .        .           .  .   .  .   .  extern unsigned int computations; 
        .        .        .                .           .    .         .        .           .  .   .  .   .  
        .        .        .                .           .    .         .        .           .  .   .  .   .  #define PREFETCH_DISTANCE 32
        .        .        .                .           .    .         .        .           .  .   .  .   .  
3,670,352 (0.8%) 0        0                0           0    0 2,621,680 (5.0%) 1 (0.0%)    0  0   0  0   0  inline long long m_inedx(int s,int l,int y,int x){
6,816,368 (1.4%) 1 (0.0%) 1 (0.0%) 2,097,344 (1.1%)    0    0         0        0           0  0   0  0   0      return (((s*8+l)*128+y)*512)+x;
1,048,672 (0.2%) 0        0        1,048,672 (0.6%)    0    0         0        0           0  0   0  0   0  }
        .        .        .                .           .    .         .        .           .  .   .  .   .  
        .        .        .                .           .    .         .        .           .  .   .  .   .  inline long long m_inedx_2(int s,int l,int y,int x){
        .        .        .                .           .    .         .        .           .  .   .  .   .      return (((s*128+y)*512+x)*8)+l;
        .        .        .                .           .    .         .        .           .  .   .  .   .  }
        .        .        .                .           .    .         .        .           .  .   .  .   .  
        .        .        .                .           .    .         .        .           .  .   .  .   .  /**
        .        .        .                .           .    .         .        .           .  .   .  .   .   * |L0(0),L1(0),L2(0),.......
        .        .        .                .           .    .         .        .           .  .   .  .   .   */
-- line 20 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp
--------------------------------------------------------------------------------
Ir________________ I1mr____ ILmr____ Dr________________ D1mr____ DLmr Dw______________ D1mw__________ DLmw__________ Bc______________ Bcm_________ Bi Bim 

-- line 65 ----------------------------------------
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  double cpuSecond() {
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    struct timespec ts;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    timespec_get(&ts, TIME_UTC);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    return ((double)ts.tv_sec + (double)ts.tv_nsec * 1.e-9);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
        21  (0.0%) 2 (0.1%) 2 (0.1%)          0         0           0         4 (0.0%)      0              0                 0            0         0   0  Logger logger("logs.txt");
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <iostream>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <vector>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <random>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <numeric>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <cstdint>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  // Function to generate a vector of random int8_t numbers with a sum in the range [-128, 127]
-- line 81 ----------------------------------------
-- line 128 ----------------------------------------
         .         .        .                 .         .           .         .             .              .                 .            .         .   .              }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .          }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      return numbers;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         9  (0.0%) 1 (0.0%) 1 (0.0%)          1  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0  int main(int args,char ** argv){
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         1  (0.0%) 1 (0.0%) 1 (0.0%)          0         0           0         1 (0.0%)      0              0                 0            0         0   0    cache_grind_prf();
         2  (0.0%) 1 (0.0%) 0                 0         0           0         1 (0.0%)      0              0                 0            0         0   0    exit(0);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // benchmark_mvm_algorithms();
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // exit(0);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // scattered_matrix();
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // new_mvm_test();
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // exit(0); 
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    uint64_t size;
-- line 147 ----------------------------------------
-- line 300 ----------------------------------------
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    delete[] f;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    delete[] result;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    delete[] sector;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    delete[] layer;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    return 0;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         8  (0.0%) 0        0                 1  (0.0%) 0           0         3 (0.0%)      0              0                 0            0         0   0  void cache_grind_prf(){
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    uint64_t size;
         3  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    input_size_t * vector = new input_size_t[max_vect];
         9  (0.0%) 1 (0.0%) 1 (0.0%)          1  (0.0%) 0           0         2 (0.0%)      0              0                 0            0         0   0    std::cout<<"befre alloc: " << std::endl;
         4  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    pcm_size_t * f = flat(&size); 
         3  (0.0%) 1 (0.0%) 1 (0.0%)          0         0           0         2 (0.0%)      0              0                 0            0         0   0    int64_t * result = new int64_t[max_vect];
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         4  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    srand(time(nullptr));
         1  (0.0%) 0        0                 0         0           0         1 (0.0%)      0              0                 0            0         0   0    int range = INT8_MAX - INT8_MIN + 1;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         3  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    pcm_size_t **** matrix = new pcm_size_t***[n_sectors];
        16  (0.0%) 1 (0.0%) 1 (0.0%)          9  (0.0%) 0           0         1 (0.0%)      0              0                 5 (0.0%)     4 (0.0%)  0   0    for(int s=0;s<n_sectors;++s){
        32  (0.0%) 1 (0.0%) 1 (0.0%)          8  (0.0%) 0           0         8 (0.0%)      0              0                 0            0         0   0      matrix[s]=new pcm_size_t**[8];
       112  (0.0%) 0        0                68  (0.0%) 0           0         4 (0.0%)      0              0                36 (0.0%)    10 (0.0%)  0   0      for(int l=0;l<8;++l){
       416  (0.0%) 1 (0.0%) 1 (0.0%)        128  (0.0%) 0           0        64 (0.0%)      4  (0.0%)      1  (0.0%)         0            0         0   0        matrix[s][l]=new pcm_size_t*[tile_size];
    12,416  (0.0%) 0        0             8,224  (0.0%) 0           0        32 (0.0%)      0              0             4,128 (0.0%)    39 (0.0%)  0   0        for(int y=0;y<tile_size;++y){
    73,728  (0.0%) 1 (0.0%) 1 (0.0%)     24,576  (0.0%) 0           0     8,192 (0.0%)    512  (0.7%)    488  (0.7%)         0            0         0   0          matrix[s][l][y]=new pcm_size_t[max_x];
 6,307,840  (1.3%) 0        0         4,198,400  (2.3%) 0           0     4,096 (0.0%)      0              0         2,101,248 (4.5%) 4,105 (1.4%)  0   0          for(int x=0;x<max_x;++x){
54,525,952 (11.2%) 1 (0.0%) 1 (0.0%) 18,874,368 (10.2%) 0           0 4,194,304 (8.0%) 29,696 (41.5%) 29,696 (42.9%)         0            0         0   0            matrix[s][l][y][x]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .         .        .                 .         .           .         .             .              .                 .            .         .   .          }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .        }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    
     1,540  (0.0%) 1 (0.0%) 1 (0.0%)      1,025  (0.0%) 0           0         1 (0.0%)      0              0               513 (0.0%)     7 (0.0%)  0   0    for(int i=0;i<512;i++){
     5,632  (0.0%) 0        0             1,536  (0.0%) 0           0     1,024 (0.0%)      9  (0.0%)      7  (0.0%)         0            0         0   0      vector[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
       772  (0.0%) 1 (0.0%) 1 (0.0%)        513  (0.0%) 0           0         1 (0.0%)      0              0               257 (0.0%)    10 (0.0%)  0   0    for(int i=0;i<256;i++){
     1,536  (0.0%) 0        0               512  (0.0%) 0           0       256 (0.0%)     33  (0.0%)     32  (0.0%)         0            0         0   0      result[i]=0;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
10,485,766  (2.2%) 1 (0.0%) 1 (0.0%)  6,291,458  (3.4%) 0           0         1 (0.0%)      0              0         2,097,153 (4.5%)     4 (0.0%)  0   0    for(long long i=0;i<size;++i){
20,971,520  (4.3%) 0        0         6,291,456  (3.4%) 0           0 4,194,304 (8.0%) 32,769 (45.8%) 32,768 (47.3%)         0            0         0   0      f[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      ///std::cout<<static_cast<int32_t>(f[i]);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         3  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    int* sector = new int[4+1];
         3  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    int**layer =new int*[n_sectors+1];
        16  (0.0%) 1 (0.0%) 1 (0.0%)          9  (0.0%) 0           0         1 (0.0%)      0              0                 5 (0.0%)     3 (0.0%)  0   0    for(int i=0;i<n_sectors;++i){
        32  (0.0%) 0        0                 8  (0.0%) 0           0         8 (0.0%)      0              0                 0            0         0   0      layer[i]=new int[8+1];
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
        16  (0.0%) 1 (0.0%) 1 (0.0%)          9  (0.0%) 0           0         1 (0.0%)      0              0                 5 (0.0%)     4 (0.0%)  0   0    for(int i=0;i<4;++i){
        28  (0.0%) 1 (0.0%) 1 (0.0%)         12  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0      sector[i]=i;
        28  (0.0%) 0        0                12  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0      layer[i][0]=0;
        32  (0.0%) 0        0                12  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0      layer[i][1]=7;
        32  (0.0%) 0        0                12  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0      layer[i][2]=-1;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
         3  (0.0%) 0        0                 1  (0.0%) 0           0         1 (0.0%)      0              0                 0            0         0   0    sector[4]=-1;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 0           0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_mtd_16(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 0                 5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_mtd_8(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_mtd_4(f,vector,layer,sector,result);
         8  (0.0%) 0        0                 5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_4(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_3(f,vector,layer,sector,result);
         8  (0.0%) 0        0                 5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    sslow_mvm(matrix,vector,layer,sector,result);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         5  (0.0%) 0        0                 2  (0.0%) 1 (0.0%)    0         1 (0.0%)      0              0                 1 (0.0%)     0         0   0    delete[] vector;
         5  (0.0%) 0        0                 2  (0.0%) 1 (0.0%)    0         1 (0.0%)      0              0                 1 (0.0%)     0         0   0    delete[] f;
         5  (0.0%) 1 (0.0%) 1 (0.0%)          2  (0.0%) 0           0         1 (0.0%)      0              0                 1 (0.0%)     0         0   0    delete[] result;
         5  (0.0%) 0        0                 2  (0.0%) 0           0         1 (0.0%)      0              0                 1 (0.0%)     0         0   0    delete[] sector;
         5  (0.0%) 0        0                 2  (0.0%) 0           0         1 (0.0%)      0              0                 1 (0.0%)     1 (0.0%)  0   0    delete[] layer;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         7  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 1 (0.0%)    0         0             0              0                 1 (0.0%)     1 (0.0%)  0   0  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  void scattered_matrix(){
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    uint64_t size;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    input_size_t * vector = new input_size_t[max_vect];
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    std::cout<<"befre alloc: " << std::endl;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    pcm_size_t * f = flat(&size); 
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    int64_t * result = new int64_t[max_vect];
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
-- line 384 ----------------------------------------
-- line 930 ----------------------------------------
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    fclose(mtd_32);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    fclose(mtd_64);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    fclose(mtd_128);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    fclose(mtd_512);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
        23  (0.0%) 3 (0.1%) 3 (0.1%)          8  (0.0%) 0           0         6 (0.0%)      0              0                 1 (0.0%)     1 (0.0%)  0   0  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_________________ I1mr_________ ILmr_________ Dr________________ D1mr__________ DLmr_________ Dw________________ D1mw__________ DLmw__________ Bc________________ Bcm____________ Bi_______________ Bim__________ 

234,371,713 (48.3%)   111  (3.7%)   109  (3.8%) 99,712,338 (54.1%) 58,394 (77.3%)     0         14,195,139 (27.1%) 63,244 (88.4%) 62,992 (91.0%)  8,937,522 (19.0%)  10,684  (3.6%)         0             0            annotated: files known & above threshold & readable, line numbers known
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0            annotated: files known & above threshold & readable, line numbers unknown
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0          unannotated: files known & above threshold & two or more non-identical
241,073,149 (49.7%)   185  (6.2%)   182  (6.4%) 80,219,855 (43.5%)  7,416  (9.8%) 2,867 (36.8%) 37,958,784 (72.6%)  4,442  (6.2%)  4,294  (6.2%) 37,932,176 (80.6%) 279,810 (94.0%)       166  (0.0%)     3  (0.2%)  unannotated: files known & above threshold & unreadable 
    936,408  (0.2%) 2,006 (67.7%) 1,922 (67.6%)    247,951  (0.1%)  9,083 (12.0%) 4,897 (62.9%)    142,443  (0.3%)  3,651  (5.1%)  1,842  (2.7%)    161,643  (0.3%)   6,666  (2.2%)     4,696  (0.1%) 1,032 (79.8%)  unannotated: files known & below threshold
  8,521,027  (1.8%)   660 (22.3%)   630 (22.2%)  4,228,567  (2.3%)    639  (0.8%)    26  (0.3%)     16,866  (0.0%)    171  (0.2%)    121  (0.2%)      9,324  (0.0%)     463  (0.2%) 4,209,049 (99.9%)   259 (20.0%)  unannotated: files unknown

