--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate --show-percs=yes cg.out
I1 cache:         65536 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         25165824 B, 64 B, 12-way associative
Command:          ./matrix_tests
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ I1mr__________ ILmr__________ Dr__________________ D1mr___________ DLmr__________ Dw_________________ D1mw___________ DLmw___________ Bc_________________ Bcm_____________ Bi________________ Bim___________ 

264,589,939 (100.0%) 2,921 (100.0%) 2,819 (100.0%) 107,123,168 (100.0%) 66,639 (100.0%) 7,789 (100.0%) 30,449,352 (100.0%) 37,073 (100.0%) 34,927 (100.0%) 24,954,239 (100.0%) 157,623 (100.0%) 2,104,380 (100.0%) 1,300 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr______________ ILmr______________ Dr_______________________ D1mr_________________ DLmr________________ Dw______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  file:function

< 76,706,450 (29.0%, 29.0%)  69  (2.4%,  2.4%)  69  (2.4%,  2.4%) 38,327,900 (35.8%, 35.8%) 49,680 (74.6%, 74.6%)     0  (0.0%,  0.0%) 2,384,065  (7.8%,  7.8%)    200  (0.5%,  0.5%)      0  (0.0%,  0.0%)  3,684,556 (14.8%, 14.8%)   5,972  (3.8%,  3.8%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp:
  31,460,949 (11.9%)          8  (0.3%)          8  (0.3%)        13,108,764 (12.2%)         8,258 (12.4%)            0                1,311,246  (4.3%)             0                     0                 1,049,609  (4.2%)            550  (0.3%)                0                  0                   new_mvm(unsigned char*, signed char*, int volatile*, int*, long*)
  11,552,137  (4.4%)          6  (0.2%)          6  (0.2%)         6,297,736  (5.9%)         8,330 (12.5%)            0                1,050,674  (3.5%)             0                     0                   526,361  (2.1%)          1,068  (0.7%)                0                  0                   new_mvm_3(unsigned char*, signed char*, int volatile*, int*, long*)
   8,419,721  (3.2%)          7  (0.2%)          7  (0.2%)         4,729,992  (4.4%)         8,330 (12.5%)            0                    3,122  (0.0%)             0                     0                   526,361  (2.1%)          1,075  (0.7%)                0                  0                   new_mvm_4(unsigned char*, signed char*, int volatile*, int*, long*)
   8,419,684  (3.2%)          5  (0.2%)          5  (0.2%)         4,729,968  (4.4%)         8,334 (12.5%)            0                    3,136  (0.0%)             0                     0                   526,356  (2.1%)          1,070  (0.7%)                0                  0                   multi_thread_sector(int, unsigned char*, signed char*, int volatile*, long*)
   8,412,464  (3.2%)          4  (0.1%)          4  (0.1%)         4,726,864  (4.4%)         8,212 (12.3%)            0                    5,232  (0.0%)             0                     0                   526,352  (2.1%)          1,078  (0.7%)                0                  0                   multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int)
   8,410,232  (3.2%)          2  (0.1%)          2  (0.1%)         4,725,784  (4.4%)         8,202 (12.3%)            0                    5,168  (0.0%)             8  (0.0%)             0                   526,344  (2.1%)          1,056  (0.7%)                0                  0                   multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*)

< 58,673,138 (22.2%, 51.2%)   8  (0.3%,  2.6%)   8  (0.3%,  2.7%) 16,783,177 (15.7%, 51.4%)      1  (0.0%, 74.6%)     0  (0.0%,  0.0%) 8,391,308 (27.6%, 35.4%)      3  (0.0%,  0.5%)      1  (0.0%,  0.0%) 10,421,618 (41.8%, 56.5%) 135,360 (85.9%, 89.7%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random_r.c:
  58,666,926 (22.2%)          3  (0.1%)          3  (0.1%)        16,781,312 (15.7%)             0                    0                8,390,656 (27.6%)             0                     0                10,420,654 (41.8%)        135,334 (85.9%)                0                  0                   random_r

< 50,341,361 (19.0%, 70.2%)  18  (0.6%,  3.3%)  18  (0.6%,  3.4%) 23,072,340 (21.5%, 73.0%)      7  (0.0%, 74.6%)     0  (0.0%,  0.0%) 6,292,792 (20.7%, 56.1%) 32,807 (88.5%, 89.0%) 32,807 (93.9%, 93.9%)  2,097,935  (8.4%, 64.9%)      29  (0.0%, 89.7%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp:
  50,341,305 (19.0%)         12  (0.4%)         12  (0.4%)        23,072,331 (21.5%)             7  (0.0%)            0                6,292,776 (20.7%)        32,807 (88.5%)        32,807 (93.9%)         2,097,934  (8.4%)             28  (0.0%)                0                  0                   cache_grind_prf()

< 48,246,292 (18.2%, 88.4%)   5  (0.2%,  3.4%)   5  (0.2%,  3.5%) 18,878,982 (17.6%, 90.6%)      1  (0.0%, 74.6%)     1  (0.0%,  0.0%) 6,292,995 (20.7%, 76.7%)      0  (0.0%, 89.0%)      0  (0.0%, 93.9%)  8,390,659 (33.6%, 98.6%)       0  (0.0%, 89.7%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random.c:
  48,246,272 (18.2%)          3  (0.1%)          3  (0.1%)        18,878,976 (17.6%)             0                    0                6,292,992 (20.7%)             0                     0                 8,390,656 (33.6%)              0                        0                  0                   random

< 12,585,984  (4.8%, 93.2%)   1  (0.0%,  3.5%)   1  (0.0%,  3.6%)  4,195,328  (3.9%, 94.5%)      0  (0.0%, 74.6%)     0  (0.0%,  0.0%) 4,195,328 (13.8%, 90.5%)      0  (0.0%, 89.0%)      0  (0.0%, 93.9%)          0  (0.0%, 98.6%)       0  (0.0%, 89.7%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/rand.c:rand

< 11,535,392  (4.4%, 97.5%)   1  (0.0%,  3.5%)   1  (0.0%,  3.6%)  3,146,016  (2.9%, 97.5%)      0  (0.0%, 74.6%)     0  (0.0%,  0.0%) 2,621,680  (8.6%, 99.1%)      4  (0.0%, 89.1%)      0  (0.0%, 93.9%)          0  (0.0%, 98.6%)       0  (0.0%, 89.7%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp:m_inedx(int, int, int, int)

<  4,227,433  (1.6%, 99.1%) 658 (22.5%, 26.0%) 632 (22.4%, 26.0%)  2,106,592  (2.0%, 99.4%)    634  (1.0%, 75.5%)    26  (0.3%,  0.3%)     4,455  (0.0%, 99.1%)    173  (0.5%, 89.5%)    121  (0.3%, 94.3%)      5,187  (0.0%, 98.6%)     461  (0.3%, 90.0%) 2,099,485 (99.8%, 99.8%) 247 (19.0%, 19.0%)  ???:
   4,200,885  (1.6%)        294 (10.1%)        271  (9.6%)         2,100,135  (2.0%)           499  (0.7%)           10  (0.1%)              614  (0.0%)            22  (0.1%)            13  (0.0%)               173  (0.0%)             50  (0.0%)        2,099,464 (99.8%)        236 (18.2%)           ???

<    813,254  (0.3%, 99.4%)  56  (1.9%, 27.9%)  53  (1.9%, 27.9%)    272,623  (0.3%, 99.7%)  4,810  (7.2%, 82.7%) 1,169 (15.0%, 15.4%)   125,885  (0.4%, 99.5%)    106  (0.3%, 89.8%)     44  (0.1%, 94.4%)    109,392  (0.4%, 99.0%)   6,717  (4.3%, 94.2%)       166  (0.0%, 99.8%)   3  (0.2%, 19.2%)  ./elf/./elf/dl-lookup.c:
     509,680  (0.2%)         37  (1.3%)         36  (1.3%)           181,215  (0.2%)         4,228  (6.3%)          886 (11.4%)           69,401  (0.2%)            70  (0.2%)            38  (0.1%)            74,376  (0.3%)          5,899  (3.7%)              166  (0.0%)          3  (0.2%)           do_lookup_x

<    497,230  (0.2%, 99.6%)   2  (0.1%, 28.0%)   2  (0.1%, 28.0%)     82,549  (0.1%, 99.8%)  1,994  (3.0%, 85.7%) 1,698 (21.8%, 37.2%)         0  (0.0%, 99.5%)      0  (0.0%, 89.8%)      0  (0.0%, 94.4%)     82,549  (0.3%, 99.3%)   1,976  (1.3%, 95.5%)         0  (0.0%, 99.8%)   0  (0.0%, 19.2%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr______________ ILmr_____________ Dr_______________________ D1mr________________ DLmr________________ Dw______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  function:file

> 58,666,926 (22.2%, 22.2%)   3  (0.1%,  0.1%)   3 (0.1%,  0.1%) 16,781,312 (15.7%, 15.7%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 8,390,656 (27.6%, 27.6%)      0  (0.0%,  0.0%)      0  (0.0%,  0.0%) 10,420,654 (41.8%, 41.8%) 135,334 (85.9%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random_r:./stdlib/./stdlib/random_r.c

> 50,341,305 (19.0%, 41.2%)  12  (0.4%,  0.5%)  12 (0.4%,  0.5%) 23,072,331 (21.5%, 37.2%)     7  (0.0%,  0.0%)     0  (0.0%,  0.0%) 6,292,776 (20.7%, 48.2%) 32,807 (88.5%, 88.5%) 32,807 (93.9%, 93.9%)  2,097,934  (8.4%, 50.2%)      28  (0.0%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  cache_grind_prf():/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp

> 48,246,272 (18.2%, 59.4%)   3  (0.1%,  0.6%)   3 (0.1%,  0.6%) 18,878,976 (17.6%, 54.8%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 6,292,992 (20.7%, 68.9%)      0  (0.0%, 88.5%)      0  (0.0%, 93.9%)  8,390,656 (33.6%, 83.8%)       0  (0.0%, 85.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random:./stdlib/./stdlib/random.c

> 31,460,949 (11.9%, 71.3%)   8  (0.3%,  0.9%)   8 (0.3%,  0.9%) 13,108,764 (12.2%, 67.1%) 8,258 (12.4%, 12.4%)     0  (0.0%,  0.0%) 1,311,246  (4.3%, 73.2%)      0  (0.0%, 88.5%)      0  (0.0%, 93.9%)  1,049,609  (4.2%, 88.0%)     550  (0.3%, 86.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm(unsigned char*, signed char*, int volatile*, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

> 12,585,984  (4.8%, 76.1%)   1  (0.0%,  0.9%)   1 (0.0%,  1.0%)  4,195,328  (3.9%, 71.0%)     0  (0.0%, 12.4%)     0  (0.0%,  0.0%) 4,195,328 (13.8%, 87.0%)      0  (0.0%, 88.5%)      0  (0.0%, 93.9%)          0  (0.0%, 88.0%)       0  (0.0%, 86.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  rand:./stdlib/./stdlib/rand.c

> 11,552,137  (4.4%, 80.4%)   6  (0.2%,  1.1%)   6 (0.2%,  1.2%)  6,297,736  (5.9%, 76.9%) 8,330 (12.5%, 24.9%)     0  (0.0%,  0.0%) 1,050,674  (3.5%, 90.4%)      0  (0.0%, 88.5%)      0  (0.0%, 93.9%)    526,361  (2.1%, 90.1%)   1,068  (0.7%, 86.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm_3(unsigned char*, signed char*, int volatile*, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

> 11,535,392  (4.4%, 84.8%)   1  (0.0%,  1.2%)   1 (0.0%,  1.2%)  3,146,016  (2.9%, 79.8%)     0  (0.0%, 24.9%)     0  (0.0%,  0.0%) 2,621,680  (8.6%, 99.0%)      4  (0.0%, 88.5%)      0  (0.0%, 93.9%)          0  (0.0%, 90.1%)       0  (0.0%, 86.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  m_inedx(int, int, int, int):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp

>  8,419,721  (3.2%, 88.0%)   7  (0.2%,  1.4%)   7 (0.2%,  1.5%)  4,729,992  (4.4%, 84.2%) 8,330 (12.5%, 37.4%)     0  (0.0%,  0.0%)     3,122  (0.0%, 99.0%)      0  (0.0%, 88.5%)      0  (0.0%, 93.9%)    526,361  (2.1%, 92.2%)   1,075  (0.7%, 87.6%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm_4(unsigned char*, signed char*, int volatile*, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  8,419,684  (3.2%, 91.2%)   5  (0.2%,  1.6%)   5 (0.2%,  1.6%)  4,729,968  (4.4%, 88.6%) 8,334 (12.5%, 49.9%)     0  (0.0%,  0.0%)     3,136  (0.0%, 99.1%)      0  (0.0%, 88.5%)      0  (0.0%, 93.9%)    526,356  (2.1%, 94.3%)   1,070  (0.7%, 88.3%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  multi_thread_sector(int, unsigned char*, signed char*, int volatile*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  8,416,560  (3.2%, 94.4%)   4  (0.1%,  1.7%)   4 (0.1%,  1.8%)  4,730,960  (4.4%, 93.0%) 8,337 (12.5%, 62.4%)     0  (0.0%,  0.0%)     5,232  (0.0%, 99.1%)      0  (0.0%, 88.5%)      0  (0.0%, 93.9%)    527,376  (2.1%, 96.4%)   1,078  (0.7%, 88.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int):
   8,412,464  (3.2%)          4  (0.1%)          4 (0.1%)         4,726,864  (4.4%)        8,212 (12.3%)            0                    5,232  (0.0%)             0                     0                   526,352  (2.1%)          1,078  (0.7%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  8,414,328  (3.2%, 97.5%)   2  (0.1%,  1.8%)   2 (0.1%,  1.8%)  4,729,880  (4.4%, 97.5%) 8,325 (12.5%, 74.9%)     0  (0.0%,  0.0%)     5,168  (0.0%, 99.1%)      8  (0.0%, 88.5%)      0  (0.0%, 93.9%)    527,368  (2.1%, 98.6%)   1,056  (0.7%, 89.6%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*):
   8,410,232  (3.2%)          2  (0.1%)          2 (0.1%)         4,725,784  (4.4%)        8,202 (12.3%)            0                    5,168  (0.0%)             8  (0.0%)             0                   526,344  (2.1%)          1,056  (0.7%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  4,200,885  (1.6%, 99.1%) 294 (10.1%, 11.8%) 271 (9.6%, 11.5%)  2,100,135  (2.0%, 99.4%)   499  (0.7%, 75.7%)    10  (0.1%,  0.1%)       614  (0.0%, 99.1%)     22  (0.1%, 88.6%)     13  (0.0%, 94.0%)        173  (0.0%, 98.6%)      50  (0.0%, 89.6%) 2,099,464 (99.8%, 99.8%) 236 (18.2%, 18.2%)  ???:???

>    685,795  (0.3%, 99.4%)  13  (0.4%, 12.3%)  13 (0.5%, 11.9%)    136,922  (0.1%, 99.5%) 2,019  (3.0%, 78.7%) 1,699 (21.8%, 21.9%)    42,791  (0.1%, 99.2%)     20  (0.1%, 88.6%)      3  (0.0%, 94.0%)    103,889  (0.4%, 99.0%)   2,689  (1.7%, 91.4%)         0  (0.0%, 99.8%)   0  (0.0%, 18.2%)  _dl_lookup_symbol_x:
     497,230  (0.2%)          2  (0.1%)          2 (0.1%)            82,549  (0.1%)        1,994  (3.0%)        1,698 (21.8%)                0                     0                     0                    82,549  (0.3%)          1,976  (1.3%)                0                  0                   ./elf/../sysdeps/generic/dl-new-hash.h

>    527,054  (0.2%, 99.6%)  37  (1.3%, 13.6%)  36 (1.3%, 13.2%)    183,147  (0.2%, 99.7%) 4,228  (6.3%, 85.0%)   886 (11.4%, 33.3%)    69,407  (0.2%, 99.5%)     70  (0.2%, 88.8%)     38  (0.1%, 94.1%)     76,305  (0.3%, 99.3%)   5,899  (3.7%, 95.1%)       169  (0.0%, 99.8%)   5  (0.4%, 18.5%)  do_lookup_x:
     509,680  (0.2%)         37  (1.3%)         36 (1.3%)           181,215  (0.2%)        4,228  (6.3%)          886 (11.4%)           69,401  (0.2%)            70  (0.2%)            38  (0.1%)            74,376  (0.3%)          5,899  (3.7%)              166  (0.0%)          3  (0.2%)           ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/rand.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/rand.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp
--------------------------------------------------------------------------------
Ir_______________ I1mr____ ILmr____ Dr______________ D1mr_________ DLmr Dw____________ D1mw_____ DLmw Bc____________ Bcm_________ Bi Bim 

         .        .        .                .            .            .       .         .           .       .            .         .   .  #include "bttd.hpp"
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  //sector{1,2,3,4}-1;
        10 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       7 (0.0%)  0           0       0            0         0   0  void new_mvm(pcm_size_t*matrix,input_size_t*vector,volatile int*volatile layers,int*sectors,int64_t*result ){
         3 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result,0,512*8);
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s=0;
        41 (0.0%) 2 (0.1%) 2 (0.1%)        15 (0.0%)     0            0       0         0           0       5 (0.0%)     3 (0.0%)  0   0      while(sectors[s]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .          
     1,552 (0.0%) 0        0            1,028 (0.0%)     0            0       4 (0.0%)  0           0     516 (0.0%)     9 (0.0%)  0   0          for(int y=0;y<tile_size;++y){
   788,480 (0.3%) 1 (0.0%) 1 (0.0%)   524,800 (0.5%)     0            0     512 (0.0%)  0           0 262,656 (1.1%)   523 (0.3%)  0   0              for(int x=0;x<max_x;++x){
   262,144 (0.1%) 0        0                0            0            0 262,144 (0.9%)  0           0       0            0         0   0                  int l=0;
   262,144 (0.1%) 0        0                0            0            0 262,144 (0.9%)  0           0       0            0         0   0                  uint64_t wheight=0;
 8,126,464 (3.1%) 1 (0.0%) 1 (0.0%) 2,359,296 (2.2%)     0            0       0         0           0 786,432 (3.2%)    15 (0.0%)  0   0                  while(layers[l]!=-1){
11,010,048 (4.2%) 0        0        5,767,168 (5.4%) 8,197 (12.3%)    0 524,288 (1.7%)  0           0       0            0         0   0                      wheight+=matrix[m_inedx(sectors[s],layers[l],y,x)];
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0                      ++l;
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
10,485,760 (4.0%) 2 (0.1%) 2 (0.1%) 3,932,160 (3.7%)    60  (0.1%)    0 262,144 (0.9%)  0           0       0            0         0   0                  result[sectors[s]*128+y]+=wheight*vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         5 (0.0%) 0        0                3 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  void new_mvm_2(pcm_size_t*matrix,input_size_t*vector,volatile int*volatile layers,int*sectors,int64_t*result ){
         .        .        .                .            .            .       .         .           .       .            .         .   .      ++computations;
         .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result,0,512*8);
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .      int s=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .      while(sectors[s]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .          
-- line 34 ----------------------------------------
-- line 44 ----------------------------------------
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         .        .        .                .            .            .       .         .           .       .            .         .   .          s++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        10 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       7 (0.0%)  0           0       0            0         0   0  void new_mvm_3(pcm_size_t* matrix, input_size_t* vector, volatile int* volatile layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     0            0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 0        0               12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s = sectors[s_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
       124 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     8  (0.0%)    0       0         0           0      12 (0.0%)     7 (0.0%)  0   0          while (layers[l_idx] != -1) {
        56 (0.0%) 0        0               24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        72 (0.0%) 0        0               24 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 1 (0.0%) 1 (0.0%)     2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    15 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
    10,240 (0.0%) 0        0            3,072 (0.0%)     0            0   1,024 (0.0%)  0           0       0            0         0   0                  int64_t* result_row_ptr = &result[s * 128 + y];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,042 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
 2,097,152 (0.8%) 0        0        1,048,576 (1.0%) 8,197 (12.3%)    0 524,288 (1.7%)  0           0       0            0         0   0                      uint64_t wheight = *matrix_base; 
 7,340,032 (2.8%) 0        0        3,670,016 (3.4%)   124  (0.2%)    0 524,288 (1.7%)  0           0       0            0         0   0                      *result_row_ptr += wheight * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         5 (0.0%) 0        0                3 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        10 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       7 (0.0%)  0           0       0            0         0   0  void new_mvm_4(pcm_size_t* matrix, input_size_t* vector, volatile int* volatile layers, int* sectors, int64_t* result) {
         3 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     0            0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s = sectors[s_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
       124 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     8  (0.0%)    0       0         0           0      12 (0.0%)     7 (0.0%)  0   0          while (layers[l_idx] != -1) {
        56 (0.0%) 0        0               24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        72 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    15 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
     1,024 (0.0%) 0        0                0            0            0   1,024 (0.0%)  0           0       0            0         0   0                  int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,049 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
 6,291,456 (2.4%) 0        0        3,145,728 (2.9%) 8,197 (12.3%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
    22,528 (0.0%) 0        0            8,192 (0.0%)   124  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         5 (0.0%) 0        0                3 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        40 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0      28 (0.0%)  0           0       0            0         0   0  void multi_thread_sector(int s, pcm_size_t* matrix, input_size_t* vector, volatile int* volatile layers, int64_t* result) {
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
       124 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     8  (0.0%)    0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (layers[l_idx] != -1) {
        56 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        72 (0.0%) 0        0               24 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    14 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
     1,024 (0.0%) 0        0                0            0            0   1,024 (0.0%)  0           0       0            0         0   0                  int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,050 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
 6,291,456 (2.4%) 0        0        3,145,728 (2.9%) 8,199 (12.3%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
    22,528 (0.0%) 1 (0.0%) 1 (0.0%)     8,192 (0.0%)   127  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
        20 (0.0%) 0        0               12 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        13 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0  void new_mvm_mtd_4(pcm_size_t* matrix, input_size_t* vector, volatile int* volatile layers, int* sectors, int64_t* result) {
         3 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         3 (0.0%) 0        0                0            0            0       2 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 2 (0.1%) 2 (0.1%)        15 (0.0%)     1  (0.0%)    0       0         0           0       5 (0.0%)     1 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        80 (0.0%) 1 (0.0%) 1 (0.0%)         8 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0          std::thread t(multi_thread_sector, sectors[s_idx], matrix, vector, layers, result);
        32 (0.0%) 0        0                0            0            0       8 (0.0%)  0           0       0            0         0   0          threads.push_back(move(t));
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
        12 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        51 (0.0%) 1 (0.0%) 1 (0.0%)         9 (0.0%)     2  (0.0%)    0       6 (0.0%)  0           0       5 (0.0%)     2 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
        32 (0.0%) 0        0                4 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0          threads[i].join();
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         9 (0.0%) 0        0                5 (0.0%)     0            0       1 (0.0%)  0           0       1 (0.0%)     1 (0.0%)  0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        56 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0      40 (0.0%)  8 (0.0%)    0       0            0         0   0  void multi_thread_layer( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result) {
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    12 (0.0%)  0   0      for (int y = 0; y < tile_size; ++y) {
     1,024 (0.0%) 0        0                0            0            0   1,024 (0.0%)  0           0       0            0         0   0          int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,044 (0.7%)  0   0          for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .              
 6,291,456 (2.4%) 0        0        3,145,728 (2.9%) 8,202 (12.3%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0              matrix++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
    13,312 (0.0%) 0        0            4,096 (0.0%)     0            0   3,072 (0.0%)  0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .          
        32 (0.0%) 0        0               16 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        16 (0.0%) 3 (0.1%) 3 (0.1%)         2 (0.0%)     0            0       9 (0.0%)  0           0       0            0         0   0  void new_mvm_mtd_8(pcm_size_t* matrix, input_size_t* vector, volatile int* volatile layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         3 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       2 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
       517 (0.0%) 0        0                0            0            0     512 (0.0%)  0           0     512 (0.0%)     5 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
     5,636 (0.0%) 1 (0.0%) 1 (0.0%)     1,537 (0.0%)     0            0     513 (0.0%)  0           0     513 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     1  (0.0%)    0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
       124 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     0            0       0         0           0      12 (0.0%)     5 (0.0%)  0   0          while (layers[l_idx] != -1) {
        56 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       232 (0.0%) 2 (0.1%) 2 (0.1%)        56 (0.0%)     0            0      24 (0.0%)  0           0       0            0         0   0              std::thread t(multi_thread_layer, &matrix[m_inedx(sectors[s_idx], l, 0, 0)],sectors[s_idx], vector, temp_result);
        64 (0.0%) 0        0                0            0            0      16 (0.0%)  0           0       0            0         0   0              threads.push_back(move(t));
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
        24 (0.0%) 0        0                0            0            0       8 (0.0%)  0           0       0            0         0   0          }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        91 (0.0%) 2 (0.1%) 2 (0.1%)        17 (0.0%)     2  (0.0%)    0      10 (0.0%)  0           0       9 (0.0%)     3 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
        64 (0.0%) 0        0                8 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0          threads[i].join();
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     1,540 (0.0%) 1 (0.0%) 1 (0.0%)     1,025 (0.0%)     0            0       1 (0.0%)  0           0     513 (0.0%)     6 (0.0%)  0   0      for(int i=0;i<512;++i){
     6,656 (0.0%) 1 (0.0%) 1 (0.0%)     1,536 (0.0%)     0            0   1,536 (0.0%) 65 (0.2%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
        11 (0.0%) 1 (0.0%) 1 (0.0%)         6 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       1 (0.0%)     1 (0.0%)  0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        16 (0.0%) 2 (0.1%) 2 (0.1%)         2 (0.0%)     1  (0.0%)    0       9 (0.0%)  2 (0.0%)    0       0            0         0   0  void new_mvm_mtd_16(pcm_size_t* matrix, input_size_t* vector, volatile int* volatile layers, int* sectors, int64_t* result) {
         3 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         3 (0.0%) 0        0                0            0            0       2 (0.0%)  1 (0.0%)    0       0            0         0   0      std::vector<std::thread> threads;
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int thread_count = 2;
       517 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0     512 (0.0%) 59 (0.2%)    0     512 (0.0%)    10 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
     5,636 (0.0%) 1 (0.0%) 1 (0.0%)     1,537 (0.0%)     0            0     513 (0.0%)  0           0     513 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 2 (0.1%) 2 (0.1%)        15 (0.0%)     0            0       0         0           0       5 (0.0%)     3 (0.0%)  0   0      while (sectors[s_idx] != -1) {
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
       124 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     0            0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (layers[l_idx] != -1) {
        56 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       104 (0.0%) 0        0               64 (0.0%)     0            0       8 (0.0%)  0           0      24 (0.0%)    11 (0.0%)  0   0              for(int i=0;i<thread_count;++i){
        80 (0.0%) 0        0               32 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0                  int y_start = i * (tile_size / thread_count);
       592 (0.0%) 3 (0.1%) 3 (0.1%)       128 (0.0%)     0            0      64 (0.0%)  0           0       0            0         0   0                  std::thread t(multi_thread_layer_2, &matrix[m_inedx(sectors[s_idx], l, 0, 0)+y_start*max_x],sectors[s_idx], vector, temp_result,y_start);
       128 (0.0%) 0        0                0            0            0      32 (0.0%)  0           0       0            0         0   0                  threads.push_back(move(t));
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        48 (0.0%) 0        0                0            0            0      16 (0.0%)  0           0       0            0         0   0              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       171 (0.0%) 1 (0.0%) 1 (0.0%)        33 (0.0%)     2  (0.0%)    0      18 (0.0%)  0           0      17 (0.0%)     2 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
       128 (0.0%) 0        0               16 (0.0%)     0            0      32 (0.0%)  0           0       0            0         0   0          threads[i].join();
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
     1,540 (0.0%) 1 (0.0%) 1 (0.0%)     1,025 (0.0%)     0            0       1 (0.0%)  0           0     513 (0.0%)     6 (0.0%)  0   0      for(int i=0;i<512;++i){
     6,656 (0.0%) 1 (0.0%) 1 (0.0%)     1,536 (0.0%)     0            0   1,536 (0.0%) 65 (0.2%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
        11 (0.0%) 1 (0.0%) 1 (0.0%)         6 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       1 (0.0%)     1 (0.0%)  0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       128 (0.0%) 2 (0.1%) 2 (0.1%)         0            0            0      96 (0.0%)  0           0       0            0         0   0  void multi_thread_layer_2( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result,int y_start) {
     5,232 (0.0%) 1 (0.0%) 1 (0.0%)     3,120 (0.0%)     0            0      16 (0.0%)  0           0   1,040 (0.0%)    35 (0.0%)  0   0      for (int y = y_start; y < y_start+64; ++y) {
     1,024 (0.0%) 0        0                0            0            0   1,024 (0.0%)  0           0       0            0         0   0          int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,043 (0.7%)  0   0          for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .              
 6,291,456 (2.4%) 0        0        3,145,728 (2.9%) 8,212 (12.3%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0              matrix++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
    13,312 (0.0%) 0        0            4,096 (0.0%)     0            0   3,072 (0.0%)  0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .          
        64 (0.0%) 0        0               32 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  void acc_test(pcm_size_t*matrix,volatile int*volatile layers,int*sectors){
         .        .        .                .            .            .       .         .           .       .            .         .   .      int s=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .      while(sectors[s]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .          int l=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .          while(layers[l]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .              for(int y=0;y<tile_size;++y){
-- line 260 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp
--------------------------------------------------------------------------------
Ir______________ I1mr____ ILmr____ Dr______________ D1mr DLmr Dw______________ D1mw____ DLmw Bc Bcm Bi Bim 

-- line 2 ----------------------------------------
        .        .        .                .           .    .         .        .           .  .   .  .   .  #define BTTD_H
        .        .        .                .           .    .         .        .           .  .   .  .   .  //Back To The Drawingboard
        .        .        .                .           .    .         .        .           .  .   .  .   .  #include "matrix_multisec.hpp"
        .        .        .                .           .    .         .        .           .  .   .  .   .  #include <atomic> 
        .        .        .                .           .    .         .        .           .  .   .  .   .  extern unsigned int computations; 
        .        .        .                .           .    .         .        .           .  .   .  .   .  
        .        .        .                .           .    .         .        .           .  .   .  .   .  #define PREFETCH_DISTANCE 32
        .        .        .                .           .    .         .        .           .  .   .  .   .  
3,670,352 (1.4%) 0        0                0           0    0 2,621,680 (8.6%) 4 (0.0%)    0  0   0  0   0  inline long long m_inedx(int s,int l,int y,int x){
6,816,368 (2.6%) 1 (0.0%) 1 (0.0%) 2,097,344 (2.0%)    0    0         0        0           0  0   0  0   0      return (((s*8+l)*128+y)*512)+x;
1,048,672 (0.4%) 0        0        1,048,672 (1.0%)    0    0         0        0           0  0   0  0   0  }
        .        .        .                .           .    .         .        .           .  .   .  .   .  
        .        .        .                .           .    .         .        .           .  .   .  .   .  inline long long m_inedx_2(int s,int l,int y,int x){
        .        .        .                .           .    .         .        .           .  .   .  .   .      return (((s*128+y)*512+x)*8)+l;
        .        .        .                .           .    .         .        .           .  .   .  .   .  }
        .        .        .                .           .    .         .        .           .  .   .  .   .  
        .        .        .                .           .    .         .        .           .  .   .  .   .  /**
        .        .        .                .           .    .         .        .           .  .   .  .   .   * |L0(0),L1(0),L2(0),.......
        .        .        .                .           .    .         .        .           .  .   .  .   .   */
-- line 20 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp
--------------------------------------------------------------------------------
Ir_______________ I1mr____ ILmr____ Dr_______________ D1mr____ DLmr Dw_______________ D1mw__________ DLmw__________ Bc______________ Bcm______ Bi Bim 

-- line 65 ----------------------------------------
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  double cpuSecond() {
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    struct timespec ts;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    timespec_get(&ts, TIME_UTC);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    return ((double)ts.tv_sec + (double)ts.tv_nsec * 1.e-9);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  }
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
        21 (0.0%) 1 (0.0%) 1 (0.0%)          0        0           0         4  (0.0%)      0              0                 0         0         0   0  Logger logger("logs.txt");
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         9 (0.0%) 2 (0.1%) 2 (0.1%)          1 (0.0%) 0           0         4  (0.0%)      0              0                 0         0         0   0  int main(int args,char ** argv){
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         1 (0.0%) 0        0                 0        0           0         1  (0.0%)      0              0                 0         0         0   0    cache_grind_prf();
         2 (0.0%) 0        0                 0        0           0         1  (0.0%)      0              0                 0         0         0   0    exit(0);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    // benchmark_mvm_algorithms();
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    // exit(0);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    // scattered_matrix();
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    // new_mvm_test();
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    // exit(0); 
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    uint64_t size;
-- line 86 ----------------------------------------
-- line 164 ----------------------------------------
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    delete[] f;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    delete[] result;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    delete[] sector;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    delete[] layer;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    return 0;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  }
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         7 (0.0%) 1 (0.0%) 1 (0.0%)          1 (0.0%) 0           0         2  (0.0%)      0              0                 0         0         0   0  void cache_grind_prf(){
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    uint64_t size;
         3 (0.0%) 0        0                 0        0           0         2  (0.0%)      0              0                 0         0         0   0    input_size_t * vector = new input_size_t[max_vect];
         9 (0.0%) 0        0                 1 (0.0%) 0           0         2  (0.0%)      0              0                 0         0         0   0    std::cout<<"befre alloc: " << std::endl;
         4 (0.0%) 1 (0.0%) 1 (0.0%)          0        0           0         2  (0.0%)      0              0                 0         0         0   0    pcm_size_t * f = flat(&size); 
         3 (0.0%) 0        0                 0        0           0         2  (0.0%)      0              0                 0         0         0   0    int64_t * result = new int64_t[max_vect];
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         4 (0.0%) 0        0                 0        0           0         2  (0.0%)      0              0                 0         0         0   0    srand(time(nullptr));
         1 (0.0%) 0        0                 0        0           0         1  (0.0%)      0              0                 0         0         0   0    int range = INT8_MAX - INT8_MIN + 1;
     1,540 (0.0%) 1 (0.0%) 1 (0.0%)      1,025 (0.0%) 0           0         1  (0.0%)      0              0               513 (0.0%)  7 (0.0%)  0   0    for(int i=0;i<512;i++){
     5,632 (0.0%) 0        0             1,536 (0.0%) 0           0     1,024  (0.0%)      7  (0.0%)      7  (0.0%)         0         0         0   0      vector[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .        .        .                 .        .           .         .              .              .                 .         .         .   .      
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    }
       772 (0.0%) 1 (0.0%) 1 (0.0%)        513 (0.0%) 0           0         1  (0.0%)      0              0               257 (0.0%) 10 (0.0%)  0   0    for(int i=0;i<256;i++){
     1,536 (0.0%) 0        0               512 (0.0%) 0           0       256  (0.0%)     32  (0.1%)     32  (0.1%)         0         0         0   0      result[i]=0;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    }
10,485,766 (4.0%) 1 (0.0%) 1 (0.0%)  6,291,458 (5.9%) 0           0         1  (0.0%)      0              0         2,097,153 (8.4%)  7 (0.0%)  0   0    for(long long i=0;i<size;++i){
20,971,520 (7.9%) 0        0         6,291,456 (5.9%) 0           0 4,194,304 (13.8%) 32,768 (88.4%) 32,768 (93.8%)         0         0         0   0      f[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
18,874,368 (7.1%) 0        0        10,485,760 (9.8%) 0           0 2,097,152  (6.9%)      0              0                 0         0         0   0      f[i]&= 0x0F;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .      ///std::cout<<static_cast<int32_t>(f[i]);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    }
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         3 (0.0%) 0        0                 0        0           0         2  (0.0%)      0              0                 0         0         0   0    int* sector = new int[4+1];
         3 (0.0%) 1 (0.0%) 1 (0.0%)          0        0           0         2  (0.0%)      0              0                 0         0         0   0    int*layer =new int[8+1];
        44 (0.0%) 0        0                21 (0.0%) 0           0         5  (0.0%)      0              0                 5 (0.0%)  3 (0.0%)  0   0    for(int i=0;i<4;++i)sector[i]=i;
         3 (0.0%) 1 (0.0%) 1 (0.0%)          1 (0.0%) 0           0         1  (0.0%)      0              0                 0         0         0   0    sector[4]=-1;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         2 (0.0%) 0        0                 1 (0.0%) 0           0         1  (0.0%)      0              0                 0         0         0   0    layer[0]=0;
         3 (0.0%) 0        0                 1 (0.0%) 0           0         1  (0.0%)      0              0                 0         0         0   0    layer[1]=7;
         3 (0.0%) 0        0                 1 (0.0%) 0           0         1  (0.0%)      0              0                 0         0         0   0    layer[2]=-1;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         8 (0.0%) 1 (0.0%) 1 (0.0%)          5 (0.0%) 0           0         1  (0.0%)      0              0                 0         0         0   0    new_mvm_mtd_16(f,vector,layer,sector,result);
         8 (0.0%) 0        0                 5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0         0         0   0    new_mvm_mtd_8(f,vector,layer,sector,result);
         8 (0.0%) 1 (0.0%) 1 (0.0%)          5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0         0         0   0    new_mvm_mtd_4(f,vector,layer,sector,result);
         8 (0.0%) 0        0                 5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0         0         0   0    new_mvm_4(f,vector,layer,sector,result);
         8 (0.0%) 1 (0.0%) 1 (0.0%)          5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0         0         0   0    new_mvm_3(f,vector,layer,sector,result);
         8 (0.0%) 0        0                 5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0         0         0   0    new_mvm(f,vector,layer,sector,result);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         5 (0.0%) 0        0                 2 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 1 (0.0%)  0         0   0    delete[] vector;
         5 (0.0%) 1 (0.0%) 1 (0.0%)          2 (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%)  0         0   0    delete[] f;
         5 (0.0%) 0        0                 2 (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%)  0         0   0    delete[] result;
         5 (0.0%) 0        0                 2 (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%)  0         0   0    delete[] sector;
         5 (0.0%) 1 (0.0%) 1 (0.0%)          2 (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%)  0         0   0    delete[] layer;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         6 (0.0%) 0        0                 4 (0.0%) 1 (0.0%)    0         0              0              0                 1 (0.0%)  1 (0.0%)  0   0  }
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  void scattered_matrix(){
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    uint64_t size;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    input_size_t * vector = new input_size_t[max_vect];
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    std::cout<<"befre alloc: " << std::endl;
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    pcm_size_t * f = flat(&size); 
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    int64_t * result = new int64_t[max_vect];
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
-- line 224 ----------------------------------------
-- line 766 ----------------------------------------
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    fclose(mtd_32);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    fclose(mtd_64);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    fclose(mtd_128);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .    fclose(mtd_512);
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
        23 (0.0%) 3 (0.1%) 3 (0.1%)          8 (0.0%) 0           0         6  (0.0%)      0              0                 1 (0.0%)  1 (0.0%)  0   0  }
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  
         .        .        .                 .        .           .         .              .              .                 .         .         .   .  

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_________________ I1mr_________ ILmr_________ Dr________________ D1mr__________ DLmr_________ Dw________________ D1mw__________ DLmw__________ Bc________________ Bcm____________ Bi_______________ Bim__________ 

138,583,203 (52.4%)    88  (3.0%)    88  (3.1%) 64,546,256 (60.3%) 49,687 (74.6%)     0         11,298,537 (37.1%) 33,011 (89.0%) 32,807 (93.9%)  5,782,491 (23.2%)   6,001  (3.8%)         0             0            annotated: files known & above threshold & readable, line numbers known
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0            annotated: files known & above threshold & readable, line numbers unknown
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0          unannotated: files known & above threshold & two or more non-identical
120,815,898 (45.7%)    72  (2.5%)    69  (2.4%) 40,212,659 (37.5%)  6,806 (10.2%) 2,868 (36.8%) 19,005,516 (62.4%)    109  (0.3%)     45  (0.1%) 19,004,218 (76.2%) 144,053 (91.4%)       166  (0.0%)     3  (0.2%)  unannotated: files known & above threshold & unreadable 
    963,405  (0.4%) 2,103 (72.0%) 2,030 (72.0%)    257,661  (0.2%)  9,512 (14.3%) 4,895 (62.8%)    140,844  (0.5%)  3,780 (10.2%)  1,954  (5.6%)    162,343  (0.7%)   7,108  (4.5%)     4,729  (0.2%) 1,050 (80.8%)  unannotated: files known & below threshold
  4,227,433  (1.6%)   658 (22.5%)   632 (22.4%)  2,106,592  (2.0%)    634  (1.0%)    26  (0.3%)      4,455  (0.0%)    173  (0.5%)    121  (0.3%)      5,187  (0.0%)     461  (0.3%) 2,099,485 (99.8%)   247 (19.0%)  unannotated: files unknown

