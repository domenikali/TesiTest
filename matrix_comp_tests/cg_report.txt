--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate --show-percs=yes cg.out
I1 cache:         65536 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         25165824 B, 64 B, 12-way associative
Command:          ./matrix_tests
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ I1mr__________ ILmr__________ Dr_________________ D1mr___________ DLmr__________ Dw_________________ D1mw___________ DLmw___________ Bc_________________ Bcm_____________ Bi________________ Bim___________ 

239,005,751 (100.0%) 2,463 (100.0%) 2,403 (100.0%) 92,838,219 (100.0%) 39,471 (100.0%) 7,730 (100.0%) 30,350,249 (100.0%) 35,431 (100.0%) 34,279 (100.0%) 23,331,224 (100.0%) 153,546 (100.0%) 2,103,267 (100.0%) 1,323 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr______________ ILmr______________ Dr_______________________ D1mr_________________ DLmr________________ Dw______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  file:function

< 58,673,138 (24.5%, 24.5%)   8  (0.3%,  0.3%)   8  (0.3%,  0.3%) 16,783,177 (18.1%, 18.1%)      1  (0.0%,  0.0%)     0  (0.0%,  0.0%) 8,391,308 (27.6%, 27.6%)      3  (0.0%,  0.0%)      1  (0.0%,  0.0%) 10,421,618 (44.7%, 44.7%) 135,359 (88.2%, 88.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random_r.c:
  58,666,926 (24.5%)          3  (0.1%)          3  (0.1%)        16,781,312 (18.1%)             0                    0                8,390,656 (27.6%)             0                     0                10,420,654 (44.7%)        135,334 (88.1%)                0                  0                   random_r

< 51,443,047 (21.5%, 46.1%)  22  (0.9%,  1.2%)  22  (0.9%,  1.2%) 24,139,564 (26.0%, 44.1%) 24,928 (63.2%, 63.2%)     0  (0.0%,  0.0%) 2,366,066  (7.8%, 35.4%)     14  (0.0%,  0.0%)      0  (0.0%,  0.0%)  2,102,331  (9.0%, 53.7%)   2,699  (1.8%, 89.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp:
  31,460,949 (13.2%)          7  (0.3%)          7  (0.3%)        13,108,764 (14.1%)         8,267 (20.9%)            0                1,311,246  (4.3%)             0                     0                 1,049,609  (4.5%)            553  (0.4%)                0                  0                   new_mvm(unsigned char*, signed char*, int volatile*, int*, long*)
  11,552,137  (4.8%)          7  (0.3%)          7  (0.3%)         6,297,736  (6.8%)         8,331 (21.1%)            0                1,050,674  (3.5%)             7  (0.0%)             0                   526,361  (2.3%)          1,072  (0.7%)                0                  0                   new_mvm_3(unsigned char*, signed char*, int volatile*, int*, long*)
   8,429,961  (3.5%)          8  (0.3%)          8  (0.3%)         4,733,064  (5.1%)         8,330 (21.1%)            0                    4,146  (0.0%)             7  (0.0%)             0                   526,361  (2.3%)          1,074  (0.7%)                0                  0                   new_mvm_4(unsigned char*, signed char*, int volatile*, int*, long*)

< 50,341,558 (21.1%, 67.1%)  23  (0.9%,  2.2%)  23  (1.0%,  2.2%) 23,072,381 (24.9%, 68.9%)     10  (0.0%, 63.2%)     1  (0.0%,  0.0%) 6,292,827 (20.7%, 56.2%) 32,811 (92.6%, 92.7%) 32,807 (95.7%, 95.7%)  2,097,941  (9.0%, 62.7%)      33  (0.0%, 89.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp:
  50,341,364 (21.1%)         18  (0.7%)         18  (0.7%)        23,072,325 (24.9%)             3  (0.0%)            0                6,292,799 (20.7%)        32,811 (92.6%)        32,807 (95.7%)         2,097,934  (9.0%)             29  (0.0%)                0                  0                   main

< 48,246,292 (20.2%, 87.3%)   5  (0.2%,  2.4%)   5  (0.2%,  2.4%) 18,878,982 (20.3%, 89.3%)      1  (0.0%, 63.2%)     1  (0.0%,  0.0%) 6,292,995 (20.7%, 76.9%)      0  (0.0%, 92.7%)      0  (0.0%, 95.7%)  8,390,659 (36.0%, 98.6%)       0  (0.0%, 89.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random.c:
  48,246,272 (20.2%)          3  (0.1%)          3  (0.1%)        18,878,976 (20.3%)             0                    0                6,292,992 (20.7%)             0                     0                 8,390,656 (36.0%)              0                        0                  0                   random

< 12,585,984  (5.3%, 92.6%)   1  (0.0%,  2.4%)   1  (0.0%,  2.5%)  4,195,328  (4.5%, 93.8%)      0  (0.0%, 63.2%)     0  (0.0%,  0.0%) 4,195,328 (13.8%, 90.7%)      0  (0.0%, 92.7%)      0  (0.0%, 95.7%)          0  (0.0%, 98.6%)       0  (0.0%, 89.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/rand.c:rand

< 11,534,688  (4.8%, 97.4%)   2  (0.1%,  2.5%)   2  (0.1%,  2.5%)  3,145,824  (3.4%, 97.2%)      0  (0.0%, 63.2%)     0  (0.0%,  0.0%) 2,621,520  (8.6%, 99.4%)      0  (0.0%, 92.7%)      0  (0.0%, 95.7%)          0  (0.0%, 98.6%)       0  (0.0%, 89.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp:m_inedx(int, int, int, int)

<  4,226,264  (1.8%, 99.2%) 672 (27.3%, 29.8%) 654 (27.2%, 29.8%)  2,106,123  (2.3%, 99.4%)    414  (1.0%, 64.2%)    26  (0.3%,  0.4%)     4,454  (0.0%, 99.4%)    180  (0.5%, 93.2%)    121  (0.4%, 96.1%)      5,260  (0.0%, 98.7%)     502  (0.3%, 90.3%) 2,098,857 (99.8%, 99.8%) 278 (21.0%, 21.0%)  ???:
   4,199,491  (1.8%)        291 (11.8%)        274 (11.4%)         2,099,382  (2.3%)           235  (0.6%)           10  (0.1%)              569  (0.0%)            28  (0.1%)            13  (0.0%)               182  (0.0%)             49  (0.0%)        2,098,815 (99.8%)        260 (19.7%)           ???

<    809,276  (0.3%, 99.5%)  53  (2.2%, 31.9%)  53  (2.2%, 32.0%)    271,306  (0.3%, 99.7%)  4,781 (12.1%, 76.3%) 1,159 (15.0%, 15.4%)   125,260  (0.4%, 99.8%)    113  (0.3%, 93.5%)     44  (0.1%, 96.2%)    108,855  (0.5%, 99.1%)   6,670  (4.3%, 94.6%)       166  (0.0%, 99.8%)   3  (0.2%, 21.2%)  ./elf/./elf/dl-lookup.c:
     507,340  (0.2%)         36  (1.5%)         36  (1.5%)           180,394  (0.2%)         4,233 (10.7%)          885 (11.4%)           69,079  (0.2%)            77  (0.2%)            38  (0.1%)            74,032  (0.3%)          5,863  (3.8%)              166  (0.0%)          3  (0.2%)           do_lookup_x

<    494,566  (0.2%, 99.7%)   2  (0.1%, 32.0%)   2  (0.1%, 32.0%)     82,107  (0.1%, 99.8%)  1,982  (5.0%, 81.4%) 1,685 (21.8%, 37.2%)         0  (0.0%, 99.8%)      0  (0.0%, 93.5%)      0  (0.0%, 96.2%)     82,107  (0.4%, 99.5%)   1,964  (1.3%, 95.9%)         0  (0.0%, 99.8%)   0  (0.0%, 21.2%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr______________ ILmr______________ Dr_______________________ D1mr________________ DLmr________________ Dw______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  function:file

> 58,666,926 (24.5%, 24.5%)   3  (0.1%,  0.1%)   3  (0.1%,  0.1%) 16,781,312 (18.1%, 18.1%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 8,390,656 (27.6%, 27.6%)      0  (0.0%,  0.0%)      0  (0.0%,  0.0%) 10,420,654 (44.7%, 44.7%) 135,334 (88.1%, 88.1%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random_r:./stdlib/./stdlib/random_r.c

> 50,341,364 (21.1%, 45.6%)  18  (0.7%,  0.9%)  18  (0.7%,  0.9%) 23,072,325 (24.9%, 42.9%)     3  (0.0%,  0.0%)     0  (0.0%,  0.0%) 6,292,799 (20.7%, 48.4%) 32,811 (92.6%, 92.6%) 32,807 (95.7%, 95.7%)  2,097,934  (9.0%, 53.7%)      29  (0.0%, 88.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  main:/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp

> 48,246,272 (20.2%, 65.8%)   3  (0.1%,  1.0%)   3  (0.1%,  1.0%) 18,878,976 (20.3%, 63.3%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 6,292,992 (20.7%, 69.1%)      0  (0.0%, 92.6%)      0  (0.0%, 95.7%)  8,390,656 (36.0%, 89.6%)       0  (0.0%, 88.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random:./stdlib/./stdlib/random.c

> 31,460,949 (13.2%, 79.0%)   7  (0.3%,  1.3%)   7  (0.3%,  1.3%) 13,108,764 (14.1%, 77.4%) 8,267 (20.9%, 21.0%)     0  (0.0%,  0.0%) 1,311,246  (4.3%, 73.4%)      0  (0.0%, 92.6%)      0  (0.0%, 95.7%)  1,049,609  (4.5%, 94.1%)     553  (0.4%, 88.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm(unsigned char*, signed char*, int volatile*, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

> 12,585,984  (5.3%, 84.2%)   1  (0.0%,  1.3%)   1  (0.0%,  1.3%)  4,195,328  (4.5%, 81.9%)     0  (0.0%, 21.0%)     0  (0.0%,  0.0%) 4,195,328 (13.8%, 87.3%)      0  (0.0%, 92.6%)      0  (0.0%, 95.7%)          0  (0.0%, 94.1%)       0  (0.0%, 88.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  rand:./stdlib/./stdlib/rand.c

> 11,552,137  (4.8%, 89.1%)   7  (0.3%,  1.6%)   7  (0.3%,  1.6%)  6,297,736  (6.8%, 88.7%) 8,331 (21.1%, 42.1%)     0  (0.0%,  0.0%) 1,050,674  (3.5%, 90.7%)      7  (0.0%, 92.6%)      0  (0.0%, 95.7%)    526,361  (2.3%, 96.4%)   1,072  (0.7%, 89.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm_3(unsigned char*, signed char*, int volatile*, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

> 11,534,688  (4.8%, 93.9%)   2  (0.1%,  1.7%)   2  (0.1%,  1.7%)  3,145,824  (3.4%, 92.1%)     0  (0.0%, 42.1%)     0  (0.0%,  0.0%) 2,621,520  (8.6%, 99.4%)      0  (0.0%, 92.6%)      0  (0.0%, 95.7%)          0  (0.0%, 96.4%)       0  (0.0%, 89.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  m_inedx(int, int, int, int):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp

>  8,429,961  (3.5%, 97.4%)   8  (0.3%,  2.0%)   8  (0.3%,  2.0%)  4,733,064  (5.1%, 97.2%) 8,330 (21.1%, 63.2%)     0  (0.0%,  0.0%)     4,146  (0.0%, 99.4%)      7  (0.0%, 92.6%)      0  (0.0%, 95.7%)    526,361  (2.3%, 98.6%)   1,074  (0.7%, 89.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm_4(unsigned char*, signed char*, int volatile*, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  4,199,491  (1.8%, 99.2%) 291 (11.8%, 13.8%) 274 (11.4%, 13.4%)  2,099,382  (2.3%, 99.4%)   235  (0.6%, 63.8%)    10  (0.1%,  0.1%)       569  (0.0%, 99.4%)     28  (0.1%, 92.7%)     13  (0.0%, 95.7%)        182  (0.0%, 98.6%)      49  (0.0%, 89.9%) 2,098,815 (99.8%, 99.8%) 260 (19.7%, 19.7%)  ???:???

>    682,161  (0.3%, 99.5%)  13  (0.5%, 14.3%)  13  (0.5%, 14.0%)    136,200  (0.1%, 99.6%) 2,008  (5.1%, 68.8%) 1,686 (21.8%, 21.9%)    42,571  (0.1%, 99.5%)     20  (0.1%, 92.8%)      3  (0.0%, 95.8%)    103,337  (0.4%, 99.1%)   2,671  (1.7%, 91.7%)         0  (0.0%, 99.8%)   0  (0.0%, 19.7%)  _dl_lookup_symbol_x:
     494,566  (0.2%)          2  (0.1%)          2  (0.1%)            82,107  (0.1%)        1,982  (5.0%)        1,685 (21.8%)                0                     0                     0                    82,107  (0.4%)          1,964  (1.3%)                0                  0                   ./elf/../sysdeps/generic/dl-new-hash.h

>    524,624  (0.2%, 99.7%)  36  (1.5%, 15.8%)  36  (1.5%, 15.5%)    182,316  (0.2%, 99.8%) 4,233 (10.7%, 79.6%)   885 (11.4%, 33.4%)    69,085  (0.2%, 99.7%)     77  (0.2%, 93.0%)     38  (0.1%, 95.9%)     75,951  (0.3%, 99.4%)   5,863  (3.8%, 95.5%)       169  (0.0%, 99.8%)   5  (0.4%, 20.0%)  do_lookup_x:
     507,340  (0.2%)         36  (1.5%)         36  (1.5%)           180,394  (0.2%)        4,233 (10.7%)          885 (11.4%)           69,079  (0.2%)            77  (0.2%)            38  (0.1%)            74,032  (0.3%)          5,863  (3.8%)              166  (0.0%)          3  (0.2%)           ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/rand.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/rand.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp
--------------------------------------------------------------------------------
Ir_______________ I1mr____ ILmr____ Dr______________ D1mr_________ DLmr Dw____________ D1mw____ DLmw Bc____________ Bcm_________ Bi Bim 

         .        .        .                .            .            .       .        .           .       .            .         .   .  #include "bttd.hpp"
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         .        .        .                .            .            .       .        .           .       .            .         .   .  //sector{1,2,3,4}-1;
        10 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       7 (0.0%) 0           0       0            0         0   0  void new_mvm(pcm_size_t*matrix,input_size_t*vector,volatile int*volatile layers,int*sectors,int64_t*result ){
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%) 0           0       0            0         0   0      ++computations;
         5 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       1 (0.0%) 0           0       0            0         0   0      memset(result,0,512*8);
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%) 0           0       0            0         0   0      int s=0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     0            0       0        0           0       5 (0.0%)     4 (0.0%)  0   0      while(sectors[s]!=-1){
         .        .        .                .            .            .       .        .           .       .            .         .   .          
     1,552 (0.0%) 1 (0.0%) 1 (0.0%)     1,028 (0.0%)     0            0       4 (0.0%) 0           0     516 (0.0%)     9 (0.0%)  0   0          for(int y=0;y<tile_size;++y){
   788,480 (0.3%) 0        0          524,800 (0.6%)     0            0     512 (0.0%) 0           0 262,656 (1.1%)   523 (0.3%)  0   0              for(int x=0;x<max_x;++x){
   262,144 (0.1%) 0        0                0            0            0 262,144 (0.9%) 0           0       0            0         0   0                  int l=0;
   262,144 (0.1%) 0        0                0            0            0 262,144 (0.9%) 0           0       0            0         0   0                  uint64_t wheight=0;
 8,126,464 (3.4%) 1 (0.0%) 1 (0.0%) 2,359,296 (2.5%)     0            0       0        0           0 786,432 (3.4%)    17 (0.0%)  0   0                  while(layers[l]!=-1){
11,010,048 (4.6%) 1 (0.0%) 1 (0.0%) 5,767,168 (6.2%) 8,197 (20.8%)    0 524,288 (1.7%) 0           0       0            0         0   0                      wheight+=matrix[m_inedx(sectors[s],layers[l],y,x)];
   524,288 (0.2%) 0        0          524,288 (0.6%)     0            0       0        0           0       0            0         0   0                      ++l;
         .        .        .                .            .            .       .        .           .       .            .         .   .                  }
10,485,760 (4.4%) 1 (0.0%) 1 (0.0%) 3,932,160 (4.2%)    69  (0.2%)    0 262,144 (0.9%) 0           0       0            0         0   0                  result[sectors[s]*128+y]+=wheight*vector[x];
         .        .        .                .            .            .       .        .           .       .            .         .   .              }
         .        .        .                .            .            .       .        .           .       .            .         .   .          }
         .        .        .                .            .            .       .        .           .       .            .         .   .              
         4 (0.0%) 0        0                4 (0.0%)     0            0       0        0           0       0            0         0   0          s++;
         .        .        .                .            .            .       .        .           .       .            .         .   .      }
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         5 (0.0%) 0        0                3 (0.0%)     0            0       0        0           0       0            0         0   0  }
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         .        .        .                .            .            .       .        .           .       .            .         .   .  void new_mvm_2(pcm_size_t*matrix,input_size_t*vector,volatile int*volatile layers,int*sectors,int64_t*result ){
         .        .        .                .            .            .       .        .           .       .            .         .   .      ++computations;
         .        .        .                .            .            .       .        .           .       .            .         .   .      memset(result,0,512*8);
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         .        .        .                .            .            .       .        .           .       .            .         .   .      int s=0;
         .        .        .                .            .            .       .        .           .       .            .         .   .      while(sectors[s]!=-1){
         .        .        .                .            .            .       .        .           .       .            .         .   .          
-- line 34 ----------------------------------------
-- line 44 ----------------------------------------
         .        .        .                .            .            .       .        .           .       .            .         .   .              }
         .        .        .                .            .            .       .        .           .       .            .         .   .          }
         .        .        .                .            .            .       .        .           .       .            .         .   .              
         .        .        .                .            .            .       .        .           .       .            .         .   .          s++;
         .        .        .                .            .            .       .        .           .       .            .         .   .      }
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         .        .        .                .            .            .       .        .           .       .            .         .   .  }
         .        .        .                .            .            .       .        .           .       .            .         .   .  
        10 (0.0%) 2 (0.1%) 2 (0.1%)         0            0            0       7 (0.0%) 0           0       0            0         0   0  void new_mvm_3(pcm_size_t* matrix, input_size_t* vector, volatile int* volatile layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%) 0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%) 0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%) 0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     0            0       0        0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     0            0       4 (0.0%) 0           0       0            0         0   0          int s = sectors[s_idx];
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%) 0           0       0            0         0   0          int l_idx = 0;
       124 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     8  (0.0%)    0       0        0           0      12 (0.0%)     7 (0.0%)  0   0          while (layers[l_idx] != -1) {
        56 (0.0%) 0        0               24 (0.0%)     0            0       8 (0.0%) 0           0       0            0         0   0              int l = layers[l_idx];
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         .        .        .                .            .            .       .        .           .       .            .         .   .              
        72 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0      16 (0.0%) 7 (0.0%)    0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .        .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%) 0           0   1,032 (0.0%)    14 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
    10,240 (0.0%) 1 (0.0%) 1 (0.0%)     3,072 (0.0%)     0            0   1,024 (0.0%) 0           0       0            0         0   0                  int64_t* result_row_ptr = &result[s * 128 + y];
         .        .        .                .            .            .       .        .           .       .            .         .   .  
 1,576,960 (0.7%) 0        0        1,049,600 (1.1%)     0            0   1,024 (0.0%) 0           0 525,312 (2.3%) 1,047 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
 2,097,152 (0.9%) 0        0        1,048,576 (1.1%) 8,197 (20.8%)    0 524,288 (1.7%) 0           0       0            0         0   0                      uint64_t wheight = *matrix_base; 
 7,340,032 (3.1%) 0        0        3,670,016 (4.0%)   125  (0.3%)    0 524,288 (1.7%) 0           0       0            0         0   0                      *result_row_ptr += wheight * vector[x];
         .        .        .                .            .            .       .        .           .       .            .         .   .                      
   524,288 (0.2%) 0        0          524,288 (0.6%)     0            0       0        0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .        .           .       .            .         .   .                  }
         .        .        .                .            .            .       .        .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0        0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .        .           .       .            .         .   .          }
         4 (0.0%) 0        0                4 (0.0%)     0            0       0        0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .        .           .       .            .         .   .      }
         5 (0.0%) 0        0                3 (0.0%)     0            0       0        0           0       0            0         0   0  }
         .        .        .                .            .            .       .        .           .       .            .         .   .  
        10 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       7 (0.0%) 0           0       0            0         0   0  void new_mvm_4(pcm_size_t* matrix, input_size_t* vector, volatile int* volatile layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%) 0           0       0            0         0   0      ++computations;
         5 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       1 (0.0%) 0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%) 0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 2 (0.1%) 2 (0.1%)        15 (0.0%)     0            0       0        0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 0        0               12 (0.0%)     0            0       4 (0.0%) 0           0       0            0         0   0          int s = sectors[s_idx];
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%) 0           0       0            0         0   0          int l_idx = 0;
       124 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     8  (0.0%)    0       0        0           0      12 (0.0%)     7 (0.0%)  0   0          while (layers[l_idx] != -1) {
        56 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0       8 (0.0%) 0           0       0            0         0   0              int l = layers[l_idx];
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         .        .        .                .            .            .       .        .           .       .            .         .   .              
        72 (0.0%) 0        0               24 (0.0%)     0            0      16 (0.0%) 7 (0.0%)    0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .        .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%) 0           0   1,032 (0.0%)    14 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
    10,240 (0.0%) 1 (0.0%) 1 (0.0%)     3,072 (0.0%)     0            0   1,024 (0.0%) 0           0       0            0         0   0                  int64_t* result_row_ptr = &result[s * 128 + y];
     1,024 (0.0%) 0        0                0            0            0   1,024 (0.0%) 0           0       0            0         0   0                  int64_t row_sum = 0;
         .        .        .                .            .            .       .        .           .       .            .         .   .  
 1,576,960 (0.7%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.1%)     0            0   1,024 (0.0%) 0           0 525,312 (2.3%) 1,049 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .        .           .       .            .         .   .                      
 6,291,456 (2.6%) 0        0        3,145,728 (3.4%) 8,197 (20.8%)    0       0        0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
         .        .        .                .            .            .       .        .           .       .            .         .   .                      
   524,288 (0.2%) 0        0          524,288 (0.6%)     0            0       0        0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .        .           .       .            .         .   .                  }
    22,528 (0.0%) 0        0            8,192 (0.0%)   124  (0.3%)    0   1,024 (0.0%) 0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
         .        .        .                .            .            .       .        .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0        0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .        .           .       .            .         .   .          }
         4 (0.0%) 0        0                4 (0.0%)     0            0       0        0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .        .           .       .            .         .   .      }
         5 (0.0%) 0        0                3 (0.0%)     0            0       0        0           0       0            0         0   0  }
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         .        .        .                .            .            .       .        .           .       .            .         .   .  
         .        .        .                .            .            .       .        .           .       .            .         .   .  void acc_test(pcm_size_t*matrix,volatile int*volatile layers,int*sectors){
         .        .        .                .            .            .       .        .           .       .            .         .   .      int s=0;
         .        .        .                .            .            .       .        .           .       .            .         .   .      while(sectors[s]!=-1){
         .        .        .                .            .            .       .        .           .       .            .         .   .          int l=0;
         .        .        .                .            .            .       .        .           .       .            .         .   .          while(layers[l]!=-1){
         .        .        .                .            .            .       .        .           .       .            .         .   .              for(int y=0;y<tile_size;++y){
-- line 122 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp
--------------------------------------------------------------------------------
Ir______________ I1mr____ ILmr____ Dr______________ D1mr DLmr Dw______________ D1mw DLmw Bc Bcm Bi Bim 

-- line 2 ----------------------------------------
        .        .        .                .           .    .         .           .    .  .   .  .   .  #define BTTD_H
        .        .        .                .           .    .         .           .    .  .   .  .   .  //Back To The Drawingboard
        .        .        .                .           .    .         .           .    .  .   .  .   .  #include "matrix_multisec.hpp"
        .        .        .                .           .    .         .           .    .  .   .  .   .  
        .        .        .                .           .    .         .           .    .  .   .  .   .  extern unsigned int computations; 
        .        .        .                .           .    .         .           .    .  .   .  .   .  
        .        .        .                .           .    .         .           .    .  .   .  .   .  #define PREFETCH_DISTANCE 32
        .        .        .                .           .    .         .           .    .  .   .  .   .  
3,670,128 (1.5%) 1 (0.0%) 1 (0.0%)         0           0    0 2,621,520 (8.6%)    0    0  0   0  0   0  inline long long m_inedx(int s,int l,int y,int x){
6,815,952 (2.9%) 1 (0.0%) 1 (0.0%) 2,097,216 (2.3%)    0    0         0           0    0  0   0  0   0      return (((s*8+l)*128+y)*512)+x;
1,048,608 (0.4%) 0        0        1,048,608 (1.1%)    0    0         0           0    0  0   0  0   0  }
        .        .        .                .           .    .         .           .    .  .   .  .   .  
        .        .        .                .           .    .         .           .    .  .   .  .   .  inline long long m_inedx_2(int s,int l,int y,int x){
        .        .        .                .           .    .         .           .    .  .   .  .   .      return (((s*128+y)*512+x)*8)+l;
        .        .        .                .           .    .         .           .    .  .   .  .   .  }
        .        .        .                .           .    .         .           .    .  .   .  .   .  
        .        .        .                .           .    .         .           .    .  .   .  .   .  /**
        .        .        .                .           .    .         .           .    .  .   .  .   .   * |L0(0),L1(0),L2(0),.......
        .        .        .                .           .    .         .           .    .  .   .  .   .   */
-- line 20 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp
--------------------------------------------------------------------------------
Ir_______________ I1mr____ ILmr____ Dr________________ D1mr____ DLmr____ Dw_______________ D1mw__________ DLmw__________ Bc______________ Bcm______ Bi Bim 

-- line 56 ----------------------------------------
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  void mtd_mvm_2_time_test(int8_t ***** matrix, int8_t *vector, int sector);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  void mtd_mvm_2_1_test(int8_t ***** matrix, int8_t *vector, int sector);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  void comparison_test(int8_t ***** matrix, int8_t * vector, int sector);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  void data(int8_t ***** matrix, int8_t * vector);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  void flat_data(int8_t* matrix,int8_t * vector);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
        42 (0.0%) 1 (0.0%) 1 (0.0%)          6  (0.0%) 3 (0.0%) 0               12  (0.0%)      0              0                 0         0         0   0  double cpuSecond() {
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    struct timespec ts;
        24 (0.0%) 0        0                 0         0        0                6  (0.0%)      0              0                 0         0         0   0    timespec_get(&ts, TIME_UTC);
        54 (0.0%) 0        0                18  (0.0%) 4 (0.0%) 1 (0.0%)         0              0              0                 0         0         0   0    return ((double)ts.tv_sec + (double)ts.tv_nsec * 1.e-9);
        30 (0.0%) 0        0                24  (0.0%) 0        0                0              0              0                 6 (0.0%)  3 (0.0%)  0   0  }
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
        21 (0.0%) 2 (0.1%) 2 (0.1%)          0         0        0                4  (0.0%)      0              0                 0         0         0   0  Logger logger("logs.txt");
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         9 (0.0%) 2 (0.1%) 2 (0.1%)          1  (0.0%) 0        0                4  (0.0%)      0              0                 0         0         0   0  int main(int args,char ** argv){
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    // scattered_matrix();
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    // new_mvm_test();
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    // exit(0); 
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    uint64_t size;
         3 (0.0%) 0        0                 0         0        0                2  (0.0%)      0              0                 0         0         0   0    input_size_t * vector = new input_size_t[max_vect];
         9 (0.0%) 1 (0.0%) 1 (0.0%)          1  (0.0%) 0        0                2  (0.0%)      0              0                 0         0         0   0    std::cout<<"befre alloc: " << std::endl;
         4 (0.0%) 0        0                 0         0        0                2  (0.0%)      0              0                 0         0         0   0    pcm_size_t * f = flat(&size); 
         3 (0.0%) 0        0                 0         0        0                2  (0.0%)      0              0                 0         0         0   0    int64_t * result = new int64_t[max_vect];
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         4 (0.0%) 1 (0.0%) 1 (0.0%)          0         0        0                2  (0.0%)      0              0                 0         0         0   0    srand(time(nullptr));
         1 (0.0%) 0        0                 0         0        0                1  (0.0%)      0              0                 0         0         0   0    int range = INT8_MAX - INT8_MIN + 1;
     1,540 (0.0%) 0        0             1,025  (0.0%) 0        0                1  (0.0%)      0              0               513 (0.0%)  5 (0.0%)  0   0    for(int i=0;i<512;i++){
     5,632 (0.0%) 0        0             1,536  (0.0%) 0        0            1,024  (0.0%)      7  (0.0%)      7  (0.0%)         0         0         0   0      vector[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .        .        .                 .         .        .                .              .              .                 .         .         .   .      
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    }
       772 (0.0%) 1 (0.0%) 1 (0.0%)        513  (0.0%) 0        0                1  (0.0%)      0              0               257 (0.0%) 10 (0.0%)  0   0    for(int i=0;i<256;i++){
     1,536 (0.0%) 0        0               512  (0.0%) 0        0              256  (0.0%)     32  (0.1%)     32  (0.1%)         0         0         0   0      result[i]=0;
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    }
10,485,766 (4.4%) 2 (0.1%) 2 (0.1%)  6,291,458  (6.8%) 0        0                1  (0.0%)      0              0         2,097,153 (9.0%)  8 (0.0%)  0   0    for(long long i=0;i<size;++i){
20,971,520 (8.8%) 0        0         6,291,456  (6.8%) 0        0        4,194,304 (13.8%) 32,768 (92.5%) 32,768 (95.6%)         0         0         0   0      f[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
18,874,368 (7.9%) 0        0        10,485,760 (11.3%) 0        0        2,097,152  (6.9%)      0              0                 0         0         0   0      f[i]&= 0x0F;
         .        .        .                 .         .        .                .              .              .                 .         .         .   .      ///std::cout<<static_cast<int32_t>(f[i]);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    }
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         3 (0.0%) 0        0                 0         0        0                2  (0.0%)      1  (0.0%)      0                 0         0         0   0    int* sector = new int[4+1];
         3 (0.0%) 0        0                 0         0        0                2  (0.0%)      0              0                 0         0         0   0    int*layer =new int[8+1];
        44 (0.0%) 1 (0.0%) 1 (0.0%)         21  (0.0%) 0        0                5  (0.0%)      0              0                 5 (0.0%)  3 (0.0%)  0   0    for(int i=0;i<4;++i)sector[i]=i;
         3 (0.0%) 0        0                 1  (0.0%) 0        0                1  (0.0%)      0              0                 0         0         0   0    sector[4]=-1;
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         2 (0.0%) 0        0                 1  (0.0%) 0        0                1  (0.0%)      0              0                 0         0         0   0    layer[0]=0;
         3 (0.0%) 0        0                 1  (0.0%) 0        0                1  (0.0%)      0              0                 0         0         0   0    layer[1]=7;
         3 (0.0%) 1 (0.0%) 1 (0.0%)          1  (0.0%) 0        0                1  (0.0%)      0              0                 0         0         0   0    layer[2]=-1;
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         3 (0.0%) 0        0                 0         0        0                2  (0.0%)      0              0                 0         0         0   0    double start = cpuSecond();
         8 (0.0%) 0        0                 5  (0.0%) 0        0                1  (0.0%)      0              0                 0         0         0   0    new_mvm(f,vector,layer,sector,result);
         3 (0.0%) 0        0                 0         0        0                2  (0.0%)      1  (0.0%)      0                 0         0         0   0    double end = cpuSecond();
        21 (0.0%) 2 (0.1%) 2 (0.1%)          3  (0.0%) 0        0                4  (0.0%)      0              0                 0         0         0   0    std::cout << "Time taken std: " << (end - start) << " seconds" << std::endl;
         3 (0.0%) 0        0                 0         0        0                2  (0.0%)      0              0                 0         0         0   0    start = cpuSecond();
         8 (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 1 (0.0%) 0                1  (0.0%)      0              0                 0         0         0   0    new_mvm_3(f,vector,layer,sector,result);
         3 (0.0%) 0        0                 0         0        0                2  (0.0%)      1  (0.0%)      0                 0         0         0   0    end = cpuSecond();
        21 (0.0%) 1 (0.0%) 1 (0.0%)          3  (0.0%) 0        0                4  (0.0%)      0              0                 0         0         0   0    std::cout << "Time taken 3: " << (end - start) << " seconds" << std::endl;
         3 (0.0%) 1 (0.0%) 1 (0.0%)          0         0        0                2  (0.0%)      0              0                 0         0         0   0    start = cpuSecond();
         8 (0.0%) 0        0                 5  (0.0%) 1 (0.0%) 0                1  (0.0%)      0              0                 0         0         0   0    new_mvm_4(f,vector,layer,sector,result);
         3 (0.0%) 0        0                 0         0        0                2  (0.0%)      1  (0.0%)      0                 0         0         0   0    end = cpuSecond();
        21 (0.0%) 2 (0.1%) 2 (0.1%)          3  (0.0%) 0        0                4  (0.0%)      0              0                 0         0         0   0    std::cout << "Time taken 4: " << (end - start) << " seconds" << std::endl;
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         5 (0.0%) 0        0                 2  (0.0%) 1 (0.0%) 0                1  (0.0%)      0              0                 1 (0.0%)  1 (0.0%)  0   0    delete[] vector;
         5 (0.0%) 0        0                 2  (0.0%) 0        0                1  (0.0%)      0              0                 1 (0.0%)  1 (0.0%)  0   0    delete[] f;
         5 (0.0%) 1 (0.0%) 1 (0.0%)          2  (0.0%) 0        0                1  (0.0%)      0              0                 1 (0.0%)  0         0   0    delete[] result;
         5 (0.0%) 0        0                 2  (0.0%) 0        0                1  (0.0%)      0              0                 1 (0.0%)  0         0   0    delete[] sector;
         5 (0.0%) 0        0                 2  (0.0%) 0        0                1  (0.0%)      0              0                 1 (0.0%)  0         0   0    delete[] layer;
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         1 (0.0%) 0        0                 0         0        0                0              0              0                 0         0         0   0    return 0;
         5 (0.0%) 1 (0.0%) 1 (0.0%)          4  (0.0%) 0        0                0              0              0                 1 (0.0%)  1 (0.0%)  0   0  }
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  void scattered_matrix(){
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    uint64_t size;
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    input_size_t * vector = new input_size_t[max_vect];
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    std::cout<<"befre alloc: " << std::endl;
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    pcm_size_t * f = flat(&size); 
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    int64_t * result = new int64_t[max_vect];
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
-- line 143 ----------------------------------------
-- line 684 ----------------------------------------
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    fclose(mtd_32);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    fclose(mtd_64);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    fclose(mtd_128);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .    fclose(mtd_512);
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
        23 (0.0%) 2 (0.1%) 2 (0.1%)          8  (0.0%) 0        0                6  (0.0%)      0              0                 1 (0.0%)  1 (0.0%)  0   0  }
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  
         .        .        .                 .         .        .                .              .              .                 .         .         .   .  

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_________________ I1mr_________ ILmr_________ Dr________________ D1mr__________ DLmr_________ Dw________________ D1mw__________ DLmw__________ Bc________________ Bcm____________ Bi_______________ Bim__________ 

113,319,293 (47.4%)    47  (1.9%)    47  (2.0%) 50,357,769 (54.2%) 24,938 (63.2%)     1  (0.0%) 11,280,413 (37.2%) 32,825 (92.6%) 32,807 (95.7%)  4,200,272 (18.0%)   2,732  (1.8%)         0             0            annotated: files known & above threshold & readable, line numbers known
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0            annotated: files known & above threshold & readable, line numbers unknown
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0          unannotated: files known & above threshold & two or more non-identical
120,809,256 (50.5%)    69  (2.8%)    69  (2.9%) 40,210,900 (43.3%)  6,765 (17.1%) 2,845 (36.8%) 19,004,891 (62.6%)    116  (0.3%)     45  (0.1%) 19,003,239 (81.4%) 143,993 (93.8%)       166  (0.0%)     3  (0.2%)  unannotated: files known & above threshold & unreadable 
    650,938  (0.3%) 1,675 (68.0%) 1,633 (68.0%)    163,427  (0.2%)  7,354 (18.6%) 4,858 (62.8%)     60,491  (0.2%)  2,310  (6.5%)  1,306  (3.8%)    122,453  (0.5%)   6,319  (4.1%)     4,244  (0.2%) 1,042 (78.8%)  unannotated: files known & below threshold
  4,226,264  (1.8%)   672 (27.3%)   654 (27.2%)  2,106,123  (2.3%)    414  (1.0%)    26  (0.3%)      4,454  (0.0%)    180  (0.5%)    121  (0.4%)      5,260  (0.0%)     502  (0.3%) 2,098,857 (99.8%)   278 (21.0%)  unannotated: files unknown

