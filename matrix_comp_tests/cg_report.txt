--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate --show-percs=yes cg.out
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         49152 B, 64 B, 12-way associative
LL cache:         25165824 B, 64 B, 12-way associative
Command:          ./matrix_tests
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ I1mr__________ ILmr__________ Dr__________________ D1mr___________ DLmr__________ Dw_________________ D1mw___________ DLmw___________ Bc_________________ Bcm_____________ Bi________________ Bim___________ 

266,963,032 (100.0%) 3,507 (100.0%) 2,819 (100.0%) 108,699,833 (100.0%) 64,595 (100.0%) 7,804 (100.0%) 30,451,138 (100.0%) 36,773 (100.0%) 34,927 (100.0%) 24,956,838 (100.0%) 157,722 (100.0%) 2,104,361 (100.0%) 1,300 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr______________ ILmr______________ Dr_______________________ D1mr_________________ DLmr________________ Dw______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  file:function

< 79,064,780 (29.6%, 29.6%)  71  (2.0%,  2.0%)  70  (2.5%,  2.5%) 39,900,822 (36.7%, 36.7%) 49,706 (77.0%, 77.0%)     0  (0.0%,  0.0%) 2,384,139  (7.8%,  7.8%)    206  (0.6%,  0.6%)      0  (0.0%,  0.0%)  3,684,556 (14.8%, 14.8%)   5,956  (3.8%,  3.8%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp:
  33,820,273 (12.7%)          8  (0.2%)          8  (0.3%)        14,681,640 (13.5%)         8,260 (12.8%)            0                1,311,250  (4.3%)             0                     0                 1,049,609  (4.2%)            555  (0.4%)                0                  0                   new_mvm(unsigned char*, signed char*, int**, int*, long*)
  11,552,213  (4.3%)          6  (0.2%)          6  (0.2%)         6,297,776  (5.8%)         8,338 (12.9%)            0                1,050,674  (3.5%)             0                     0                   526,361  (2.1%)          1,069  (0.7%)                0                  0                   new_mvm_3(unsigned char*, signed char*, int**, int*, long*)
   8,419,725  (3.2%)          7  (0.2%)          7  (0.2%)         4,730,004  (4.4%)         8,335 (12.9%)            0                    3,126  (0.0%)             0                     0                   526,361  (2.1%)          1,070  (0.7%)                0                  0                   new_mvm_4(unsigned char*, signed char*, int**, int*, long*)
   8,419,688  (3.2%)          5  (0.1%)          5  (0.2%)         4,729,980  (4.4%)         8,341 (12.9%)            0                    3,140  (0.0%)             4  (0.0%)             0                   526,356  (2.1%)          1,064  (0.7%)                0                  0                   multi_thread_sector(int, unsigned char*, signed char*, int**, long*)
   8,411,440  (3.2%)          4  (0.1%)          4  (0.1%)         4,726,864  (4.3%)         8,214 (12.7%)            0                    5,248  (0.0%)             0                     0                   526,352  (2.1%)          1,061  (0.7%)                0                  0                   multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int, int)
   8,410,232  (3.2%)          3  (0.1%)          3  (0.1%)         4,725,784  (4.3%)         8,200 (12.7%)            0                    5,168  (0.0%)             8  (0.0%)             0                   526,344  (2.1%)          1,055  (0.7%)                0                  0                   multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*)

< 58,673,138 (22.0%, 51.6%)   8  (0.2%,  2.3%)   8  (0.3%,  2.8%) 16,783,177 (15.4%, 52.1%)      1  (0.0%, 77.0%)     0  (0.0%,  0.0%) 8,391,308 (27.6%, 35.4%)      3  (0.0%,  0.6%)      1  (0.0%,  0.0%) 10,421,618 (41.8%, 56.5%) 135,361 (85.8%, 89.6%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random_r.c:
  58,666,926 (22.0%)          3  (0.1%)          3  (0.1%)        16,781,312 (15.4%)             0                    0                8,390,656 (27.6%)             0                     0                10,420,654 (41.8%)        135,335 (85.8%)                0                  0                   random_r

< 50,341,495 (18.9%, 70.5%)  23  (0.7%,  2.9%)  19  (0.7%,  3.4%) 23,072,391 (21.2%, 73.4%)      7  (0.0%, 77.0%)     0  (0.0%,  0.0%) 6,292,811 (20.7%, 56.1%) 32,807 (89.2%, 89.8%) 32,807 (93.9%, 93.9%)  2,097,940  (8.4%, 64.9%)      31  (0.0%, 89.6%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp:
  50,341,439 (18.9%)         16  (0.5%)         13  (0.5%)        23,072,382 (21.2%)             7  (0.0%)            0                6,292,795 (20.7%)        32,807 (89.2%)        32,807 (93.9%)         2,097,939  (8.4%)             30  (0.0%)                0                  0                   cache_grind_prf()

< 48,246,292 (18.1%, 88.5%)   5  (0.1%,  3.1%)   5  (0.2%,  3.6%) 18,878,982 (17.4%, 90.7%)      1  (0.0%, 77.0%)     1  (0.0%,  0.0%) 6,292,995 (20.7%, 76.7%)      0  (0.0%, 89.8%)      0  (0.0%, 93.9%)  8,390,659 (33.6%, 98.5%)       0  (0.0%, 89.6%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random.c:
  48,246,272 (18.1%)          3  (0.1%)          3  (0.1%)        18,878,976 (17.4%)             0                    0                6,292,992 (20.7%)             0                     0                 8,390,656 (33.6%)              0                        0                  0                   random

< 12,585,984  (4.7%, 93.2%)   1  (0.0%,  3.1%)   1  (0.0%,  3.7%)  4,195,328  (3.9%, 94.6%)      0  (0.0%, 77.0%)     0  (0.0%,  0.0%) 4,195,328 (13.8%, 90.5%)      0  (0.0%, 89.8%)      0  (0.0%, 93.9%)          0  (0.0%, 98.5%)       0  (0.0%, 89.6%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/rand.c:rand

< 11,535,392  (4.3%, 97.6%)   2  (0.1%,  3.1%)   1  (0.0%,  3.7%)  3,146,016  (2.9%, 97.5%)      0  (0.0%, 77.0%)     0  (0.0%,  0.0%) 2,621,680  (8.6%, 99.1%)     15  (0.0%, 89.8%)      0  (0.0%, 93.9%)          0  (0.0%, 98.5%)       0  (0.0%, 89.6%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp:m_inedx(int, int, int, int)

<  4,227,533  (1.6%, 99.1%) 708 (20.2%, 23.3%) 631 (22.4%, 26.1%)  2,106,618  (1.9%, 99.4%)    479  (0.7%, 77.7%)    26  (0.3%,  0.3%)     4,467  (0.0%, 99.1%)    168  (0.5%, 90.3%)    121  (0.3%, 94.3%)      5,191  (0.0%, 98.6%)     461  (0.3%, 89.9%) 2,099,499 (99.8%, 99.8%) 263 (20.2%, 20.2%)  ???:
   4,200,913  (1.6%)        335  (9.6%)        271  (9.6%)         2,100,149  (1.9%)           359  (0.6%)           10  (0.1%)              614  (0.0%)            21  (0.1%)            13  (0.0%)               173  (0.0%)             51  (0.0%)        2,099,478 (99.8%)        252 (19.4%)           ???

<    813,655  (0.3%, 99.4%)  80  (2.3%, 25.6%)  53  (1.9%, 28.0%)    272,760  (0.3%, 99.7%)  3,948  (6.1%, 83.8%) 1,169 (15.0%, 15.3%)   125,949  (0.4%, 99.5%)     92  (0.3%, 90.5%)     45  (0.1%, 94.4%)    109,445  (0.4%, 99.0%)   6,721  (4.3%, 94.2%)       166  (0.0%, 99.8%)   3  (0.2%, 20.5%)  ./elf/./elf/dl-lookup.c:
     509,919  (0.2%)         50  (1.4%)         36  (1.3%)           181,303  (0.2%)         3,397  (5.3%)          886 (11.4%)           69,435  (0.2%)            65  (0.2%)            40  (0.1%)            74,410  (0.3%)          5,905  (3.7%)              166  (0.0%)          3  (0.2%)           do_lookup_x

<    497,428  (0.2%, 99.6%)   5  (0.1%, 25.7%)   2  (0.1%, 28.0%)     82,582  (0.1%, 99.8%)  1,927  (3.0%, 86.8%) 1,694 (21.7%, 37.0%)         0  (0.0%, 99.5%)      0  (0.0%, 90.5%)      0  (0.0%, 94.4%)     82,582  (0.3%, 99.3%)   1,977  (1.3%, 95.4%)         0  (0.0%, 99.8%)   0  (0.0%, 20.5%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr_____________ ILmr_____________ Dr_______________________ D1mr________________ DLmr________________ Dw______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  function:file

> 58,666,926 (22.0%, 22.0%)   3 (0.1%,  0.1%)   3 (0.1%,  0.1%) 16,781,312 (15.4%, 15.4%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 8,390,656 (27.6%, 27.6%)      0  (0.0%,  0.0%)      0  (0.0%,  0.0%) 10,420,654 (41.8%, 41.8%) 135,335 (85.8%, 85.8%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random_r:./stdlib/./stdlib/random_r.c

> 50,341,439 (18.9%, 40.8%)  16 (0.5%,  0.5%)  13 (0.5%,  0.6%) 23,072,382 (21.2%, 36.7%)     7  (0.0%,  0.0%)     0  (0.0%,  0.0%) 6,292,795 (20.7%, 48.2%) 32,807 (89.2%, 89.2%) 32,807 (93.9%, 93.9%)  2,097,939  (8.4%, 50.2%)      30  (0.0%, 85.8%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  cache_grind_prf():/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp

> 48,246,272 (18.1%, 58.9%)   3 (0.1%,  0.6%)   3 (0.1%,  0.7%) 18,878,976 (17.4%, 54.0%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 6,292,992 (20.7%, 68.9%)      0  (0.0%, 89.2%)      0  (0.0%, 93.9%)  8,390,656 (33.6%, 83.8%)       0  (0.0%, 85.8%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random:./stdlib/./stdlib/random.c

> 33,820,273 (12.7%, 71.6%)   8 (0.2%,  0.9%)   8 (0.3%,  1.0%) 14,681,640 (13.5%, 67.5%) 8,260 (12.8%, 12.8%)     0  (0.0%,  0.0%) 1,311,250  (4.3%, 73.2%)      0  (0.0%, 89.2%)      0  (0.0%, 93.9%)  1,049,609  (4.2%, 88.0%)     555  (0.4%, 86.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm(unsigned char*, signed char*, int**, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

> 12,585,984  (4.7%, 76.3%)   1 (0.0%,  0.9%)   1 (0.0%,  1.0%)  4,195,328  (3.9%, 71.4%)     0  (0.0%, 12.8%)     0  (0.0%,  0.0%) 4,195,328 (13.8%, 87.0%)      0  (0.0%, 89.2%)      0  (0.0%, 93.9%)          0  (0.0%, 88.0%)       0  (0.0%, 86.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  rand:./stdlib/./stdlib/rand.c

> 11,552,213  (4.3%, 80.6%)   6 (0.2%,  1.1%)   6 (0.2%,  1.2%)  6,297,776  (5.8%, 77.2%) 8,338 (12.9%, 25.7%)     0  (0.0%,  0.0%) 1,050,674  (3.5%, 90.4%)      0  (0.0%, 89.2%)      0  (0.0%, 93.9%)    526,361  (2.1%, 90.1%)   1,069  (0.7%, 86.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm_3(unsigned char*, signed char*, int**, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

> 11,535,392  (4.3%, 84.9%)   2 (0.1%,  1.1%)   1 (0.0%,  1.2%)  3,146,016  (2.9%, 80.1%)     0  (0.0%, 25.7%)     0  (0.0%,  0.0%) 2,621,680  (8.6%, 99.0%)     15  (0.0%, 89.3%)      0  (0.0%, 93.9%)          0  (0.0%, 90.1%)       0  (0.0%, 86.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  m_inedx(int, int, int, int):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp

>  8,419,725  (3.2%, 88.1%)   7 (0.2%,  1.3%)   7 (0.2%,  1.5%)  4,730,004  (4.4%, 84.4%) 8,335 (12.9%, 38.6%)     0  (0.0%,  0.0%)     3,126  (0.0%, 99.0%)      0  (0.0%, 89.3%)      0  (0.0%, 93.9%)    526,361  (2.1%, 92.2%)   1,070  (0.7%, 87.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm_4(unsigned char*, signed char*, int**, int*, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  8,419,688  (3.2%, 91.2%)   5 (0.1%,  1.5%)   5 (0.2%,  1.7%)  4,729,980  (4.4%, 88.8%) 8,341 (12.9%, 51.5%)     0  (0.0%,  0.0%)     3,140  (0.0%, 99.0%)      4  (0.0%, 89.3%)      0  (0.0%, 93.9%)    526,356  (2.1%, 94.3%)   1,064  (0.7%, 88.2%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  multi_thread_sector(int, unsigned char*, signed char*, int**, long*):/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  8,415,536  (3.2%, 94.4%)   4 (0.1%,  1.6%)   4 (0.1%,  1.8%)  4,730,960  (4.4%, 93.1%) 8,350 (12.9%, 64.4%)     0  (0.0%,  0.0%)     5,248  (0.0%, 99.1%)      0  (0.0%, 89.3%)      0  (0.0%, 93.9%)    527,376  (2.1%, 96.4%)   1,063  (0.7%, 88.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int, int):
   8,411,440  (3.2%)          4 (0.1%)          4 (0.1%)         4,726,864  (4.3%)        8,214 (12.7%)            0                    5,248  (0.0%)             0                     0                   526,352  (2.1%)          1,061  (0.7%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  8,414,328  (3.2%, 97.5%)   3 (0.1%,  1.7%)   3 (0.1%,  1.9%)  4,729,880  (4.4%, 97.5%) 8,328 (12.9%, 77.3%)     0  (0.0%,  0.0%)     5,168  (0.0%, 99.1%)      8  (0.0%, 89.3%)      0  (0.0%, 93.9%)    527,368  (2.1%, 98.5%)   1,055  (0.7%, 89.6%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*):
   8,410,232  (3.2%)          3 (0.1%)          3 (0.1%)         4,725,784  (4.3%)        8,200 (12.7%)            0                    5,168  (0.0%)             8  (0.0%)             0                   526,344  (2.1%)          1,055  (0.7%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>  4,200,913  (1.6%, 99.1%) 335 (9.6%, 11.2%) 271 (9.6%, 11.5%)  2,100,149  (1.9%, 99.4%)   359  (0.6%, 77.9%)    10  (0.1%,  0.1%)       614  (0.0%, 99.1%)     21  (0.1%, 89.3%)     13  (0.0%, 94.0%)        173  (0.0%, 98.5%)      51  (0.0%, 89.6%) 2,099,478 (99.8%, 99.8%) 252 (19.4%, 19.4%)  ???:???

>    686,090  (0.3%, 99.4%)  23 (0.7%, 11.9%)  13 (0.5%, 12.0%)    136,983  (0.1%, 99.6%) 1,946  (3.0%, 80.9%) 1,695 (21.7%, 21.8%)    42,813  (0.1%, 99.2%)     14  (0.0%, 89.4%)      3  (0.0%, 94.0%)    103,933  (0.4%, 99.0%)   2,693  (1.7%, 91.3%)         0  (0.0%, 99.8%)   0  (0.0%, 19.4%)  _dl_lookup_symbol_x:
     497,428  (0.2%)          5 (0.1%)          2 (0.1%)            82,582  (0.1%)        1,927  (3.0%)        1,694 (21.7%)                0                     0                     0                    82,582  (0.3%)          1,977  (1.3%)                0                  0                   ./elf/../sysdeps/generic/dl-new-hash.h

>    527,302  (0.2%, 99.6%)  50 (1.4%, 13.3%)  36 (1.3%, 13.3%)    183,236  (0.2%, 99.7%) 3,397  (5.3%, 86.2%)   886 (11.4%, 33.2%)    69,441  (0.2%, 99.5%)     65  (0.2%, 89.6%)     40  (0.1%, 94.1%)     76,340  (0.3%, 99.3%)   5,905  (3.7%, 95.0%)       169  (0.0%, 99.8%)   5  (0.4%, 19.8%)  do_lookup_x:
     509,919  (0.2%)         50 (1.4%)         36 (1.3%)           181,303  (0.2%)        3,397  (5.3%)          886 (11.4%)           69,435  (0.2%)            65  (0.2%)            40  (0.1%)            74,410  (0.3%)          5,905  (3.7%)              166  (0.0%)          3  (0.2%)           ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/rand.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/rand.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp
--------------------------------------------------------------------------------
Ir_______________ I1mr____ ILmr____ Dr______________ D1mr_________ DLmr Dw____________ D1mw_____ DLmw Bc____________ Bcm_________ Bi Bim 

         .        .        .                .            .            .       .         .           .       .            .         .   .  #include "bttd.hpp"
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  //sector{1,2,3,4}-1;
        10 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       7 (0.0%)  0           0       0            0         0   0  void new_mvm(pcm_size_t*matrix,input_size_t*vector, int* *layers,int*sectors,int64_t*result ){
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result,0,512*8);
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx=0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     0            0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while(sectors[s_idx]!=-1){
        28 (0.0%) 0        0               12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s=sectors[s_idx];
     1,552 (0.0%) 2 (0.1%) 2 (0.1%)     1,028 (0.0%)     0            0       4 (0.0%)  0           0     516 (0.0%)     8 (0.0%)  0   0          for(int y=0;y<tile_size;++y){
   788,480 (0.3%) 0        0          524,800 (0.5%)     0            0     512 (0.0%)  0           0 262,656 (1.1%)   523 (0.3%)  0   0              for(int x=0;x<max_x;++x){
   262,144 (0.1%) 0        0                0            0            0 262,144 (0.9%)  0           0       0            0         0   0                  int l=0;
   262,144 (0.1%) 0        0                0            0            0 262,144 (0.9%)  0           0       0            0         0   0                  uint64_t wheight=0;
10,485,760 (3.9%) 2 (0.1%) 2 (0.1%) 3,932,160 (3.6%)     3  (0.0%)    0       0         0           0 786,432 (3.2%)    20 (0.0%)  0   0                  while(layers[s][l]!=-1){
11,010,048 (4.1%) 0        0        5,767,168 (5.3%) 8,197 (12.7%)    0 524,288 (1.7%)  0           0       0            0         0   0                      wheight+=matrix[m_inedx(s,layers[s][l],y,x)];
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0                      ++l;
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
10,485,760 (3.9%) 1 (0.0%) 1 (0.0%) 3,932,160 (3.6%)    58  (0.1%)    0 262,144 (0.9%)  0           0       0            0         0   0                  result[sectors[s]*128+y]+=wheight*vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         5 (0.0%) 0        0                3 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  void new_mvm_2(pcm_size_t*matrix,input_size_t*vector, int** layers,int*sectors,int64_t*result ){
         .        .        .                .            .            .       .         .           .       .            .         .   .      ++computations;
         .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result,0,512*8);
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .      while(sectors[s_idx]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
-- line 34 ----------------------------------------
-- line 44 ----------------------------------------
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         .        .        .                .            .            .       .         .           .       .            .         .   .          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        10 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       7 (0.0%)  0           0       0            0         0   0  void new_mvm_3(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 0        0               15 (0.0%)     0            0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 0        0               12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s = sectors[s_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
       160 (0.0%) 2 (0.1%) 2 (0.1%)        60 (0.0%)    19  (0.0%)    0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (layers[s][l_idx] != -1) {
        96 (0.0%) 0        0               40 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = layers[s][l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        72 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    12 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
    10,240 (0.0%) 0        0            3,072 (0.0%)     0            0   1,024 (0.0%)  0           0       0            0         0   0                  int64_t* result_row_ptr = &result[s * 128 + y];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,047 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
 2,097,152 (0.8%) 0        0        1,048,576 (1.0%) 8,197 (12.7%)    0 524,288 (1.7%)  0           0       0            0         0   0                      uint64_t wheight = *matrix_base; 
 7,340,032 (2.7%) 0        0        3,670,016 (3.4%)   120  (0.2%)    0 524,288 (1.7%)  0           0       0            0         0   0                      *result_row_ptr += wheight * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         5 (0.0%) 0        0                3 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        10 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       7 (0.0%)  0           0       0            0         0   0  void new_mvm_4(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     5  (0.0%)    0       0         0           0       5 (0.0%)     3 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 0        0               12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s = sectors[s_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       100 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)    11  (0.0%)    0       0         0           0      12 (0.0%)     7 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        56 (0.0%) 0        0               24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = curr_layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        72 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    15 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
     1,024 (0.0%) 0        0                0            0            0   1,024 (0.0%)  0           0       0            0         0   0                  int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,045 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
 6,291,456 (2.4%) 0        0        3,145,728 (2.9%) 8,197 (12.7%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
    22,528 (0.0%) 0        0            8,192 (0.0%)   120  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         5 (0.0%) 0        0                3 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        40 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0      28 (0.0%)  0           0       0            0         0   0  void multi_thread_sector(int s, pcm_size_t* matrix, input_size_t* vector,  int** layers, int64_t* result) {
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     3  (0.0%)    0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       100 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)    12  (0.0%)    0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        56 (0.0%) 0        0               24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = curr_layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        72 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0      16 (0.0%)  4 (0.0%)    0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    14 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
     1,024 (0.0%) 0        0                0            0            0   1,024 (0.0%)  0           0       0            0         0   0                  int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,044 (0.7%)  0   0                  for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
 6,291,456 (2.4%) 0        0        3,145,728 (2.9%) 8,199 (12.7%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .                      
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0                      matrix_base++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  }
    22,528 (0.0%) 0        0            8,192 (0.0%)   127  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
         .        .        .                .            .            .       .         .           .       .            .         .   .              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
        20 (0.0%) 0        0               12 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        13 (0.0%) 2 (0.1%) 2 (0.1%)         1 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0  void new_mvm_mtd_4(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 0        0                1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         3 (0.0%) 0        0                0            0            0       2 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     1  (0.0%)    0       0         0           0       5 (0.0%)     3 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        80 (0.0%) 1 (0.0%) 1 (0.0%)         8 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0          std::thread t(multi_thread_sector, sectors[s_idx], matrix, vector, layers, result);
        32 (0.0%) 0        0                0            0            0       8 (0.0%)  0           0       0            0         0   0          threads.push_back(move(t));
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
        12 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        51 (0.0%) 1 (0.0%) 1 (0.0%)         9 (0.0%)     2  (0.0%)    0       6 (0.0%)  0           0       5 (0.0%)     5 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
        32 (0.0%) 0        0                4 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0          threads[i].join();
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         9 (0.0%) 1 (0.0%) 1 (0.0%)         5 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       1 (0.0%)     1 (0.0%)  0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        56 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0      40 (0.0%)  8 (0.0%)    0       0            0         0   0  void multi_thread_layer( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result) {
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     3,104 (0.0%) 0        0            2,056 (0.0%)     0            0       8 (0.0%)  0           0   1,032 (0.0%)    12 (0.0%)  0   0      for (int y = 0; y < tile_size; ++y) {
     1,024 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0   1,024 (0.0%)  0           0       0            0         0   0          int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,043 (0.7%)  0   0          for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .              
 6,291,456 (2.4%) 0        0        3,145,728 (2.9%) 8,200 (12.7%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0              matrix++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
    13,312 (0.0%) 0        0            4,096 (0.0%)     0            0   3,072 (0.0%)  0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .          
        32 (0.0%) 0        0               16 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        15 (0.0%) 2 (0.1%) 2 (0.1%)         2 (0.0%)     0            0       8 (0.0%)  1 (0.0%)    0       0            0         0   0  void new_mvm_mtd_8(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         3 (0.0%) 0        0                0            0            0       2 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
       517 (0.0%) 0        0                0            0            0     512 (0.0%)  0           0     512 (0.0%)    10 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
     5,636 (0.0%) 1 (0.0%) 1 (0.0%)     1,537 (0.0%)     0            0     513 (0.0%)  0           0     513 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     1  (0.0%)    0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
        28 (0.0%) 0        0               12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s=sectors[s_idx];
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       100 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     3  (0.0%)    0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        56 (0.0%) 0        0               24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = curr_layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       152 (0.0%) 2 (0.1%) 2 (0.1%)        24 (0.0%)     0            0      24 (0.0%)  0           0       0            0         0   0              std::thread t(multi_thread_layer, &matrix[m_inedx(s, l, 0, 0)],s, vector, temp_result);
        64 (0.0%) 0        0                0            0            0      16 (0.0%)  0           0       0            0         0   0              threads.push_back(move(t));
         .        .        .                .            .            .       .         .           .       .            .         .   .              
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
        24 (0.0%) 0        0                0            0            0       8 (0.0%)  0           0       0            0         0   0          }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        91 (0.0%) 2 (0.1%) 2 (0.1%)        17 (0.0%)     2  (0.0%)    0      10 (0.0%)  0           0       9 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
        64 (0.0%) 0        0                8 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0          threads[i].join();
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
     1,540 (0.0%) 1 (0.0%) 1 (0.0%)     1,025 (0.0%)     0            0       1 (0.0%)  0           0     513 (0.0%)     2 (0.0%)  0   0      for(int i=0;i<512;++i){
     6,656 (0.0%) 1 (0.0%) 1 (0.0%)     1,536 (0.0%)     1  (0.0%)    0   1,536 (0.0%) 65 (0.2%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         9 (0.0%) 1 (0.0%) 0                5 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       1 (0.0%)     1 (0.0%)  0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
        15 (0.0%) 2 (0.1%) 2 (0.1%)         2 (0.0%)     1  (0.0%)    0       8 (0.0%)  2 (0.0%)    0       0            0         0   0  void new_mvm_mtd_16(pcm_size_t* matrix, input_size_t* vector,  int** layers, int* sectors, int64_t* result) {
         3 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       0            0         0   0      ++computations;
         5 (0.0%) 1 (0.0%) 1 (0.0%)         1 (0.0%)     0            0       1 (0.0%)  0           0       0            0         0   0      memset(result, 0, 512 * sizeof(int64_t)); 
         3 (0.0%) 0        0                0            0            0       2 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
         1 (0.0%) 0        0                0            0            0       1 (0.0%)  1 (0.0%)    0       0            0         0   0      int thread_count = 2;
       517 (0.0%) 0        0                0            0            0     512 (0.0%) 60 (0.2%)    0     512 (0.0%)    10 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
     5,636 (0.0%) 1 (0.0%) 1 (0.0%)     1,537 (0.0%)     0            0     513 (0.0%)  0           0     513 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .      
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         1 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       1 (0.0%)  0           0       0            0         0   0      int s_idx = 0;
        41 (0.0%) 1 (0.0%) 1 (0.0%)        15 (0.0%)     0            0       0         0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        28 (0.0%) 0        0               12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int s=sectors[s_idx];
         4 (0.0%) 0        0                0            0            0       4 (0.0%)  0           0       0            0         0   0          int l_idx = 0;
        28 (0.0%) 1 (0.0%) 1 (0.0%)        12 (0.0%)     0            0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       100 (0.0%) 1 (0.0%) 1 (0.0%)        36 (0.0%)     0            0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        56 (0.0%) 1 (0.0%) 1 (0.0%)        24 (0.0%)     0            0       8 (0.0%)  0           0       0            0         0   0              int l = curr_layers[l_idx];
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       104 (0.0%) 0        0               64 (0.0%)     0            0       8 (0.0%)  0           0      24 (0.0%)    10 (0.0%)  0   0              for(int i=0;i<thread_count;++i){
        80 (0.0%) 0        0               32 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0                  int y_start = i * (tile_size / thread_count);
       112 (0.0%) 1 (0.0%) 1 (0.0%)        32 (0.0%)     0            0      16 (0.0%)  0           0       0            0         0   0                  int end = (i + 1) * (tile_size / thread_count); 
         .        .        .                .            .            .       .         .           .       .            .         .   .                  
       448 (0.0%) 2 (0.1%) 2 (0.1%)        64 (0.0%)     0            0      80 (0.0%)  0           0       0            0         0   0                  std::thread t(multi_thread_layer_2, &matrix[m_inedx(s, l, 0, 0)+y_start*max_x],s, vector, temp_result,y_start,end);
       128 (0.0%) 0        0                0            0            0      32 (0.0%)  0           0       0            0         0   0                  threads.push_back(move(t));
         .        .        .                .            .            .       .         .           .       .            .         .   .              
        48 (0.0%) 0        0                0            0            0      16 (0.0%)  0           0       0            0         0   0              }
         8 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              l_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         4 (0.0%) 0        0                4 (0.0%)     0            0       0         0           0       0            0         0   0          s_idx++;
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
       171 (0.0%) 2 (0.1%) 2 (0.1%)        33 (0.0%)     1  (0.0%)    0      18 (0.0%)  0           0      17 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
       128 (0.0%) 0        0               16 (0.0%)     0            0      32 (0.0%)  0           0       0            0         0   0          threads[i].join();
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
     1,540 (0.0%) 1 (0.0%) 1 (0.0%)     1,025 (0.0%)     0            0       1 (0.0%)  0           0     513 (0.0%)     3 (0.0%)  0   0      for(int i=0;i<512;++i){
     6,656 (0.0%) 1 (0.0%) 1 (0.0%)     1,536 (0.0%)     0            0   1,536 (0.0%) 65 (0.2%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         9 (0.0%) 0        0                5 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       1 (0.0%)     1 (0.0%)  0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  
       144 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0     112 (0.0%)  0           0       0            0         0   0  void multi_thread_layer_2( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result,int y_start,int end) {
     4,192 (0.0%) 1 (0.0%) 1 (0.0%)     3,120 (0.0%)     0            0      16 (0.0%)  0           0   1,040 (0.0%)    20 (0.0%)  0   0      for (int y = y_start; y < end; ++y) {
     1,024 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0   1,024 (0.0%)  0           0       0            0         0   0          int64_t row_sum = 0;
         .        .        .                .            .            .       .         .           .       .            .         .   .  
 1,576,960 (0.6%) 1 (0.0%) 1 (0.0%) 1,049,600 (1.0%)     0            0   1,024 (0.0%)  0           0 525,312 (2.1%) 1,041 (0.7%)  0   0          for (int x = 0; x < max_x; ++x) {
         .        .        .                .            .            .       .         .           .       .            .         .   .              
 6,291,456 (2.4%) 0        0        3,145,728 (2.9%) 8,214 (12.7%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
         .        .        .                .            .            .       .         .           .       .            .         .   .              
   524,288 (0.2%) 0        0          524,288 (0.5%)     0            0       0         0           0       0            0         0   0              matrix++; 
         .        .        .                .            .            .       .         .           .       .            .         .   .          }
    13,312 (0.0%) 0        0            4,096 (0.0%)     0            0   3,072 (0.0%)  0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
         .        .        .                .            .            .       .         .           .       .            .         .   .      }
         .        .        .                .            .            .       .         .           .       .            .         .   .          
        64 (0.0%) 0        0               32 (0.0%)     0            0       0         0           0       0            0         0   0  }
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  
         .        .        .                .            .            .       .         .           .       .            .         .   .  void acc_test(pcm_size_t*matrix, int* layers,int*sectors){
         .        .        .                .            .            .       .         .           .       .            .         .   .      int s=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .      while(sectors[s]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .          int l=0;
         .        .        .                .            .            .       .         .           .       .            .         .   .          while(layers[l]!=-1){
         .        .        .                .            .            .       .         .           .       .            .         .   .              for(int y=0;y<tile_size;++y){
-- line 267 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp
--------------------------------------------------------------------------------
Ir______________ I1mr____ ILmr____ Dr______________ D1mr DLmr Dw______________ D1mw_____ DLmw Bc Bcm Bi Bim 

-- line 2 ----------------------------------------
        .        .        .                .           .    .         .         .           .  .   .  .   .  #define BTTD_H
        .        .        .                .           .    .         .         .           .  .   .  .   .  //Back To The Drawingboard
        .        .        .                .           .    .         .         .           .  .   .  .   .  #include "matrix_multisec.hpp"
        .        .        .                .           .    .         .         .           .  .   .  .   .  #include <atomic> 
        .        .        .                .           .    .         .         .           .  .   .  .   .  extern unsigned int computations; 
        .        .        .                .           .    .         .         .           .  .   .  .   .  
        .        .        .                .           .    .         .         .           .  .   .  .   .  #define PREFETCH_DISTANCE 32
        .        .        .                .           .    .         .         .           .  .   .  .   .  
3,670,352 (1.4%) 2 (0.1%) 1 (0.0%)         0           0    0 2,621,680 (8.6%) 15 (0.0%)    0  0   0  0   0  inline long long m_inedx(int s,int l,int y,int x){
6,816,368 (2.6%) 0        0        2,097,344 (1.9%)    0    0         0         0           0  0   0  0   0      return (((s*8+l)*128+y)*512)+x;
1,048,672 (0.4%) 0        0        1,048,672 (1.0%)    0    0         0         0           0  0   0  0   0  }
        .        .        .                .           .    .         .         .           .  .   .  .   .  
        .        .        .                .           .    .         .         .           .  .   .  .   .  inline long long m_inedx_2(int s,int l,int y,int x){
        .        .        .                .           .    .         .         .           .  .   .  .   .      return (((s*128+y)*512+x)*8)+l;
        .        .        .                .           .    .         .         .           .  .   .  .   .  }
        .        .        .                .           .    .         .         .           .  .   .  .   .  
        .        .        .                .           .    .         .         .           .  .   .  .   .  /**
        .        .        .                .           .    .         .         .           .  .   .  .   .   * |L0(0),L1(0),L2(0),.......
        .        .        .                .           .    .         .         .           .  .   .  .   .   */
-- line 20 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp
--------------------------------------------------------------------------------
Ir_______________ I1mr____ ILmr____ Dr_______________ D1mr____ DLmr Dw_______________ D1mw__________ DLmw__________ Bc______________ Bcm_____ Bi Bim 

-- line 65 ----------------------------------------
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  double cpuSecond() {
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    struct timespec ts;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    timespec_get(&ts, TIME_UTC);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    return ((double)ts.tv_sec + (double)ts.tv_nsec * 1.e-9);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
        21 (0.0%) 1 (0.0%) 1 (0.0%)          0        0           0         4  (0.0%)      0              0                 0        0         0   0  Logger logger("logs.txt");
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  #include <iostream>
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  #include <vector>
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  #include <random>
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  #include <numeric>
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  #include <cstdint>
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  // Function to generate a vector of random int8_t numbers with a sum in the range [-128, 127]
-- line 81 ----------------------------------------
-- line 128 ----------------------------------------
         .        .        .                 .        .           .         .              .              .                 .        .         .   .              }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .          }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .      }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .      return numbers;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         9 (0.0%) 1 (0.0%) 1 (0.0%)          1 (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0  int main(int args,char ** argv){
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         1 (0.0%) 1 (0.0%) 1 (0.0%)          0        0           0         1  (0.0%)      0              0                 0        0         0   0    cache_grind_prf();
         2 (0.0%) 1 (0.0%) 0                 0        0           0         1  (0.0%)      0              0                 0        0         0   0    exit(0);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    // benchmark_mvm_algorithms();
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    // exit(0);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    // scattered_matrix();
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    // new_mvm_test();
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    // exit(0); 
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    uint64_t size;
-- line 147 ----------------------------------------
-- line 263 ----------------------------------------
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    delete[] f;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    delete[] result;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    delete[] sector;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    delete[] layer;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    return 0;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         8 (0.0%) 0        0                 1 (0.0%) 0           0         3  (0.0%)      0              0                 0        0         0   0  void cache_grind_prf(){
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    uint64_t size;
         3 (0.0%) 0        0                 0        0           0         2  (0.0%)      0              0                 0        0         0   0    input_size_t * vector = new input_size_t[max_vect];
         9 (0.0%) 1 (0.0%) 1 (0.0%)          1 (0.0%) 0           0         2  (0.0%)      0              0                 0        0         0   0    std::cout<<"befre alloc: " << std::endl;
         4 (0.0%) 0        0                 0        0           0         2  (0.0%)      0              0                 0        0         0   0    pcm_size_t * f = flat(&size); 
         3 (0.0%) 1 (0.0%) 1 (0.0%)          0        0           0         2  (0.0%)      0              0                 0        0         0   0    int64_t * result = new int64_t[max_vect];
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         4 (0.0%) 0        0                 0        0           0         2  (0.0%)      0              0                 0        0         0   0    srand(time(nullptr));
         1 (0.0%) 0        0                 0        0           0         1  (0.0%)      0              0                 0        0         0   0    int range = INT8_MAX - INT8_MIN + 1;
     1,540 (0.0%) 1 (0.0%) 1 (0.0%)      1,025 (0.0%) 0           0         1  (0.0%)      0              0               513 (0.0%) 6 (0.0%)  0   0    for(int i=0;i<512;i++){
     5,632 (0.0%) 0        0             1,536 (0.0%) 0           0     1,024  (0.0%)      7  (0.0%)      7  (0.0%)         0        0         0   0      vector[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .        .        .                 .        .           .         .              .              .                 .        .         .   .      
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    }
       772 (0.0%) 0        0               513 (0.0%) 0           0         1  (0.0%)      0              0               257 (0.0%) 9 (0.0%)  0   0    for(int i=0;i<256;i++){
     1,536 (0.0%) 0        0               512 (0.0%) 0           0       256  (0.0%)     32  (0.1%)     32  (0.1%)         0        0         0   0      result[i]=0;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    }
10,485,766 (3.9%) 2 (0.1%) 2 (0.1%)  6,291,458 (5.8%) 0           0         1  (0.0%)      0              0         2,097,153 (8.4%) 8 (0.0%)  0   0    for(long long i=0;i<size;++i){
20,971,520 (7.9%) 0        0         6,291,456 (5.8%) 0           0 4,194,304 (13.8%) 32,768 (89.1%) 32,768 (93.8%)         0        0         0   0      f[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
18,874,368 (7.1%) 0        0        10,485,760 (9.6%) 0           0 2,097,152  (6.9%)      0              0                 0        0         0   0      f[i]&= 0x0F;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .      ///std::cout<<static_cast<int32_t>(f[i]);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         3 (0.0%) 0        0                 0        0           0         2  (0.0%)      0              0                 0        0         0   0    int* sector = new int[4+1];
         3 (0.0%) 0        0                 0        0           0         2  (0.0%)      0              0                 0        0         0   0    int**layer =new int*[n_sectors+1];
        16 (0.0%) 1 (0.0%) 1 (0.0%)          9 (0.0%) 0           0         1  (0.0%)      0              0                 5 (0.0%) 3 (0.0%)  0   0    for(int i=0;i<n_sectors;++i){
        32 (0.0%) 0        0                 8 (0.0%) 0           0         8  (0.0%)      0              0                 0        0         0   0      layer[i]=new int[8+1];
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
        16 (0.0%) 1 (0.0%) 1 (0.0%)          9 (0.0%) 0           0         1  (0.0%)      0              0                 5 (0.0%) 4 (0.0%)  0   0    for(int i=0;i<4;++i){
        28 (0.0%) 1 (0.0%) 1 (0.0%)         12 (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0      sector[i]=i;
        28 (0.0%) 0        0                12 (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0      layer[i][0]=0;
        32 (0.0%) 0        0                12 (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0      layer[i][1]=7;
        32 (0.0%) 0        0                12 (0.0%) 0           0         4  (0.0%)      0              0                 0        0         0   0      layer[i][2]=-1;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    }
         3 (0.0%) 1 (0.0%) 1 (0.0%)          1 (0.0%) 0           0         1  (0.0%)      0              0                 0        0         0   0    sector[4]=-1;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         8 (0.0%) 0        0                 5 (0.0%) 0           0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_mtd_16(f,vector,layer,sector,result);
         8 (0.0%) 2 (0.1%) 1 (0.0%)          5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_mtd_8(f,vector,layer,sector,result);
         8 (0.0%) 1 (0.0%) 0                 5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_mtd_4(f,vector,layer,sector,result);
         8 (0.0%) 2 (0.1%) 1 (0.0%)          5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_4(f,vector,layer,sector,result);
         8 (0.0%) 0        0                 5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm_3(f,vector,layer,sector,result);
         8 (0.0%) 0        0                 5 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 0        0         0   0    new_mvm(f,vector,layer,sector,result);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         5 (0.0%) 1 (0.0%) 1 (0.0%)          2 (0.0%) 1 (0.0%)    0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] vector;
         5 (0.0%) 0        0                 2 (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] f;
         5 (0.0%) 0        0                 2 (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] result;
         5 (0.0%) 1 (0.0%) 1 (0.0%)          2 (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] sector;
         5 (0.0%) 0        0                 2 (0.0%) 0           0         1  (0.0%)      0              0                 1 (0.0%) 0         0   0    delete[] layer;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         7 (0.0%) 0        0                 5 (0.0%) 1 (0.0%)    0         0              0              0                 1 (0.0%) 0         0   0  }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  void scattered_matrix(){
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    uint64_t size;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    input_size_t * vector = new input_size_t[max_vect];
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    std::cout<<"befre alloc: " << std::endl;
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    pcm_size_t * f = flat(&size); 
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    int64_t * result = new int64_t[max_vect];
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
-- line 328 ----------------------------------------
-- line 874 ----------------------------------------
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    fclose(mtd_32);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    fclose(mtd_64);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    fclose(mtd_128);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .    fclose(mtd_512);
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
        23 (0.0%) 3 (0.1%) 3 (0.1%)          8 (0.0%) 0           0         6  (0.0%)      0              0                 1 (0.0%) 1 (0.0%)  0   0  }
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  
         .        .        .                 .        .           .         .              .              .                 .        .         .   .  

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_________________ I1mr_________ ILmr_________ Dr________________ D1mr__________ DLmr_________ Dw________________ D1mw__________ DLmw__________ Bc________________ Bcm____________ Bi_______________ Bim__________ 

140,941,667 (52.8%)    96  (2.7%)    90  (3.2%) 66,119,229 (60.8%) 49,713 (77.0%)     0         11,298,630 (37.1%) 33,028 (89.8%) 32,807 (93.9%)  5,782,496 (23.2%)   5,987  (3.8%)         0             0            annotated: files known & above threshold & readable, line numbers known
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0            annotated: files known & above threshold & readable, line numbers unknown
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0          unannotated: files known & above threshold & two or more non-identical
120,816,497 (45.3%)    99  (2.8%)    69  (2.4%) 40,212,829 (37.0%)  5,877  (9.1%) 2,864 (36.7%) 19,005,580 (62.4%)     95  (0.3%)     46  (0.1%) 19,004,304 (76.1%) 144,059 (91.3%)       166  (0.0%)     3  (0.2%)  unannotated: files known & above threshold & unreadable 
    977,335  (0.4%) 2,604 (74.3%) 2,029 (72.0%)    261,157  (0.2%)  8,526 (13.2%) 4,914 (63.0%)    142,461  (0.5%)  3,482  (9.5%)  1,953  (5.6%)    164,847  (0.7%)   7,215  (4.6%)     4,696  (0.2%) 1,034 (79.5%)  unannotated: files known & below threshold
  4,227,533  (1.6%)   708 (20.2%)   631 (22.4%)  2,106,618  (1.9%)    479  (0.7%)    26  (0.3%)      4,467  (0.0%)    168  (0.5%)    121  (0.3%)      5,191  (0.0%)     461  (0.3%) 2,099,499 (99.8%)   263 (20.2%)  unannotated: files unknown

