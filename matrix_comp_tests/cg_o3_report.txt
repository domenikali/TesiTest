--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate --show-percs=yes cg.out
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         49152 B, 64 B, 12-way associative
LL cache:         25165824 B, 64 B, 12-way associative
Command:          ./matrix_tests
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ I1mr__________ ILmr__________ Dr__________________ D1mr___________ DLmr__________ Dw_________________ D1mw___________ DLmw___________ Bc_________________ Bcm_____________ Bi________________ Bim___________ 

372,270,264 (100.0%) 2,883 (100.0%) 2,595 (100.0%) 125,578,049 (100.0%) 73,407 (100.0%) 7,798 (100.0%) 47,498,192 (100.0%) 71,193 (100.0%) 69,234 (100.0%) 45,038,317 (100.0%) 297,662 (100.0%) 4,213,945 (100.0%) 1,309 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir________________________ I1mr______________ ILmr______________ Dr_______________________ D1mr_________________ DLmr________________ Dw_______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  file:function

< 117,325,744 (31.5%, 31.5%)   8  (0.3%,  0.3%)   8  (0.3%,  0.3%) 33,560,393 (26.7%, 26.7%)      1  (0.0%,  0.0%)     0  (0.0%,  0.0%) 16,779,916 (35.3%, 35.3%)      3  (0.0%,  0.0%)      1  (0.0%,  0.0%) 20,839,728 (46.3%, 46.3%) 270,664 (90.9%, 90.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random_r.c:
  117,319,532 (31.5%)          3  (0.1%)          3  (0.1%)        33,558,528 (26.7%)             0                    0                16,779,264 (35.3%)             0                     0                20,838,764 (46.3%)        270,638 (90.9%)                0                  0                   random_r

<  96,480,788 (25.9%, 57.4%)   5  (0.2%,  0.5%)   5  (0.2%,  0.5%) 37,753,350 (30.1%, 56.8%)      1  (0.0%,  0.0%)     1  (0.0%,  0.0%) 12,584,451 (26.5%, 61.8%)      0  (0.0%,  0.0%)      0  (0.0%,  0.0%) 16,779,267 (37.3%, 83.5%)       0  (0.0%, 90.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/random.c:
   96,480,768 (25.9%)          3  (0.1%)          3  (0.1%)        37,753,344 (30.1%)             0                    0                12,584,448 (26.5%)             0                     0                16,779,264 (37.3%)              0                        0                  0                   random

<  92,387,650 (24.8%, 82.3%)  28  (1.0%,  1.4%)  26  (1.0%,  1.5%) 35,692,417 (28.4%, 85.2%)     15  (0.0%,  0.0%)     0  (0.0%,  0.0%)  8,402,363 (17.7%, 79.5%) 63,023 (88.5%, 88.5%) 62,992 (91.0%, 91.0%)  4,203,357  (9.3%, 92.9%)   4,195  (1.4%, 92.3%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp:
   92,387,594 (24.8%)         20  (0.7%)         19  (0.7%)        35,692,408 (28.4%)            15  (0.0%)            0                 8,402,347 (17.7%)        63,023 (88.5%)        62,992 (91.0%)         4,203,356  (9.3%)          4,195  (1.4%)                0                  0                   cache_grind_prf()

<  26,933,339  (7.2%, 89.5%)  59  (2.0%,  3.5%)  58  (2.2%,  3.7%)  5,248,301  (4.2%, 89.4%) 58,396 (79.6%, 79.6%)     0  (0.0%,  0.0%)  1,053,814  (2.2%, 81.7%)    193  (0.3%, 88.8%)      0  (0.0%, 91.0%)  2,761,888  (6.1%, 99.0%)   6,474  (2.2%, 94.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp:
    8,132,735  (2.2%)          4  (0.1%)          4  (0.2%)         2,623,013  (2.1%)         8,660 (11.8%)            0                   263,186  (0.6%)             0                     0                 1,049,093  (2.3%)            534  (0.2%)                0                  0                   sslow_mvm(unsigned char****, signed char*, int**, int*, long*)
    7,343,702  (2.0%)          6  (0.2%)          6  (0.2%)         1,311,265  (1.0%)         8,275 (11.3%)            0                   262,154  (0.6%)             0                     0                 1,049,093  (2.3%)            532  (0.2%)                0                  0                   new_mvm(unsigned char*, signed char*, int**, int*, long*)
    4,201,620  (1.1%)          4  (0.1%)          4  (0.2%)         1,049,629  (0.8%)         8,338 (11.4%)            0                   524,294  (1.1%)             0                     0                   525,329  (1.2%)          1,074  (0.4%)                0                  0                   new_mvm_3(unsigned char*, signed char*, int**, int*, long*)
    1,814,672  (0.5%)          7  (0.2%)          7  (0.3%)            66,580  (0.1%)         8,345 (11.4%)            0                     1,024  (0.0%)             0                     0                    33,804  (0.1%)          1,069  (0.4%)                0                  0                   multi_thread_sector(int, unsigned char*, signed char*, int**, long*)
    1,814,663  (0.5%)          8  (0.3%)          7  (0.3%)            66,586  (0.1%)         8,338 (11.4%)            0                     1,027  (0.0%)             0                     0                    33,809  (0.1%)          1,075  (0.4%)                0                  0                   new_mvm_4(unsigned char*, signed char*, int**, int*, long*)
    1,808,472  (0.5%)          5  (0.2%)          5  (0.2%)            65,544  (0.1%)         8,211 (11.2%)            0                         0                     0                     0                    33,792  (0.1%)          1,055  (0.4%)                0                  0                   multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*)
    1,807,632  (0.5%)          6  (0.2%)          6  (0.2%)            65,552  (0.1%)         8,211 (11.2%)            0                         0                     0                     0                    33,808  (0.1%)          1,055  (0.4%)                0                  0                   multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int, int)

<  25,168,896  (6.8%, 96.2%)   1  (0.0%,  3.5%)   1  (0.0%,  3.8%)  8,389,632  (6.7%, 96.1%)      0  (0.0%, 79.6%)     0  (0.0%,  0.0%)  8,389,632 (17.7%, 99.4%)      0  (0.0%, 88.8%)      0  (0.0%, 91.0%)          0  (0.0%, 99.0%)       0  (0.0%, 94.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  ./stdlib/./stdlib/rand.c:rand

<   8,521,013  (2.3%, 98.5%) 691 (24.0%, 27.5%) 629 (24.2%, 28.0%)  4,228,560  (3.4%, 99.4%)    467  (0.6%, 80.2%)    26  (0.3%,  0.3%)     16,866  (0.0%, 99.4%)    167  (0.2%, 89.0%)    121  (0.2%, 91.2%)      9,324  (0.0%, 99.0%)     461  (0.2%, 94.7%) 4,209,042 (99.9%, 99.9%) 244 (18.6%, 18.6%)  ???:
    8,419,999  (2.3%)        324 (11.2%)        269 (10.4%)         4,209,692  (3.4%)           345  (0.5%)           10  (0.1%)               614  (0.0%)            21  (0.0%)            13  (0.0%)               173  (0.0%)             49  (0.0%)        4,209,021 (99.9%)        233 (17.8%)           ???

<   2,621,616  (0.7%, 99.2%)   1  (0.0%, 27.5%)   1  (0.0%, 28.1%)         24  (0.0%, 99.4%)      0  (0.0%, 80.2%)     0  (0.0%,  0.3%)         12  (0.0%, 99.4%)      1  (0.0%, 89.0%)      0  (0.0%, 91.2%)          0  (0.0%, 99.0%)       0  (0.0%, 94.7%)         0  (0.0%, 99.9%)   0  (0.0%, 18.6%)  /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp:
    2,621,448  (0.7%)          0                  0                         0                     0                    0                         4  (0.0%)             1  (0.0%)             0                         0                      0                        0                  0                   new_mvm(unsigned char*, signed char*, int**, int*, long*)

<     815,535  (0.2%, 99.5%)  74  (2.6%, 30.1%)  53  (2.0%, 30.1%)    273,374  (0.2%, 99.7%)  3,968  (5.4%, 85.6%) 1,170 (15.0%, 15.4%)    126,250  (0.3%, 99.7%)     85  (0.1%, 89.2%)     44  (0.1%, 91.2%)    109,695  (0.2%, 99.3%)   6,768  (2.3%, 96.9%)       166  (0.0%, 99.9%)   3  (0.2%, 18.9%)  ./elf/./elf/dl-lookup.c:
      511,146  (0.1%)         48  (1.7%)         36  (1.4%)           181,720  (0.1%)         3,406  (4.6%)          886 (11.4%)            69,616  (0.1%)            62  (0.1%)            38  (0.1%)            74,583  (0.2%)          5,953  (2.0%)              166  (0.0%)          3  (0.2%)           do_lookup_x

<     786,638  (0.2%, 99.7%) 133  (4.6%, 34.7%) 113  (4.4%, 34.5%)    161,138  (0.1%, 99.8%)    415  (0.6%, 86.2%)     3  (0.0%, 15.4%)     78,836  (0.2%, 99.9%)  4,336  (6.1%, 95.2%)  4,248  (6.1%, 97.4%)    121,154  (0.3%, 99.5%)     468  (0.2%, 97.1%)         0  (0.0%, 99.9%)   0  (0.0%, 18.9%)  ./malloc/./malloc/malloc.c:
      550,626  (0.1%)         60  (2.1%)         50  (1.9%)            93,462  (0.1%)           173  (0.2%)            1  (0.0%)            55,111  (0.1%)         4,221  (5.9%)         4,181  (6.0%)            76,446  (0.2%)            209  (0.1%)                0                  0                   _int_malloc

<     498,204  (0.1%, 99.8%)   4  (0.1%, 34.8%)   2  (0.1%, 34.5%)     82,710  (0.1%, 99.9%)  1,932  (2.6%, 88.8%) 1,694 (21.7%, 37.1%)          0  (0.0%, 99.9%)      0  (0.0%, 95.2%)      0  (0.0%, 97.4%)     82,710  (0.2%, 99.7%)   1,980  (0.7%, 97.8%)         0  (0.0%, 99.9%)   0  (0.0%, 18.9%)  ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir________________________ I1mr______________ ILmr______________ Dr_______________________ D1mr________________ DLmr________________ Dw_______________________ D1mw_________________ DLmw_________________ Bc_______________________ Bcm___________________ Bi______________________ Bim_______________  function:file

> 117,319,532 (31.5%, 31.5%)   3  (0.1%,  0.1%)   3  (0.1%,  0.1%) 33,558,528 (26.7%, 26.7%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 16,779,264 (35.3%, 35.3%)      0  (0.0%,  0.0%)      0  (0.0%,  0.0%) 20,838,764 (46.3%, 46.3%) 270,638 (90.9%, 90.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random_r:./stdlib/./stdlib/random_r.c

>  96,480,768 (25.9%, 57.4%)   3  (0.1%,  0.2%)   3  (0.1%,  0.2%) 37,753,344 (30.1%, 56.8%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%) 12,584,448 (26.5%, 61.8%)      0  (0.0%,  0.0%)      0  (0.0%,  0.0%) 16,779,264 (37.3%, 83.5%)       0  (0.0%, 90.9%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  random:./stdlib/./stdlib/random.c

>  92,387,594 (24.8%, 82.2%)  20  (0.7%,  0.9%)  19  (0.7%,  1.0%) 35,692,408 (28.4%, 85.2%)    15  (0.0%,  0.0%)     0  (0.0%,  0.0%)  8,402,347 (17.7%, 79.5%) 63,023 (88.5%, 88.5%) 62,992 (91.0%, 91.0%)  4,203,356  (9.3%, 92.9%)   4,195  (1.4%, 92.3%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  cache_grind_prf():/home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp

>  25,168,896  (6.8%, 89.0%)   1  (0.0%,  0.9%)   1  (0.0%,  1.0%)  8,389,632  (6.7%, 91.9%)     0  (0.0%,  0.0%)     0  (0.0%,  0.0%)  8,389,632 (17.7%, 97.2%)      0  (0.0%, 88.5%)      0  (0.0%, 91.0%)          0  (0.0%, 92.9%)       0  (0.0%, 92.3%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  rand:./stdlib/./stdlib/rand.c

>   9,965,671  (2.7%, 91.7%)   6  (0.2%,  1.1%)   6  (0.2%,  1.2%)  1,311,265  (1.0%, 92.9%) 8,275 (11.3%, 11.3%)     0  (0.0%,  0.0%)    262,671  (0.6%, 97.7%)     54  (0.1%, 88.6%)      0  (0.0%, 91.0%)  1,049,605  (2.3%, 95.2%)     541  (0.2%, 92.5%)         0  (0.0%,  0.0%)   0  (0.0%,  0.0%)  new_mvm(unsigned char*, signed char*, int**, int*, long*):
    7,343,702  (2.0%)          6  (0.2%)          6  (0.2%)         1,311,265  (1.0%)        8,275 (11.3%)            0                   262,154  (0.6%)             0                     0                 1,049,093  (2.3%)            532  (0.2%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp
    2,621,448  (0.7%)          0                  0                         0                    0                    0                         4  (0.0%)             1  (0.0%)             0                         0                      0                        0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp

>   8,419,999  (2.3%, 93.9%) 324 (11.2%, 12.4%) 269 (10.4%, 11.6%)  4,209,692  (3.4%, 96.3%)   345  (0.5%, 11.8%)    10  (0.1%,  0.1%)        614  (0.0%, 97.7%)     21  (0.0%, 88.6%)     13  (0.0%, 91.0%)        173  (0.0%, 95.2%)      49  (0.0%, 92.5%) 4,209,021 (99.9%, 99.9%) 233 (17.8%, 17.8%)  ???:???

>   8,133,256  (2.2%, 96.1%)   5  (0.2%, 12.6%)   5  (0.2%, 11.8%)  2,623,013  (2.1%, 98.4%) 8,660 (11.8%, 23.6%)     0  (0.0%,  0.1%)    263,699  (0.6%, 98.3%)     59  (0.1%, 88.7%)      0  (0.0%, 91.0%)  1,049,605  (2.3%, 97.5%)     544  (0.2%, 92.7%)         0  (0.0%, 99.9%)   0  (0.0%, 17.8%)  sslow_mvm(unsigned char****, signed char*, int**, int*, long*):
    8,132,735  (2.2%)          4  (0.1%)          4  (0.2%)         2,623,013  (2.1%)        8,660 (11.8%)            0                   263,186  (0.6%)             0                     0                 1,049,093  (2.3%)            534  (0.2%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>   4,202,161  (1.1%, 97.3%)   4  (0.1%, 12.7%)   4  (0.2%, 11.9%)  1,049,629  (0.8%, 99.2%) 8,338 (11.4%, 34.9%)     0  (0.0%,  0.1%)    524,807  (1.1%, 99.4%)     53  (0.1%, 88.8%)      0  (0.0%, 91.0%)    525,841  (1.2%, 98.7%)   1,083  (0.4%, 93.1%)         0  (0.0%, 99.9%)   0  (0.0%, 17.8%)  new_mvm_3(unsigned char*, signed char*, int**, int*, long*):
    4,201,620  (1.1%)          4  (0.1%)          4  (0.2%)         1,049,629  (0.8%)        8,338 (11.4%)            0                   524,294  (1.1%)             0                     0                   525,329  (1.2%)          1,074  (0.4%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>   1,815,204  (0.5%, 97.7%)   9  (0.3%, 13.0%)   8  (0.3%, 12.3%)     66,586  (0.1%, 99.3%) 8,338 (11.4%, 46.3%)     0  (0.0%,  0.1%)      1,540  (0.0%, 99.4%)     55  (0.1%, 88.9%)      0  (0.0%, 91.0%)     34,321  (0.1%, 98.8%)   1,083  (0.4%, 93.4%)         0  (0.0%, 99.9%)   0  (0.0%, 17.8%)  new_mvm_4(unsigned char*, signed char*, int**, int*, long*):
    1,814,663  (0.5%)          8  (0.3%)          7  (0.3%)            66,586  (0.1%)        8,338 (11.4%)            0                     1,027  (0.0%)             0                     0                    33,809  (0.1%)          1,075  (0.4%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>   1,814,692  (0.5%, 98.2%)   7  (0.2%, 13.3%)   7  (0.3%, 12.5%)     66,580  (0.1%, 99.3%) 8,345 (11.4%, 57.6%)     0  (0.0%,  0.1%)      1,024  (0.0%, 99.4%)      0  (0.0%, 88.9%)      0  (0.0%, 91.0%)     33,804  (0.1%, 98.8%)   1,069  (0.4%, 93.8%)         0  (0.0%, 99.9%)   0  (0.0%, 17.8%)  multi_thread_sector(int, unsigned char*, signed char*, int**, long*):
    1,814,672  (0.5%)          7  (0.2%)          7  (0.3%)            66,580  (0.1%)        8,345 (11.4%)            0                     1,024  (0.0%)             0                     0                    33,804  (0.1%)          1,069  (0.4%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>   1,813,592  (0.5%, 98.7%)   5  (0.2%, 13.4%)   5  (0.2%, 12.7%)     67,592  (0.1%, 99.4%) 8,336 (11.4%, 69.0%)     0  (0.0%,  0.1%)          0  (0.0%, 99.4%)      0  (0.0%, 88.9%)      0  (0.0%, 91.0%)     34,816  (0.1%, 98.9%)   1,055  (0.4%, 94.2%)         0  (0.0%, 99.9%)   0  (0.0%, 17.8%)  multi_thread_layer(unsigned char*, int, signed char*, std::atomic<long>*):
    1,808,472  (0.5%)          5  (0.2%)          5  (0.2%)            65,544  (0.1%)        8,211 (11.2%)            0                         0                     0                     0                    33,792  (0.1%)          1,055  (0.4%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>   1,812,752  (0.5%, 99.2%)   6  (0.2%, 13.6%)   6  (0.2%, 12.9%)     67,600  (0.1%, 99.4%) 8,341 (11.4%, 80.4%)     0  (0.0%,  0.1%)          0  (0.0%, 99.4%)      0  (0.0%, 88.9%)      0  (0.0%, 91.0%)     34,832  (0.1%, 99.0%)   1,055  (0.4%, 94.5%)         0  (0.0%, 99.9%)   0  (0.0%, 17.8%)  multi_thread_layer_2(unsigned char*, int, signed char*, std::atomic<long>*, int, int):
    1,807,632  (0.5%)          6  (0.2%)          6  (0.2%)            65,552  (0.1%)        8,211 (11.2%)            0                         0                     0                     0                    33,808  (0.1%)          1,055  (0.4%)                0                  0                   /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp

>     687,254  (0.2%, 99.4%)  18  (0.6%, 14.3%)  13  (0.5%, 13.4%)    137,223  (0.1%, 99.5%) 1,954  (2.7%, 83.0%) 1,695 (21.7%, 21.9%)     42,901  (0.1%, 99.5%)     12  (0.0%, 88.9%)      3  (0.0%, 91.0%)    104,105  (0.2%, 99.2%)   2,690  (0.9%, 95.4%)         0  (0.0%, 99.9%)   0  (0.0%, 17.8%)  _dl_lookup_symbol_x:
      498,204  (0.1%)          4  (0.1%)          2  (0.1%)            82,710  (0.1%)        1,932  (2.6%)        1,694 (21.7%)                 0                     0                     0                    82,710  (0.2%)          1,980  (0.7%)                0                  0                   ./elf/../sysdeps/generic/dl-new-hash.h

>     550,626  (0.1%, 99.5%)  60  (2.1%, 16.3%)  50  (1.9%, 15.4%)     93,462  (0.1%, 99.6%)   173  (0.2%, 83.3%)     1  (0.0%, 21.9%)     55,111  (0.1%, 99.6%)  4,221  (5.9%, 94.8%)  4,181  (6.0%, 97.0%)     76,446  (0.2%, 99.4%)     209  (0.1%, 95.5%)         0  (0.0%, 99.9%)   0  (0.0%, 17.8%)  _int_malloc:./malloc/./malloc/malloc.c

>     528,565  (0.1%, 99.7%)  48  (1.7%, 18.0%)  36  (1.4%, 16.8%)    183,657  (0.1%, 99.8%) 3,406  (4.6%, 87.9%)   886 (11.4%, 33.2%)     69,622  (0.1%, 99.7%)     62  (0.1%, 94.9%)     38  (0.1%, 97.1%)     76,517  (0.2%, 99.6%)   5,953  (2.0%, 97.5%)       169  (0.0%, 99.9%)   5  (0.4%, 18.2%)  do_lookup_x:
      511,146  (0.1%)         48  (1.7%)         36  (1.4%)           181,720  (0.1%)        3,406  (4.6%)          886 (11.4%)            69,616  (0.1%)            62  (0.1%)            38  (0.1%)            74,583  (0.2%)          5,953  (2.0%)              166  (0.0%)          3  (0.2%)           ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: ./elf/./elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./elf/./elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: ./malloc/./malloc/malloc.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./malloc/./malloc/malloc.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/rand.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/rand.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random.c

--------------------------------------------------------------------------------
-- Annotated source file: ./stdlib/./stdlib/random_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.cpp
--------------------------------------------------------------------------------
Ir______________ I1mr____ ILmr____ Dr______________ D1mr_________ DLmr Dw____________ D1mw_____ DLmw Bc____________ Bcm_________ Bi Bim 

        .        .        .                .            .            .       .         .           .       .            .         .   .  #include "bttd.hpp"
        .        .        .                .            .            .       .         .           .       .            .         .   .  
       10 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       6 (0.0%)  0           0       0            0         0   0  void sslow_mvm(pcm_size_t****matrix,input_size_t*vector,int**layers,int*sectors,int64_t*result){
        1 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result,0,512*8);
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx=0;
       45 (0.0%) 0        0               17 (0.0%)     5  (0.0%)    0       0         0           0       5 (0.0%)     3 (0.0%)  0   0      while(sectors[s_idx]!=-1){
        .        .        .                .            .            .       .         .           .       .            .         .   .          
    2,560 (0.0%) 0        0            1,024 (0.0%)     0            0       0         0           0     512 (0.0%)     5 (0.0%)  0   0          for(int y=0;y<tile_size;++y){
  786,944 (0.2%) 0        0                0            0            0     512 (0.0%)  0           0 262,144 (0.6%)   518 (0.2%)  0   0              for(int x=0;x<max_x;++x){
        .        .        .                .            .            .       .         .           .       .            .         .   .                  int l=0;
  786,432 (0.2%) 0        0                0            0            0       0         0           0       0            0         0   0                  uint64_t wheight=0;
2,883,628 (0.8%) 1 (0.0%) 1 (0.0%)   524,296 (0.4%)     6  (0.0%)    0       4 (0.0%)  0           0 786,432 (1.7%)     8 (0.0%)  0   0                  while(layers[sectors[s_idx]][l]!=-1){
2,622,976 (0.7%) 0        0        1,835,008 (1.5%) 8,590 (11.7%)    0       0         0           0       0            0         0   0                      wheight+=matrix[sectors[s_idx]][layers[sectors[s_idx]][l]][y][x];
        .        .        .                .            .            .       .         .           .       .            .         .   .                      l++;
        .        .        .                .            .            .       .         .           .       .            .         .   .                  }
1,050,132 (0.3%) 2 (0.1%) 2 (0.1%)   262,660 (0.2%)    58  (0.1%)    0 262,664 (0.6%)  0           0       0            0         0   0                  result[sectors[sectors[s_idx]]*128+y]+=wheight*vector[x];
        .        .        .                .            .            .       .         .           .       .            .         .   .              }
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
        .        .        .                .            .            .       .         .           .       .            .         .   .              
        .        .        .                .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        .        .        .                .            .            .       .         .           .       .            .         .   .      
        7 (0.0%) 0        0                7 (0.0%)     0            0       0         0           0       0            0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .  //sector{1,2,3,4}-1;
       14 (0.0%) 2 (0.1%) 2 (0.1%)         0            0            0       6 (0.0%)  0           0       0            0         0   0  void new_mvm(pcm_size_t*matrix,input_size_t*vector, int* *layers,int*sectors,int64_t*result ){
        1 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result,0,512*8);
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx=0;
       28 (0.0%) 2 (0.1%) 2 (0.1%)        13 (0.0%)    13  (0.0%)    0       0         0           0       5 (0.0%)     1 (0.0%)  0   0      while(sectors[s_idx]!=-1){
        .        .        .                .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
    2,052 (0.0%) 0        0                0            0            0       0         0           0     512 (0.0%)     6 (0.0%)  0   0          for(int y=0;y<tile_size;++y){
  786,432 (0.2%) 0        0                0            0            0       0         0           0 262,144 (0.6%)   519 (0.2%)  0   0              for(int x=0;x<max_x;++x){
        .        .        .                .            .            .       .         .           .       .            .         .   .                  int l=0;
  262,144 (0.1%) 0        0                0            0            0       0         0           0       0            0         0   0                  uint64_t wheight=0;
3,407,896 (0.9%) 1 (0.0%) 1 (0.0%)   524,296 (0.4%)     6  (0.0%)    0       4 (0.0%)  0           0 786,432 (1.7%)     6 (0.0%)  0   0                  while(layers[s][l]!=-1){
1,572,864 (0.4%) 1 (0.0%) 1 (0.0%)   524,288 (0.4%) 8,197 (11.2%)    0       0         0           0       0            0         0   0                      wheight+=matrix[m_inedx(s,layers[s][l],y,x)];
        .        .        .                .            .            .       .         .           .       .            .         .   .                      ++l;
        .        .        .                .            .            .       .         .           .       .            .         .   .                  }
1,312,264 (0.4%) 0        0          262,660 (0.2%)    58  (0.1%)    0 262,144 (0.6%)  0           0       0            0         0   0                  result[sectors[s]*128+y]+=wheight*vector[x];
        .        .        .                .            .            .       .         .           .       .            .         .   .              }
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
        .        .        .                .            .            .       .         .           .       .            .         .   .              
        .        .        .                .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        7 (0.0%) 0        0                7 (0.0%)     0            0       0         0           0       0            0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .  void new_mvm_2(pcm_size_t*matrix,input_size_t*vector, int** layers,int*sectors,int64_t*result ){
        .        .        .                .            .            .       .         .           .       .            .         .   .      ++computations;
        .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result,0,512*8);
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx=0;
        .        .        .                .            .            .       .         .           .       .            .         .   .      while(sectors[s_idx]!=-1){
        .        .        .                .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
-- line 58 ----------------------------------------
-- line 68 ----------------------------------------
        .        .        .                .            .            .       .         .           .       .            .         .   .              }
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
        .        .        .                .            .            .       .         .           .       .            .         .   .              
        .        .        .                .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
       13 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       6 (0.0%)  0           0       0            0         0   0  void new_mvm_3(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       19 (0.0%) 1 (0.0%) 1 (0.0%)         5 (0.0%)     5  (0.0%)    0       0         0           0       5 (0.0%)     2 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .          int s = sectors[s_idx];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
       52 (0.0%) 0        0               16 (0.0%)    14  (0.0%)    0       0         0           0      12 (0.0%)     4 (0.0%)  0   0          while (layers[s][l_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .              int l = layers[s][l_idx];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .              
       24 (0.0%) 0        0                0            0            0       0         0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
    3,088 (0.0%) 0        0                0            0            0       0         0           0   1,024 (0.0%)     9 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
       16 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       0         0           0       0            0         0   0                  int64_t* result_row_ptr = &result[s * 128 + y];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
1,573,888 (0.4%) 1 (0.0%) 1 (0.0%)         0            0            0       0         0           0 524,288 (1.2%) 1,059 (0.4%)  0   0                  for (int x = 0; x < max_x; ++x) {
  524,288 (0.1%) 0        0          524,288 (0.4%) 8,197 (11.2%)    0       0         0           0       0            0         0   0                      uint64_t wheight = *matrix_base; 
2,100,224 (0.6%) 0        0          525,312 (0.4%)   120  (0.2%)    0 524,288 (1.1%)  0           0       0            0         0   0                      *result_row_ptr += wheight * vector[x];
        .        .        .                .            .            .       .         .           .       .            .         .   .                      
        .        .        .                .            .            .       .         .           .       .            .         .   .                      matrix_base++; 
        .        .        .                .            .            .       .         .           .       .            .         .   .                  }
        .        .        .                .            .            .       .         .           .       .            .         .   .              }
        .        .        .                .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
        .        .        .                .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        7 (0.0%) 0        0                7 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
    3,079 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       3 (0.0%)  0           0       0            0         0   0  void new_mvm_4(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       20 (0.0%) 0        0                5 (0.0%)     5  (0.0%)    0       0         0           0       5 (0.0%)     1 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .          int s = sectors[s_idx];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
        8 (0.0%) 0        0                4 (0.0%)     4  (0.0%)    0       0         0           0       0            0         0   0          int* curr_layers = layers[s];
       44 (0.0%) 2 (0.1%) 1 (0.0%)        12 (0.0%)    10  (0.0%)    0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .              int l = curr_layers[l_idx];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .              
       24 (0.0%) 0        0                0            0            0       0         0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
    3,080 (0.0%) 0        0                0            0            0       0         0           0   1,024 (0.0%)     9 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
        .        .        .                .            .            .       .         .           .       .            .         .   .                  int64_t row_sum = 0;
        .        .        .                .            .            .       .         .           .       .            .         .   .  
   65,536 (0.0%) 0        0                0            0            0       0         0           0  32,768 (0.1%) 1,059 (0.4%)  0   0                  for (int x = 0; x < max_x; ++x) {
        .        .        .                .            .            .       .         .           .       .            .         .   .                      
1,736,707 (0.5%) 4 (0.1%) 4 (0.2%)    65,536 (0.1%) 8,197 (11.2%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
        .        .        .                .            .            .       .         .           .       .            .         .   .                      matrix_base++; 
        .        .        .                .            .            .       .         .           .       .            .         .   .                  }
    6,160 (0.0%) 1 (0.0%) 1 (0.0%)     1,024 (0.0%)   120  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
        .        .        .                .            .            .       .         .           .       .            .         .   .              }
        .        .        .                .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
        .        .        .                .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        4 (0.0%) 0        0                4 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
    3,092 (0.0%) 2 (0.1%) 2 (0.1%)         0            0            0       0         0           0       0            0         0   0  void multi_thread_sector(int s, pcm_size_t* matrix, input_size_t* vector,  int** layers, int64_t* result) {
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
        8 (0.0%) 0        0                4 (0.0%)     3  (0.0%)    0       0         0           0       0            0         0   0          int* curr_layers = layers[s];
       44 (0.0%) 0        0               12 (0.0%)    12  (0.0%)    0       0         0           0      12 (0.0%)     6 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .              int l = curr_layers[l_idx];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .              
       24 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       0         0           0       0            0         0   0              pcm_size_t* matrix_base = &matrix[m_inedx(s, l, 0, 0)];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
    3,088 (0.0%) 0        0                0            0            0       0         0           0   1,024 (0.0%)    10 (0.0%)  0   0              for (int y = 0; y < tile_size; ++y) {
        .        .        .                .            .            .       .         .           .       .            .         .   .                  int64_t row_sum = 0;
        .        .        .                .            .            .       .         .           .       .            .         .   .  
   65,536 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       0         0           0  32,768 (0.1%) 1,053 (0.4%)  0   0                  for (int x = 0; x < max_x; ++x) {
        .        .        .                .            .            .       .         .           .       .            .         .   .                      
1,736,720 (0.5%) 3 (0.1%) 3 (0.1%)    65,536 (0.1%) 8,199 (11.2%)    0       0         0           0       0            0         0   0                      row_sum += *matrix_base * vector[x];
        .        .        .                .            .            .       .         .           .       .            .         .   .                      
        .        .        .                .            .            .       .         .           .       .            .         .   .                      matrix_base++; 
        .        .        .                .            .            .       .         .           .       .            .         .   .                  }
    6,156 (0.0%) 0        0            1,024 (0.0%)   127  (0.2%)    0   1,024 (0.0%)  0           0       0            0         0   0                  result[s * 128 + y] += row_sum;
        .        .        .                .            .            .       .         .           .       .            .         .   .              }
        .        .        .                .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
        4 (0.0%) 0        0                4 (0.0%)     4  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
       15 (0.0%) 2 (0.1%) 2 (0.1%)         1 (0.0%)     0            0      10 (0.0%)  0           0       0            0         0   0  void new_mvm_mtd_4(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        3 (0.0%) 0        0                0            0            0       2 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       28 (0.0%) 1 (0.0%) 1 (0.0%)         5 (0.0%)     2  (0.0%)    0       0         0           0       5 (0.0%)     1 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .          std::thread t(multi_thread_sector, sectors[s_idx], matrix, vector, layers, result);
        .        .        .                .            .            .       .         .           .       .            .         .   .          threads.push_back(move(t));
        1 (0.0%) 0        0                0            0            0       0         0           0       0            0         0   0          s_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
       22 (0.0%) 0        0                0            0            0       0         0           0       5 (0.0%)     3 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
        8 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       4 (0.0%)  0           0       0            0         0   0          threads[i].join();
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        7 (0.0%) 0        0                6 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
    3,080 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       0         0           0       0            0         0   0  void multi_thread_layer( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result) {
        .        .        .                .            .            .       .         .           .       .            .         .   .  
    3,072 (0.0%) 0        0                0            0            0       0         0           0   1,024 (0.0%)    10 (0.0%)  0   0      for (int y = 0; y < tile_size; ++y) {
        .        .        .                .            .            .       .         .           .       .            .         .   .          int64_t row_sum = 0;
        .        .        .                .            .            .       .         .           .       .            .         .   .  
   65,536 (0.0%) 0        0                0            0            0       0         0           0  32,768 (0.1%) 1,045 (0.4%)  0   0          for (int x = 0; x < max_x; ++x) {
        .        .        .                .            .            .       .         .           .       .            .         .   .              
1,736,728 (0.5%) 4 (0.1%) 4 (0.2%)    65,536 (0.1%) 8,203 (11.2%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
        .        .        .                .            .            .       .         .           .       .            .         .   .              
        .        .        .                .            .            .       .         .           .       .            .         .   .              matrix++; 
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
       48 (0.0%) 0        0                0            0            0       0         0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        .        .        .                .            .            .       .         .           .       .            .         .   .          
        8 (0.0%) 0        0                8 (0.0%)     8  (0.0%)    0       0         0           0       0            0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
       19 (0.0%) 3 (0.1%) 3 (0.1%)         2 (0.0%)     0            0      11 (0.0%)  0           0       0            0         0   0  void new_mvm_mtd_8(pcm_size_t* matrix, input_size_t* vector,  int**  layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        5 (0.0%) 0        0                0            0            0       3 (0.0%)  0           0       0            0         0   0      std::vector<std::thread> threads;
      515 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0     512 (0.0%)  0           0     512 (0.0%)     9 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
    1,537 (0.0%) 0        0                0            0            0       0         0           0     512 (0.0%)     4 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       26 (0.0%) 1 (0.0%) 1 (0.0%)        13 (0.0%)     1  (0.0%)    0       1 (0.0%)  0           0       5 (0.0%)     4 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
        .        .        .                .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
       16 (0.0%) 0        0                8 (0.0%)     1  (0.0%)    0       4 (0.0%)  0           0       0            0         0   0          int* curr_layers = layers[s];
       60 (0.0%) 1 (0.0%) 1 (0.0%)        20 (0.0%)     3  (0.0%)    0       0         0           0      12 (0.0%)    10 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .              int l = curr_layers[l_idx];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
       24 (0.0%) 0        0                8 (0.0%)     0            0       0         0           0       0            0         0   0              std::thread t(multi_thread_layer, &matrix[m_inedx(s, l, 0, 0)],s, vector, temp_result);
        .        .        .                .            .            .       .         .           .       .            .         .   .              threads.push_back(move(t));
        .        .        .                .            .            .       .         .           .       .            .         .   .              
        .        .        .                .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
       38 (0.0%) 0        0                2 (0.0%)     1  (0.0%)    0       0         0           0       9 (0.0%)     1 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
       16 (0.0%) 0        0                0            0            0       8 (0.0%)  0           0       0            0         0   0          threads[i].join();
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
    2,051 (0.0%) 1 (0.0%) 1 (0.0%)         2 (0.0%)     1  (0.0%)    0       0         0           0     512 (0.0%)    10 (0.0%)  0   0      for(int i=0;i<512;++i){
      512 (0.0%) 0        0                0            0            0     512 (0.0%) 65 (0.1%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
       11 (0.0%) 0        0                9 (0.0%)     1  (0.0%)    0       0         0           0       1 (0.0%)     0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
       19 (0.0%) 3 (0.1%) 3 (0.1%)         2 (0.0%)     1  (0.0%)    0      11 (0.0%)  2 (0.0%)    0       0            0         0   0  void new_mvm_mtd_16(pcm_size_t* matrix, input_size_t* vector,  int** layers, int* sectors, int64_t* result) {
        1 (0.0%) 0        0                1 (0.0%)     1  (0.0%)    0       0         0           0       0            0         0   0      ++computations;
        .        .        .                .            .            .       .         .           .       .            .         .   .      memset(result, 0, 512 * sizeof(int64_t)); 
        7 (0.0%) 0        0                0            0            0       5 (0.0%)  1 (0.0%)    0       0            0         0   0      std::vector<std::thread> threads;
        .        .        .                .            .            .       .         .           .       .            .         .   .      int thread_count = 2;
      515 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0     512 (0.0%) 60 (0.1%)    0     512 (0.0%)     6 (0.0%)  0   0      std::atomic<int64_t> temp_result[512];
    1,538 (0.0%) 0        0                0            0            0       0         0           0     512 (0.0%)     6 (0.0%)  0   0      for(int i=0;i<512;++i)temp_result[i]=0;
        .        .        .                .            .            .       .         .           .       .            .         .   .      
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .      int s_idx = 0;
       30 (0.0%) 2 (0.1%) 2 (0.1%)        13 (0.0%)     0            0       6 (0.0%)  0           0       5 (0.0%)     3 (0.0%)  0   0      while (sectors[s_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .          int s=sectors[s_idx];
        .        .        .                .            .            .       .         .           .       .            .         .   .          int l_idx = 0;
       16 (0.0%) 0        0               12 (0.0%)     0            0       0         0           0       0            0         0   0          int* curr_layers = layers[s];
       44 (0.0%) 0        0               12 (0.0%)     0            0       0         0           0      12 (0.0%)     4 (0.0%)  0   0          while (curr_layers[l_idx] != -1) {
        .        .        .                .            .            .       .         .           .       .            .         .   .              int l = curr_layers[l_idx];
        .        .        .                .            .            .       .         .           .       .            .         .   .  
       64 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       0         0           0      16 (0.0%)     7 (0.0%)  0   0              for(int i=0;i<thread_count;++i){
       16 (0.0%) 0        0                0            0            0       0         0           0       0            0         0   0                  int y_start = i * (tile_size / thread_count);
        .        .        .                .            .            .       .         .           .       .            .         .   .                  int end = (i + 1) * (tile_size / thread_count); 
        .        .        .                .            .            .       .         .           .       .            .         .   .                  
        .        .        .                .            .            .       .         .           .       .            .         .   .                  std::thread t(multi_thread_layer_2, &matrix[m_inedx(s, l, 0, 0)+y_start*max_x],s, vector, temp_result,y_start,end);
        .        .        .                .            .            .       .         .           .       .            .         .   .                  threads.push_back(move(t));
        .        .        .                .            .            .       .         .           .       .            .         .   .              
        .        .        .                .            .            .       .         .           .       .            .         .   .              }
        .        .        .                .            .            .       .         .           .       .            .         .   .              l_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .          s_idx++;
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
       70 (0.0%) 1 (0.0%) 1 (0.0%)         2 (0.0%)     1  (0.0%)    0       0         0           0      17 (0.0%)     2 (0.0%)  0   0      for(int i=0;i<threads.size();i++){
       32 (0.0%) 0        0                0            0            0      16 (0.0%)  0           0       0            0         0   0          threads[i].join();
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
    2,052 (0.0%) 0        0                3 (0.0%)     1  (0.0%)    0       0         0           0     512 (0.0%)    10 (0.0%)  0   0      for(int i=0;i<512;++i){
      512 (0.0%) 0        0                0            0            0     512 (0.0%) 65 (0.1%)    0       0            0         0   0          result[i]=temp_result[i].load(std::memory_order_relaxed);
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
       11 (0.0%) 0        0                9 (0.0%)     1  (0.0%)    0       0         0           0       1 (0.0%)     0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .  
    2,080 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       0         0           0       0            0         0   0  void multi_thread_layer_2( pcm_size_t* matrix, int s,input_size_t* vector, std::atomic<int64_t>* result,int y_start,int end) {
    3,104 (0.0%) 0        0                0            0            0       0         0           0   1,040 (0.0%)    18 (0.0%)  0   0      for (int y = y_start; y < end; ++y) {
        .        .        .                .            .            .       .         .           .       .            .         .   .          int64_t row_sum = 0;
        .        .        .                .            .            .       .         .           .       .            .         .   .  
   65,536 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       0         0           0  32,768 (0.1%) 1,037 (0.3%)  0   0          for (int x = 0; x < max_x; ++x) {
        .        .        .                .            .            .       .         .           .       .            .         .   .              
1,736,736 (0.5%) 3 (0.1%) 3 (0.1%)    65,536 (0.1%) 8,211 (11.2%)    0       0         0           0       0            0         0   0              row_sum += *matrix * vector[x];
        .        .        .                .            .            .       .         .           .       .            .         .   .              
        .        .        .                .            .            .       .         .           .       .            .         .   .              matrix++; 
        .        .        .                .            .            .       .         .           .       .            .         .   .          }
      160 (0.0%) 1 (0.0%) 1 (0.0%)         0            0            0       0         0           0       0            0         0   0          result[s * 128 + y].fetch_add(row_sum, std::memory_order_relaxed);
        .        .        .                .            .            .       .         .           .       .            .         .   .      }
        .        .        .                .            .            .       .         .           .       .            .         .   .          
       16 (0.0%) 0        0               16 (0.0%)     0            0       0         0           0       0            0         0   0  }
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .  
        .        .        .                .            .            .       .         .           .       .            .         .   .  void acc_test(pcm_size_t*matrix, int* layers,int*sectors){
        .        .        .                .            .            .       .         .           .       .            .         .   .      int s=0;
        .        .        .                .            .            .       .         .           .       .            .         .   .      while(sectors[s]!=-1){
        .        .        .                .            .            .       .         .           .       .            .         .   .          int l=0;
        .        .        .                .            .            .       .         .           .       .            .         .   .          while(layers[l]!=-1){
        .        .        .                .            .            .       .         .           .       .            .         .   .              for(int y=0;y<tile_size;++y){
-- line 291 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./bttd.hpp
--------------------------------------------------------------------------------
Ir______________ I1mr____ ILmr____ Dr_______ D1mr DLmr Dw_______ D1mw____ DLmw Bc Bcm Bi Bim 

-- line 3 ----------------------------------------
        .        .        .         .           .    .  .        .           .  .   .  .   .  //Back To The Drawingboard
        .        .        .         .           .    .  .        .           .  .   .  .   .  #include "matrix_multisec.hpp"
        .        .        .         .           .    .  .        .           .  .   .  .   .  #include <atomic> 
        .        .        .         .           .    .  .        .           .  .   .  .   .  extern unsigned int computations; 
        .        .        .         .           .    .  .        .           .  .   .  .   .  
        .        .        .         .           .    .  .        .           .  .   .  .   .  #define PREFETCH_DISTANCE 32
        .        .        .         .           .    .  .        .           .  .   .  .   .  
        .        .        .         .           .    .  .        .           .  .   .  .   .  inline long long m_inedx(int s,int l,int y,int x){
2,621,616 (0.7%) 1 (0.0%) 1 (0.0%) 24 (0.0%)    0    0 12 (0.0%) 1 (0.0%)    0  0   0  0   0      return (((s*8+l)*128+y)*512)+x;
        .        .        .         .           .    .  .        .           .  .   .  .   .  }
        .        .        .         .           .    .  .        .           .  .   .  .   .  
        .        .        .         .           .    .  .        .           .  .   .  .   .  inline long long m_inedx_2(int s,int l,int y,int x){
        .        .        .         .           .    .  .        .           .  .   .  .   .      return (((s*128+y)*512+x)*8)+l;
        .        .        .         .           .    .  .        .           .  .   .  .   .  }
        .        .        .         .           .    .  .        .           .  .   .  .   .  
        .        .        .         .           .    .  .        .           .  .   .  .   .  /**
        .        .        .         .           .    .  .        .           .  .   .  .   .   * |L0(0),L1(0),L2(0),.......
-- line 19 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotated source file: /home/leo/Desktop/Tesi/TesiTest/matrix_comp_tests/./main.cpp
--------------------------------------------------------------------------------
Ir________________ I1mr____ ILmr____ Dr________________ D1mr____ DLmr Dw______________ D1mw__________ DLmw__________ Bc______________ Bcm_________ Bi Bim 

-- line 65 ----------------------------------------
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  double cpuSecond() {
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    struct timespec ts;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    timespec_get(&ts, TIME_UTC);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    return ((double)ts.tv_sec + (double)ts.tv_nsec * 1.e-9);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
        21  (0.0%) 2 (0.1%) 2 (0.1%)          0         0           0         4 (0.0%)      0              0                 0            0         0   0  Logger logger("logs.txt");
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <iostream>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <vector>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <random>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <numeric>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  #include <cstdint>
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  // Function to generate a vector of random int8_t numbers with a sum in the range [-128, 127]
-- line 81 ----------------------------------------
-- line 128 ----------------------------------------
         .         .        .                 .         .           .         .             .              .                 .            .         .   .              }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .          }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      return numbers;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         9  (0.0%) 1 (0.0%) 1 (0.0%)          1  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0  int main(int args,char ** argv){
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         1  (0.0%) 1 (0.0%) 1 (0.0%)          0         0           0         1 (0.0%)      0              0                 0            0         0   0    cache_grind_prf();
         2  (0.0%) 1 (0.0%) 0                 0         0           0         1 (0.0%)      0              0                 0            0         0   0    exit(0);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // benchmark_mvm_algorithms();
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // exit(0);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // scattered_matrix();
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // new_mvm_test();
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    // exit(0); 
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    uint64_t size;
-- line 147 ----------------------------------------
-- line 300 ----------------------------------------
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    delete[] f;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    delete[] result;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    delete[] sector;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    delete[] layer;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    return 0;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         8  (0.0%) 0        0                 1  (0.0%) 0           0         3 (0.0%)      0              0                 0            0         0   0  void cache_grind_prf(){
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    uint64_t size;
         3  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    input_size_t * vector = new input_size_t[max_vect];
         9  (0.0%) 1 (0.0%) 1 (0.0%)          1  (0.0%) 0           0         2 (0.0%)      0              0                 0            0         0   0    std::cout<<"befre alloc: " << std::endl;
         4  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    pcm_size_t * f = flat(&size); 
         3  (0.0%) 1 (0.0%) 1 (0.0%)          0         0           0         2 (0.0%)      0              0                 0            0         0   0    int64_t * result = new int64_t[max_vect];
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         4  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    srand(time(nullptr));
         1  (0.0%) 0        0                 0         0           0         1 (0.0%)      0              0                 0            0         0   0    int range = INT8_MAX - INT8_MIN + 1;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         3  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    pcm_size_t **** matrix = new pcm_size_t***[n_sectors];
        16  (0.0%) 1 (0.0%) 1 (0.0%)          9  (0.0%) 0           0         1 (0.0%)      0              0                 5 (0.0%)     4 (0.0%)  0   0    for(int s=0;s<n_sectors;++s){
        32  (0.0%) 1 (0.0%) 1 (0.0%)          8  (0.0%) 0           0         8 (0.0%)      0              0                 0            0         0   0      matrix[s]=new pcm_size_t**[8];
       112  (0.0%) 0        0                68  (0.0%) 0           0         4 (0.0%)      0              0                36 (0.0%)    10 (0.0%)  0   0      for(int l=0;l<8;++l){
       416  (0.0%) 1 (0.0%) 1 (0.0%)        128  (0.0%) 0           0        64 (0.0%)      4  (0.0%)      1  (0.0%)         0            0         0   0        matrix[s][l]=new pcm_size_t*[tile_size];
    12,416  (0.0%) 0        0             8,224  (0.0%) 0           0        32 (0.0%)      0              0             4,128 (0.0%)    40 (0.0%)  0   0        for(int y=0;y<tile_size;++y){
    73,728  (0.0%) 1 (0.0%) 1 (0.0%)     24,576  (0.0%) 0           0     8,192 (0.0%)    512  (0.7%)    488  (0.7%)         0            0         0   0          matrix[s][l][y]=new pcm_size_t[max_x];
 6,307,840  (1.7%) 0        0         4,198,400  (3.3%) 0           0     4,096 (0.0%)      0              0         2,101,248 (4.7%) 4,106 (1.4%)  0   0          for(int x=0;x<max_x;++x){
54,525,952 (14.6%) 1 (0.0%) 1 (0.0%) 18,874,368 (15.0%) 0           0 4,194,304 (8.8%) 29,696 (41.7%) 29,696 (42.9%)         0            0         0   0            matrix[s][l][y][x]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .         .        .                 .         .           .         .             .              .                 .            .         .   .          }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .        }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    
     1,540  (0.0%) 1 (0.0%) 1 (0.0%)      1,025  (0.0%) 0           0         1 (0.0%)      0              0               513 (0.0%)     8 (0.0%)  0   0    for(int i=0;i<512;i++){
     5,632  (0.0%) 0        0             1,536  (0.0%) 0           0     1,024 (0.0%)      9  (0.0%)      7  (0.0%)         0            0         0   0      vector[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
       772  (0.0%) 1 (0.0%) 1 (0.0%)        513  (0.0%) 0           0         1 (0.0%)      0              0               257 (0.0%)    10 (0.0%)  0   0    for(int i=0;i<256;i++){
     1,536  (0.0%) 0        0               512  (0.0%) 0           0       256 (0.0%)     33  (0.0%)     32  (0.0%)         0            0         0   0      result[i]=0;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
10,485,766  (2.8%) 1 (0.0%) 1 (0.0%)  6,291,458  (5.0%) 0           0         1 (0.0%)      0              0         2,097,153 (4.7%)     8 (0.0%)  0   0    for(long long i=0;i<size;++i){
20,971,520  (5.6%) 0        0         6,291,456  (5.0%) 0           0 4,194,304 (8.8%) 32,769 (46.0%) 32,768 (47.3%)         0            0         0   0      f[i]=static_cast<int8_t>(INT8_MIN + (std::rand() % range));
         .         .        .                 .         .           .         .             .              .                 .            .         .   .      ///std::cout<<static_cast<int32_t>(f[i]);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         3  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    int* sector = new int[4+1];
         3  (0.0%) 0        0                 0         0           0         2 (0.0%)      0              0                 0            0         0   0    int**layer =new int*[n_sectors+1];
        16  (0.0%) 1 (0.0%) 1 (0.0%)          9  (0.0%) 0           0         1 (0.0%)      0              0                 5 (0.0%)     3 (0.0%)  0   0    for(int i=0;i<n_sectors;++i){
        32  (0.0%) 0        0                 8  (0.0%) 0           0         8 (0.0%)      0              0                 0            0         0   0      layer[i]=new int[8+1];
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
        16  (0.0%) 1 (0.0%) 1 (0.0%)          9  (0.0%) 0           0         1 (0.0%)      0              0                 5 (0.0%)     4 (0.0%)  0   0    for(int i=0;i<4;++i){
        28  (0.0%) 1 (0.0%) 1 (0.0%)         12  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0      sector[i]=i;
        28  (0.0%) 0        0                12  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0      layer[i][0]=0;
        32  (0.0%) 0        0                12  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0      layer[i][1]=7;
        32  (0.0%) 0        0                12  (0.0%) 0           0         4 (0.0%)      0              0                 0            0         0   0      layer[i][2]=-1;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    }
         3  (0.0%) 0        0                 1  (0.0%) 0           0         1 (0.0%)      0              0                 0            0         0   0    sector[4]=-1;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 0           0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_mtd_16(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 0                 5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_mtd_8(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_mtd_4(f,vector,layer,sector,result);
         8  (0.0%) 0        0                 5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_4(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm_3(f,vector,layer,sector,result);
         8  (0.0%) 0        0                 5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    new_mvm(f,vector,layer,sector,result);
         8  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 2 (0.0%)    0         1 (0.0%)      0              0                 0            0         0   0    sslow_mvm(matrix,vector,layer,sector,result);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         5  (0.0%) 0        0                 2  (0.0%) 1 (0.0%)    0         1 (0.0%)      0              0                 1 (0.0%)     1 (0.0%)  0   0    delete[] vector;
         5  (0.0%) 0        0                 2  (0.0%) 1 (0.0%)    0         1 (0.0%)      0              0                 1 (0.0%)     0         0   0    delete[] f;
         5  (0.0%) 1 (0.0%) 1 (0.0%)          2  (0.0%) 0           0         1 (0.0%)      0              0                 1 (0.0%)     0         0   0    delete[] result;
         5  (0.0%) 0        0                 2  (0.0%) 0           0         1 (0.0%)      0              0                 1 (0.0%)     0         0   0    delete[] sector;
         5  (0.0%) 0        0                 2  (0.0%) 0           0         1 (0.0%)      0              0                 1 (0.0%)     0         0   0    delete[] layer;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         7  (0.0%) 1 (0.0%) 1 (0.0%)          5  (0.0%) 1 (0.0%)    0         0             0              0                 1 (0.0%)     1 (0.0%)  0   0  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  void scattered_matrix(){
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    uint64_t size;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    input_size_t * vector = new input_size_t[max_vect];
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    std::cout<<"befre alloc: " << std::endl;
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    pcm_size_t * f = flat(&size); 
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    int64_t * result = new int64_t[max_vect];
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
-- line 384 ----------------------------------------
-- line 930 ----------------------------------------
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    fclose(mtd_32);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    fclose(mtd_64);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    fclose(mtd_128);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .    fclose(mtd_512);
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
        23  (0.0%) 3 (0.1%) 3 (0.1%)          8  (0.0%) 0           0         6 (0.0%)      0              0                 1 (0.0%)     0         0   0  }
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  
         .         .        .                 .         .           .         .             .              .                 .            .         .   .  

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_________________ I1mr_________ ILmr_________ Dr________________ D1mr__________ DLmr_________ Dw________________ D1mw__________ DLmw__________ Bc________________ Bcm____________ Bi_______________ Bim__________ 

121,942,605 (32.8%)    88  (3.1%)    85  (3.3%) 40,940,742 (32.6%) 58,411 (79.6%)     0          9,456,189 (19.9%) 63,217 (88.8%) 62,992 (91.0%)  6,965,245 (15.5%)  10,669  (3.6%)         0             0            annotated: files known & above threshold & readable, line numbers known
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0            annotated: files known & above threshold & readable, line numbers unknown
          0             0             0                  0              0             0                  0              0              0                  0               0                 0             0          unannotated: files known & above threshold & two or more non-identical
241,075,805 (64.8%)   225  (7.8%)   182  (7.0%) 80,220,597 (63.9%)  6,317  (8.6%) 2,868 (36.8%) 37,959,085 (79.9%)  4,424  (6.2%)  4,293  (6.2%) 37,932,554 (84.2%) 279,880 (94.0%)       166  (0.0%)     3  (0.2%)  unannotated: files known & above threshold & unreadable 
    730,841  (0.2%) 1,879 (65.2%) 1,699 (65.5%)    188,150  (0.1%)  8,212 (11.2%) 4,904 (62.9%)     66,052  (0.1%)  3,385  (4.8%)  1,828  (2.6%)    131,194  (0.3%)   6,652  (2.2%)     4,737  (0.1%) 1,062 (81.1%)  unannotated: files known & below threshold
  8,521,013  (2.3%)   691 (24.0%)   629 (24.2%)  4,228,560  (3.4%)    467  (0.6%)    26  (0.3%)     16,866  (0.0%)    167  (0.2%)    121  (0.2%)      9,324  (0.0%)     461  (0.2%) 4,209,042 (99.9%)   244 (18.6%)  unannotated: files unknown

